'Handled Messages:
'900000:Echo
'400020:TrxReverse
'500010:FundsXfr
'550060:StopAtmCard
'550130:ActivateAtmCard
'610000:SetIceRol
'610010:SetIceAutDsc
'612000:RegisterCLIP
'612010:RegisterOTAC
'612020:UpdateLimits
'612040:SetChequeBookRule
'612050:LocPymInf : Refer to TPP Module
'612070:GetTppDtl : Refer to TPP Module
'612210:ChangeCusIstWaiver
'612240:ChangeCusCanTrd
'612250:UpdateAccPrt
'613000:EnumPwdMailer : Refer to PwdMailer Module
'614210:GetChnPrf
'614220:SetChnPrf
'710900:RegisterSMS
'710910:DeRegisterSMS
'901000:GetIceUsrAut
'901010:GetCstVerDta
'901020:GetEnrInf
'901030:GetCstEnrPrm
'901040:GetCstLmtPrm
'901050:GetIceRol
'901060:GetIceAutDsc
'901080:GetBrnCfg
'910010:GetBrnTab
'910020:GetAccTyp
'910030:GetCusTyp
'910040:GetTrxCde
'910050:GetCcyCde
'910060:GetLndCde
'910080:GetResCde
'910090:GetActCde
'910110:EnumAccOff
'910130:GetDeaTyp
'910160:EnumPrcCde
'910170:GetCmaAutPrs
'910180:GetCapPrdInf
'901100:LocCusInf
'930100:EnumTrxInf
'932000:EnumOn2Trx
'960000:EnumFunds
'960010:EnumCusFunds
'970710:EnumLoaSch
'970720:SngRteEnq
'990120:EnumCusAccs
'990130:EnumAtmCrds
'990140:EnumTemplates
'990150:EnumCusDtls
'990200:GetAccDtlEx
'990210:EnumChnGrp
'990250:EnumCusDtlsEx
'990270:GetON2Cde
'990280:ResolveDoubtful

Imports VB = Microsoft.VisualBasic
Imports System.Threading
Imports MQSeries.MQSeries
Imports SIBL0100
Imports SIBL0100.Util
Imports SIBL0100.SQL


Public Module BalanceTracking

    Public Enum ScopeLevel
        AccountLevel = 1
        CustomerLevel = 2
    End Enum

    Public Structure TrkBalStb_Struct '100 Msg #9904001
        Dim Rsv13 As String '13x				Desc:Reserved, space filled
        Dim CcyCde As String '3x				Desc:Currency code
        Dim AccTyp As String '2x				Desc:Account type or "**" if customer level and account types vary.
        Dim AccOff As String '3x				Desc:Account officer for the account level or for the customer level
        Dim CycDte As String '8n				Desc:Equation date (YYYYMMDD) last cycled
        Dim NumDayAct As String '4n				Desc:Number of sets of information being returned
        Dim AccOvdTyp As String '3x				Desc:Encoded overdraft type or "***" when different types being returned (customer level)
        Dim CadDayOvr As String '5n				Desc:Days overdue (highest number at customer level), CAD approach
        Dim BIIDayOvr As String '5n				Desc:Days overdue (highest number customer level), Basel-II approach
        Dim NumAcc As String '2n				Desc:Number of accounts in the information being returned
        Dim Rsv21 As String '22x				Desc:Reserved, space filled
        Dim SpcDat() As SpcDat_Struct '10

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(Rsv13, 13)
            st &= Pack.PackString(CcyCde, 3)
            st &= Pack.PackString(AccTyp, 2)
            st &= Pack.PackString(AccOff, 3)
            st &= Pack.PackDate(CycDte)
            st &= Pack.PackNString(NumDayAct, 4)
            st &= Pack.PackString(AccOvdTyp, 3)
            st &= Pack.PackNString(CadDayOvr, 5)
            st &= Pack.PackNString(BIIDayOvr, 5)
            st &= Pack.PackNString(NumAcc, 2)
            st &= Pack.PackString(Rsv21, 22)
            st &= SpcDat(0).PackTable()
            st &= SpcDat(1).PackTable()
            st &= SpcDat(2).PackTable()
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            Rsv13 = Pack.Strip(DataStream, 13)
            CcyCde = Pack.Strip(DataStream, 3)
            AccTyp = Pack.Strip(DataStream, 2)
            AccOff = Pack.Strip(DataStream, 3)
            CycDte = Pack.Strip(DataStream, 8)
            NumDayAct = Pack.Strip(DataStream, 4)
            AccOvdTyp = Pack.Strip(DataStream, 3)
            CadDayOvr = Pack.Strip(DataStream, 5)
            BIIDayOvr = Pack.Strip(DataStream, 5)
            NumAcc = Pack.Strip(DataStream, 2)
            Rsv21 = Pack.Strip(DataStream, 22)
            ReDim SpcDat(2)
            SpcDat(0).ReadTable(DataStream)
            SpcDat(1).ReadTable(DataStream)
            SpcDat(2).ReadTable(DataStream)
        End Sub

        Public Sub Reset()
            Rsv13 = ""
            CcyCde = ""
            AccTyp = ""
            AccOff = ""
            CycDte = ""
            NumDayAct = ""
            AccOvdTyp = ""
            CadDayOvr = ""
            BIIDayOvr = ""
            NumAcc = ""
            Rsv21 = ""
            Erase SpcDat
            SpcDat = Nothing
        End Sub
    End Structure

    Public Structure SpcDat_Struct '10 Msg #9904002
        Dim SC014 As String '1x				Desc:·
        Dim SC017 As String '1x				Desc:·
        Dim SC020 As String '1x				Desc:·
        Dim SC030 As String '1x				Desc:·
        Dim SC092 As String '1x				Desc:·
        Dim SC093 As String '1x				Desc:·
        Dim SC094 As String '1x				Desc:·
        Dim Rsv22 As String '3x				Desc:·

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(SC014, 1)
            st &= Pack.PackString(SC017, 1)
            st &= Pack.PackString(SC020, 1)
            st &= Pack.PackString(SC030, 1)
            st &= Pack.PackString(SC092, 1)
            st &= Pack.PackString(SC093, 1)
            st &= Pack.PackString(SC094, 1)
            st &= Pack.PackString(Rsv22, 3)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            SC014 = Pack.Strip(DataStream, 1)
            SC017 = Pack.Strip(DataStream, 1)
            SC020 = Pack.Strip(DataStream, 1)
            SC030 = Pack.Strip(DataStream, 1)
            SC092 = Pack.Strip(DataStream, 1)
            SC093 = Pack.Strip(DataStream, 1)
            SC094 = Pack.Strip(DataStream, 1)
            Rsv22 = Pack.Strip(DataStream, 3)
        End Sub
    End Structure

    Public Structure TrkBalCyc_Struct '100 Msg #9904010
        Dim BalDte As String '8n				Desc:Equation date (YYYYMMDD) for this entry
        Dim AccOvdExp As String '8n				Desc:Overdraft expiry date (YYYYMMDD) or zeros if none
        Dim AccOvdLim As String '13ns				Desc:Overdraft limit
        Dim AccAvlBal As String '13ns				Desc:Available balance
        Dim AccLdgBal As String '13ns				Desc:Ledger balance
        Dim AccHldBal As String '13ns				Desc:Held balance
        Dim AccUncBal As String '13ns				Desc:Uncleared balance
        Dim BIIPstDue As String '13ns				Desc:Basel-II calculated past due balamnce

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackDate(BalDte)
            st &= Pack.PackDate(AccOvdExp)
            st &= Pack.PackNS_String(AccOvdLim, 13)
            st &= Pack.PackNS_String(AccAvlBal, 13)
            st &= Pack.PackNS_String(AccLdgBal, 13)
            st &= Pack.PackNS_String(AccHldBal, 13)
            st &= Pack.PackNS_String(AccUncBal, 13)
            st &= Pack.PackNS_String(BIIPstDue, 13)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            BalDte = Pack.Strip(DataStream, 8)
            AccOvdExp = Pack.Strip(DataStream, 8)
            AccOvdLim = Pack.StripNS(DataStream, 13)
            AccAvlBal = Pack.StripNS(DataStream, 13)
            AccLdgBal = Pack.StripNS(DataStream, 13)
            AccHldBal = Pack.StripNS(DataStream, 13)
            AccUncBal = Pack.StripNS(DataStream, 13)
            BIIPstDue = Pack.StripNS(DataStream, 13)
        End Sub

        Public Sub Reset()
            AccOvdExp = ""
            AccOvdLim = ""
            AccAvlBal = ""
            AccLdgBal = ""
            AccHldBal = ""
            AccUncBal = ""
            BIIPstDue = ""
        End Sub
    End Structure

    Public Structure AveBalCyc_Struct '200 Msg #990440/990441
        Dim BalDte As String '8n				Desc:Equation date (YYYYMMDD) for this entry
        Dim AccOvdExp As String '8n				Desc:Overdraft expiry date (YYYYMMDD) or zeros if none
        Dim AccOvdLim As String '13ns				Desc:Overdraft limit
        Dim AccAvlBal As String '13ns				Desc:Available balance
        Dim AccLdgBal As String '13ns				Desc:Ledger balance
        Dim Rsv325A As String '6x	                Desc:Reserved, space filled
        Dim CrdAveLdg As String  ''13n
        Dim CrdDayLdg As String  ''5n
        Dim DebAveLdg As String  ''13n
        Dim DebDayLdg As String  ''5n
        Dim CrdAveBal As String '13n		        Desc:Average credit balance
        Dim CrdDayCnt As String '5n		            Desc:Number of days balance in credit
        Dim DebAveVal As String '13n		        Desc:Average debit balance
        Dim DebDayCnt As String '5n		            Desc:Number of days balance in debit
        Dim CrdMovAmt As String '13n		        Desc:Aggregated credit movement amount across all categories.
        Dim CrdMovCnt As String '5n		            Desc:Total number credit movements across all categories.
        Dim DebMovAmt As String '13n		        Desc:Aggregated debit movement amount across all categories.
        Dim DebMovCnt As String '5n		            Desc:Total debit movements across all categories.
        Dim Rsv325B As String '28x		            Desc:Reservedas string ' space filled


        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackDate(BalDte)
            st &= Pack.PackDate(AccOvdExp)
            st &= Pack.PackNS_String(AccOvdLim, 13)
            st &= Pack.PackNS_String(AccAvlBal, 13)
            st &= Pack.PackNS_String(AccLdgBal, 13)
            st &= Pack.PackString(Rsv325A, 6)
            st &= Pack.PackNString(CrdAveLdg, 13)
            st &= Pack.PackNString(CrdDayLdg, 5)
            st &= Pack.PackNString(DebAveLdg, 13)
            st &= Pack.PackNString(DebDayLdg, 5)
            st &= Pack.PackNString(CrdAveBal, 13)
            st &= Pack.PackNString(CrdDayCnt, 5)
            st &= Pack.PackNString(DebAveVal, 13)
            st &= Pack.PackNString(DebDayCnt, 5)
            st &= Pack.PackNString(CrdMovAmt, 13)
            st &= Pack.PackNString(CrdMovCnt, 5)
            st &= Pack.PackNString(DebMovAmt, 13)
            st &= Pack.PackNString(DebMovCnt, 5)
            st &= Pack.PackString(Rsv325B, 28)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            BalDte = Pack.Strip(DataStream, 8)
            AccOvdExp = Pack.Strip(DataStream, 8)
            AccOvdLim = Pack.StripNS(DataStream, 13)
            AccAvlBal = Pack.StripNS(DataStream, 13)
            AccLdgBal = Pack.StripNS(DataStream, 13)
            Rsv325A = Pack.Strip(DataStream, 6)
            CrdAveLdg = Pack.Strip(DataStream, 13)
            CrdDayLdg = Pack.Strip(DataStream, 5)
            DebAveLdg = Pack.Strip(DataStream, 13)
            DebDayLdg = Pack.Strip(DataStream, 5)
            CrdAveBal = Pack.Strip(DataStream, 13)
            CrdDayCnt = Pack.Strip(DataStream, 5)
            DebAveVal = Pack.Strip(DataStream, 13)
            DebDayCnt = Pack.Strip(DataStream, 5)
            CrdMovAmt = Pack.Strip(DataStream, 13)
            CrdMovCnt = Pack.Strip(DataStream, 5)
            DebMovAmt = Pack.Strip(DataStream, 13)
            DebMovCnt = Pack.Strip(DataStream, 5)
            Rsv325B = Pack.Strip(DataStream, 28)
        End Sub

        Public Sub Reset()
            BalDte = ""
            AccOvdExp = ""
            AccOvdLim = ""
            AccAvlBal = ""
            AccLdgBal = ""
            Rsv325A = ""
            CrdAveLdg = ""
            CrdDayLdg = ""
            DebAveLdg = ""
            DebDayLdg = ""
            CrdAveBal = ""
            CrdDayCnt = ""
            DebAveVal = ""
            DebDayCnt = ""
            CrdMovAmt = ""
            CrdMovCnt = ""
            DebMovAmt = ""
            DebMovCnt = ""
            Rsv325B = ""
        End Sub
    End Structure

    Public Structure ReqEnumerateBalances_Struct '32 Msg #990400
        Dim AccNum As String '13x				Desc:Account number being requested
        Dim CcyCde As String '3x				Desc:Data to be returned in this currency code
        Dim ReqCyc As String '4n				Desc:Number of cycles requested
        Dim CycTyp As String '2x				Desc:Type of cycle requested"DY" = Daily,"MG"=Monthly (Gregorian) "MH"=Monthly (Hegira)"QY" = Quarterly"YG" = Yearly (Gregorian), "YH" = Yearly (Hegira)
        Dim Rsv1 As String '14x				Desc:Reserved, space filled

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(AccNum, 13)
            st &= Pack.PackString(CcyCde, 3)
            st &= Pack.PackNString(ReqCyc, 4)
            st &= Pack.PackString(CycTyp, 2)
            st &= Pack.PackString(Rsv1, 14)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            AccNum = Pack.Strip(DataStream, 13)
            CcyCde = Pack.Strip(DataStream, 3)
            ReqCyc = Pack.Strip(DataStream, 4)
            CycTyp = Pack.Strip(DataStream, 2)
            Rsv1 = Pack.Strip(DataStream, 14)
        End Sub

        Public Sub Reset()
            AccNum = ""
            CcyCde = ""
            ReqCyc = ""
            CycTyp = ""
            Rsv1 = ""
        End Sub
    End Structure

    Public Structure RspEnumerateBalances_Struct '38388 Msg #990401
        Dim MsgReqDat As ReqEnumerateBalances_Struct '32
        Dim TrkBalStb As TrkBalStb_Struct '100
        Dim TrkBalCyc() As TrkBalCyc_Struct '100

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= MsgReqDat.PackTable()
            st &= TrkBalStb.PackTable()
            If Not (TrkBalCyc Is Nothing) Then
                For i As Integer = 0 To TrkBalCyc.Length - 1
                    st &= TrkBalCyc(i).PackTable()
                Next
            End If
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            MsgReqDat.ReadTable(DataStream)
            TrkBalStb.ReadTable(DataStream)
            Dim iCount As Integer
            iCount = AppInstance.ExInt(TrkBalStb.NumDayAct)
            If iCount >= 0 Then
                ReDim TrkBalCyc(iCount - 1)
                For i As Integer = 0 To iCount - 1
                    TrkBalCyc(i).ReadTable(DataStream)
                Next
            End If
        End Sub

        Public Sub Reset()
            MsgReqDat.Reset()
            TrkBalStb.Reset()
            Erase TrkBalCyc
            TrkBalCyc = Nothing
        End Sub
    End Structure

    Public Structure ReqEnumerateMovements_Struct '32 Msg #990420
        Dim AccNum As String '13x				Desc:Account number being requested
        Dim CcyCde As String '3x				Desc:Data to be returned in this currency code
        Dim ReqCyc As String '4n				Desc:Number of cycles requested
        Dim CycTyp As String '2x				Desc:Type of cycle requested
        Dim MovTyp As String '3x				Desc:Type of cycle requested
        Dim Rsv1 As String '11x				Desc:Reserved, space filled

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(AccNum, 13)
            st &= Pack.PackString(CcyCde, 3)
            st &= Pack.PackNString(ReqCyc, 4)
            st &= Pack.PackString(CycTyp, 2)
            st &= Pack.PackString(MovTyp, 3)
            st &= Pack.PackString(Rsv1, 11)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            AccNum = Pack.Strip(DataStream, 13)
            CcyCde = Pack.Strip(DataStream, 3)
            ReqCyc = Pack.Strip(DataStream, 4)
            CycTyp = Pack.Strip(DataStream, 2)
            MovTyp = Pack.Strip(DataStream, 3)
            Rsv1 = Pack.Strip(DataStream, 11)
        End Sub

        Public Sub Reset()
            AccNum = ""
            CcyCde = ""
            ReqCyc = ""
            CycTyp = ""
            Rsv1 = ""
        End Sub
    End Structure

    Public Structure RspEnumerateMovements_Struct '204766 Msg #990421
        Dim MsgReqDat As ReqEnumerateMovements_Struct '32
        Dim TrkMovStb As TrkMovStb_Struct '100
        Dim RspCyc As String '4n				Desc:Actual number of cycles returned
        Dim CntMovDly As String '5n				Desc:Actual number [n] of movement structures returned
        Dim TrkMovDly() As TrkMovDly_Struct '45

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= MsgReqDat.PackTable()
            st &= TrkMovStb.PackTable()
            st &= Pack.PackNString(RspCyc, 4)
            st &= Pack.PackNString(CntMovDly, 5)
            If Not (TrkMovDly Is Nothing) Then
                For i As Integer = 0 To TrkMovDly.Length - 1
                    st &= TrkMovDly(i).PackTable()
                Next
            End If
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            MsgReqDat.ReadTable(DataStream)
            TrkMovStb.ReadTable(DataStream)
            RspCyc = Pack.Strip(DataStream, 4)
            CntMovDly = Pack.Strip(DataStream, 5)
            Dim iCount As Integer
            iCount = AppInstance.ExInt(CntMovDly)
            If iCount >= 0 Then
                ReDim TrkMovDly(iCount - 1)
                For i As Integer = 0 To iCount - 1
                    TrkMovDly(i).ReadTable(DataStream)
                Next
            End If
        End Sub

        Public Sub Reset()
            MsgReqDat.Reset()
            TrkMovStb.Reset()
            RspCyc = ""
            CntMovDly = ""
            Erase TrkMovDly
        End Sub
    End Structure

    Public Structure TrkMovStb_Struct '100 Msg #9904210
        Dim Rsv13 As String  '13x				Desc:Reserved, space filled.
        Dim CcyCde As String '3x				Desc:Currency code
        Dim AccTyp As String '2x				Desc:Account type or spaces if for a customer
        Dim AccOff As String '3x				Desc:Account officer for the account or for the customer
        Dim CycDte As String '8n				Desc:Equation date (YYYYMMDD) of the most recent movement
        Dim NumMovAct As String '4n				Desc:Number of sets of movement information being returned
        Dim AccOvdTyp As String '3x				Desc:Encoded overdraft type or "***" when different types being returned (customer level)
        Dim CadDayOvr As String '5n				Desc:Days overdue (highest number at customer level), CAD approach
        Dim BIIDayOvr As String '5n				Desc:Days overdue (highest number customer level), Basel-II approach
        Dim NumAcc As String '2n				Desc:Number of accounts in the information being returned
        Dim Rsv21 As String '22x				Desc:Reserved, space filled
        Dim SpcDat() As SpcDat_Struct '10

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(Rsv13, 13)
            st &= Pack.PackString(CcyCde, 3)
            st &= Pack.PackString(AccTyp, 2)
            st &= Pack.PackString(AccOff, 3)
            st &= Pack.PackDate(CycDte)
            st &= Pack.PackNString(NumMovAct, 4)
            st &= Pack.PackString(AccOvdTyp, 3)
            st &= Pack.PackNString(CadDayOvr, 5)
            st &= Pack.PackNString(BIIDayOvr, 5)
            st &= Pack.PackNString(NumAcc, 2)
            st &= Pack.PackString(Rsv21, 22)
            st &= SpcDat(0).PackTable()
            st &= SpcDat(1).PackTable()
            st &= SpcDat(2).PackTable()
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            Rsv13 = Pack.Strip(DataStream, 13)
            CcyCde = Pack.Strip(DataStream, 3)
            AccTyp = Pack.Strip(DataStream, 2)
            AccOff = Pack.Strip(DataStream, 3)
            CycDte = Pack.Strip(DataStream, 8)
            NumMovAct = Pack.Strip(DataStream, 4)
            AccOvdTyp = Pack.Strip(DataStream, 3)
            CadDayOvr = Pack.Strip(DataStream, 5)
            BIIDayOvr = Pack.Strip(DataStream, 5)
            NumAcc = Pack.Strip(DataStream, 2)
            Rsv21 = Pack.Strip(DataStream, 22)
            ReDim SpcDat(2)
            SpcDat(0).ReadTable(DataStream)
            SpcDat(1).ReadTable(DataStream)
            SpcDat(2).ReadTable(DataStream)
        End Sub

        Public Sub Reset()
            Rsv13 = ""
            CcyCde = ""
            AccTyp = ""
            AccOff = ""
            CycDte = ""
            NumMovAct = ""
            AccOvdTyp = ""
            CadDayOvr = ""
            BIIDayOvr = ""
            NumAcc = ""
            Rsv21 = ""
            Erase SpcDat
            SpcDat = Nothing
        End Sub
    End Structure

    Public Structure TrkMovDly_Struct '45 Msg #9904211
        Dim EodDte As String '8n				Desc:Date posted (YYYYMMDD)
        Dim MovCat As String '1n				Desc:Movement category (0 to 9)
        Dim CrdMovAmt As String '13n				Desc:Aggregated credit movement amount in category
        Dim CrdMovCnt As String '5n				Desc:Total credit movements in category
        Dim DebMovAmt As String '13n				Desc:Aggregated debit movement amount in category
        Dim DebMovCnt As String '5n				Desc:Total debit movements in category

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackDate(EodDte)
            st &= Pack.PackNString(MovCat, 1)
            st &= Pack.PackNString(CrdMovAmt, 13)
            st &= Pack.PackNString(CrdMovCnt, 5)
            st &= Pack.PackNString(DebMovAmt, 13)
            st &= Pack.PackNString(DebMovCnt, 5)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            EodDte = Pack.Strip(DataStream, 8)
            MovCat = Pack.Strip(DataStream, 1)
            CrdMovAmt = Pack.Strip(DataStream, 13)
            CrdMovCnt = Pack.Strip(DataStream, 5)
            DebMovAmt = Pack.Strip(DataStream, 13)
            DebMovCnt = Pack.Strip(DataStream, 5)
        End Sub
    End Structure

    Public Structure ItmDly_Struct '200 Msg #990441
        '''Dim TrkBalCyc As TrkBalCyc_Struct '100				Desc:·
        '''Dim TotMovDly As TotMovDly_Struct '45				Desc:·
        Dim AveFlwCyc As AveBalCyc_Struct '200

        Public Function PackTable() As String
            Return AveFlwCyc.PackTable
            '''Dim st As String = String.Empty
            '''st &= TrkBalCyc.PackTable()
            '''st &= TotMovDly.PackTable()
            '''Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            AveFlwCyc.ReadTable(DataStream)
            '''TrkBalCyc.ReadTable(DataStream)
            '''TotMovDly.ReadTable(DataStream)
        End Sub
    End Structure

    Public Structure TotMovDly_Struct '45 Msg #9904411
        Dim EodDte As String '8n				Desc:Date posted (YYYYMMDD) or last date of the period requested.
        Dim Rsv1 As String '1x				Desc:Reserved, space filled
        Dim CrdMovAmt As String '13n				Desc:Aggregated credit movement amount across all categories.
        Dim CrdMovCnt As String '5n				Desc:Total number credit movements across all categories.
        Dim DebMovAmt As String '13n				Desc:Aggregated debit movement amount across all categories.
        Dim DebMovCnt As String '5n				Desc:Total debit movements across all categories.

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackDate(EodDte)
            st &= Pack.PackString(Rsv1, 1)
            st &= Pack.PackNString(CrdMovAmt, 13)
            st &= Pack.PackNString(CrdMovCnt, 5)
            st &= Pack.PackNString(DebMovAmt, 13)
            st &= Pack.PackNString(DebMovCnt, 5)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            EodDte = Pack.Strip(DataStream, 8)
            Rsv1 = Pack.Strip(DataStream, 1)
            CrdMovAmt = Pack.Strip(DataStream, 13)
            CrdMovCnt = Pack.Strip(DataStream, 5)
            DebMovAmt = Pack.Strip(DataStream, 13)
            DebMovCnt = Pack.Strip(DataStream, 5)
        End Sub
    End Structure

    Public Structure ReqEnumerateBalancesAndCashFlow_Struct '32 Msg #990440
        Dim Rsv01 As String '4x				Desc:Reserved, ignored
        Dim CusNum As String '6x				Desc:Customer number being requested
        Dim Rsv02 As String '3x				Desc:Reserved, ignored
        Dim CcyCde As String '3x				Desc:Data to be returned in this currency code
        Dim ReqCyc As String '4n				Desc:Number of cycles requested
        Dim CycTyp As String '2x				Desc:Type of cycle requested
        Dim Rsv1 As String '14x				Desc:Reserved, space filled

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(Rsv01, 4)
            st &= Pack.PackString(CusNum, 6)
            st &= Pack.PackString(Rsv02, 3)
            st &= Pack.PackString(CcyCde, 3)
            st &= Pack.PackNString(ReqCyc, 4)
            st &= Pack.PackString(CycTyp, 2)
            st &= Pack.PackString(Rsv1, 14)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            Rsv01 = Pack.Strip(DataStream, 4)
            CusNum = Pack.Strip(DataStream, 6)
            Rsv02 = Pack.Strip(DataStream, 3)
            CcyCde = Pack.Strip(DataStream, 3)
            ReqCyc = Pack.Strip(DataStream, 4)
            CycTyp = Pack.Strip(DataStream, 2)
            Rsv1 = Pack.Strip(DataStream, 14)
        End Sub

        Public Sub Reset()
            Rsv01 = ""
            CusNum = ""
            Rsv02 = ""
            CcyCde = ""
            ReqCyc = ""
            CycTyp = ""
            Rsv1 = ""
        End Sub
    End Structure

    Public Structure RspEnumerateBalancesAndCashFlow_Struct '58204 Msg #990441
        Dim MsgReqDat As ReqEnumerateBalancesAndCashFlow_Struct '32				Desc:Echoed input request
        Dim TrkBalStb As TrkBalStb_Struct '100				Desc:Balance tracking stub
        Dim TrkMovStb As TrkMovStb_Struct '32				Desc:Tracked movement stub data (see structure)
        Dim RspCyc As String '4n				Desc:Actual number of cycles returned
        Dim CntItmDly As String '5n				Desc:Actual number sets of items structures returned [n]
        Dim ItmDly() As ItmDly_Struct '200				Desc:Actual number sets of items structures returned

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= MsgReqDat.PackTable()
            st &= TrkBalStb.PackTable()
            st &= TrkMovStb.PackTable()
            st &= Pack.PackNString(RspCyc, 4)
            st &= Pack.PackNString(CntItmDly, 5)

            If Not (ItmDly Is Nothing) Then
                For i As Integer = 0 To ItmDly.Length - 1
                    st &= ItmDly(i).PackTable()
                Next
            End If
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            MsgReqDat.ReadTable(DataStream)
            TrkBalStb.ReadTable(DataStream)
            TrkMovStb.ReadTable(DataStream)
            RspCyc = Pack.Strip(DataStream, 4)
            CntItmDly = Pack.Strip(DataStream, 5)

            Dim iCount As Integer
            iCount = AppInstance.ExInt(CntItmDly)
            If iCount >= 0 Then
                ReDim ItmDly(iCount - 1)
                For i As Integer = 0 To iCount - 1
                    ItmDly(i).ReadTable(DataStream)
                Next
            End If
        End Sub

        Public Sub Reset()
            MsgReqDat.Reset()
            TrkBalStb.Reset()
            TrkMovStb.Reset()
            RspCyc = ""
            CntItmDly = ""
            Erase ItmDly
            ItmDly = Nothing
        End Sub
    End Structure

    Public Function SendMessage_EnumerateBalances(ByVal ScpLvl As ScopeLevel, ByVal AccNum As String, ByVal CcyCde As String, ByVal ReqCyc As String, ByVal CycTyp As String) As String

        Dim st As String = String.Empty
        st &= Pack.PackString(AccNum, 13)
        st &= Pack.PackString(CcyCde, 3)
        st &= Pack.PackNString(ReqCyc, 4)
        st &= Pack.PackString(CycTyp, 2)
        st &= Pack.PackString(" ", 14) 'Rsv1
        If ScpLvl = ScopeLevel.AccountLevel Then
            Return AppInstance.SendMessageVisuallyEx("990400", st, "ACC", ExtractCusNumFromAcc(AccNum), AccNum, "")
        Else
            Return AppInstance.SendMessageVisuallyEx("990410", st, "CUS", ExtractCusNumFromAcc(AccNum), "", "")
        End If
    End Function

    Public Function GetMessage_EnumerateBalances(ByVal ScpLvl As ScopeLevel, ByVal MsgId As String, ByRef MsgRspDat As RspEnumerateBalances_Struct) As Boolean
        '990400
        Dim resp As String = String.Empty
        If ScpLvl = ScopeLevel.AccountLevel Then
            If Not (GetMessage_Common("990401", "", MsgId, &H81000438, resp)) Then Return False
        Else
            If Not (GetMessage_Common("990411", "", MsgId, &H81000438, resp)) Then Return False
        End If
        Try

            AppInstance.strip(resp, 256)
            MsgRspDat.ReadTable(resp)

        Catch ex As Exception
            HandleError(&H81000438, "Error:", "Error", ex)
            Return False
        End Try
        Return True

    End Function

    Public Function SendMessage_EnumerateMovements(ByVal ScpLvl As ScopeLevel, ByVal AccNum As String, ByVal CcyCde As String, ByVal ReqCyc As String, ByVal CycTyp As String, ByVal MovTyp As String) As String

        Dim st As String = String.Empty
        st &= Pack.PackString(AccNum, 13)
        st &= Pack.PackString(CcyCde, 3)
        st &= Pack.PackNString(ReqCyc, 4)
        st &= Pack.PackString(CycTyp, 2)
        st &= Pack.PackString(MovTyp, 3)
        st &= Pack.PackString(" ", 11) 'Rsv1
        If ScpLvl = ScopeLevel.AccountLevel Then
            Return AppInstance.SendMessageVisuallyEx("990420", st, "ACC", ExtractCusNumFromAcc(AccNum), AccNum, "")
        Else
            Return AppInstance.SendMessageVisuallyEx("990430", st, "CUS", ExtractCusNumFromAcc(AccNum), "", "")
        End If
    End Function

    Public Function GetMessage_EnumerateMovements(ByVal ScpLvl As ScopeLevel, ByVal MsgId As String, ByRef MsgRspDat As RspEnumerateMovements_Struct) As Boolean
        Dim resp As String = String.Empty

        If ScpLvl = ScopeLevel.AccountLevel Then
            If Not (GetMessage_Common("990421", "", MsgId, &H81000439, resp)) Then Return False
        Else
            If Not (GetMessage_Common("990431", "", MsgId, &H81000439, resp)) Then Return False
        End If
        Try

            AppInstance.strip(resp, 256)
            MsgRspDat.ReadTable(resp)

        Catch ex As Exception
            HandleError(&H81000439, "Error:", "Error", ex)
            Return False
        End Try
        Return True

    End Function

    Public Function SendMessage_EnumerateBalancesAndCashFlow(ByVal ScpLvl As ScopeLevel, ByVal CusAccNum As String, ByVal CcyCde As String, ByVal ReqCyc As String, ByVal CycTyp As String) As String

        Dim st As String = String.Empty
        If ScpLvl = ScopeLevel.AccountLevel Then
            st &= Pack.PackString(CusAccNum, 13)
        Else
            st &= Pack.PackString(" ", 4) 'Rsv01
            st &= Pack.PackString(CusAccNum, 6)
            st &= Pack.PackString(" ", 3) 'Rsv02
        End If
        st &= Pack.PackString(CcyCde, 3)
        st &= Pack.PackNString(ReqCyc, 4)
        st &= Pack.PackString(CycTyp, 2)
        st &= Pack.PackString(" ", 14) 'Rsv1
        If ScpLvl = ScopeLevel.AccountLevel Then
            Return AppInstance.SendMessageVisuallyEx("990440", st, "ACC", ExtractCusNumFromAcc(CusAccNum), CusAccNum, "")
        Else
            Return AppInstance.SendMessageVisuallyEx("990440", st, "CUS", CusAccNum, "", "")
        End If
    End Function

    Public Function GetMessage_EnumerateBalancesAndCashFlow(ByVal MsgId As String, ByRef MsgRspDat As RspEnumerateBalancesAndCashFlow_Struct) As Boolean
        '990440
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("990441", "", MsgId, &H81000440, resp)) Then Return False
        Try

            AppInstance.strip(resp, 256)
            MsgRspDat.ReadTable(resp)

        Catch ex As Exception
            HandleError(&H81000440, "Error:", "Error", ex)
            Return False
        End Try
        Return True

    End Function

End Module

Public Module MobileBanking

#Region "Ice Data Structures"

    <Serializable()> _
    Public Structure ContactInformation_Struct '2064
        Dim CusNum As String '6n
        Dim EqnCmpCde As String '1x
        Dim Rsv01 As String '9x
        Dim PrsConDat As PrsConDat_Struct '2048

        Public Function PackTable() As String
            Dim st As String
            st = Pack.PackString(CusNum, 6)
            st &= Pack.PackString(EqnCmpCde, 1)
            st &= Pack.PackString(Rsv01, 9)
            st &= PrsConDat.PackTable()
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            CusNum = Pack.Strip(DataStream, 6)
            EqnCmpCde = Pack.Strip(DataStream, 1)
            Rsv01 = Pack.Strip(DataStream, 9)
            PrsConDat.ReadTable(DataStream)
        End Sub
    End Structure

    '---------------
    <Serializable()> _
    Public Structure CMRComboInformation_Struct '4216
        Dim CusNum As String '6n
        Dim EqnCmpCde As String '1x
        Dim ReqComCon As String '1x
        Dim Rsv01 As String '8x
        Dim CidDatGrp As CidDatGrp_Struct '128
        Dim PrsConDat As PrsConDat_Struct '2048
        Dim PrsBasDat As PrsBasDat_Struct '1024
        Dim ComConDat As ComConDat_Struct '1000

        Public Function PackTable() As String
            Dim st As String
            st = Pack.PackNString(CusNum, 6)
            st &= Pack.PackString(EqnCmpCde, 1)
            st &= Pack.PackString(ReqComCon, 1)
            st &= Pack.PackString(Rsv01, 8)
            st &= CidDatGrp.PackTable()
            st &= PrsConDat.PackTable()
            st &= PrsBasDat.PackTable()
            st &= ComConDat.PackTable()
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            CusNum = Pack.Strip(DataStream, 6)
            EqnCmpCde = Pack.Strip(DataStream, 1)
            ReqComCon = Pack.Strip(DataStream, 1)
            Rsv01 = Pack.Strip(DataStream, 8)
            CidDatGrp.ReadTable(DataStream)
            PrsConDat.ReadTable(DataStream)
            PrsBasDat.ReadTable(DataStream)
            ComConDat.ReadTable(DataStream)
        End Sub
    End Structure

    <Serializable()> _
    Public Structure CidDatGrp_Struct '128
        Dim CidRowVer As String '12x
        Dim CidDat2 As CidDat_Struct '16
        Dim CidDocExp As String '8x
        Dim CidDocIss As String '20x
        Dim Rsv300 As String '8n
        Dim CidModStp As String '14x
        Dim CidModWho As String '10x
        Dim ReqRowVer As String '12x
        Dim ReqFlyFlg As String '1x
        Dim ReqFlyStp As String '14x
        Dim Rsv301 As String '13x

        Public Function PackTable() As String
            Dim st As String
            st = Pack.PackString(CidRowVer, 12)
            st &= CidDat2.PackTable()
            st &= Pack.PackString(CidDocExp, 8)
            st &= Pack.PackString(CidDocIss, 20)
            st &= Pack.PackString(Rsv300, 8)
            st &= Pack.PackString(CidModStp, 14)
            st &= Pack.PackString(CidModWho, 10)
            st &= Pack.PackString(ReqRowVer, 12)
            st &= Pack.PackString(ReqFlyFlg, 1)
            st &= Pack.PackString(ReqFlyStp, 14)
            st &= Pack.PackString(Rsv301, 13)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            CidRowVer = Pack.Strip(DataStream, 12)
            CidDat2.ReadTable(DataStream)
            CidDocExp = Pack.Strip(DataStream, 8)
            CidDocIss = Pack.Strip(DataStream, 20)
            Rsv300 = Pack.Strip(DataStream, 8)
            CidModStp = Pack.Strip(DataStream, 14)
            CidModWho = Pack.Strip(DataStream, 10)
            ReqRowVer = Pack.Strip(DataStream, 12)
            ReqFlyFlg = Pack.Strip(DataStream, 1)
            ReqFlyStp = Pack.Strip(DataStream, 14)
            Rsv301 = Pack.Strip(DataStream, 13)
        End Sub
    End Structure

    <Serializable()> _
    Public Structure CidDat_Struct '16
        Dim CidNatCde As String '2x
        Dim CidDocTyp As String '2x
        Dim CidDocVal As String '12x

        Public Function PackTable() As String
            Dim st As String
            st = Pack.PackString(CidNatCde, 2)
            st &= Pack.PackString(CidDocTyp, 2)
            st &= Pack.PackString(CidDocVal, 12)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            CidNatCde = Pack.Strip(DataStream, 2)
            CidDocTyp = Pack.Strip(DataStream, 2)
            CidDocVal = Pack.Strip(DataStream, 12)
        End Sub
    End Structure

    <Serializable()> _
    Public Structure PrsConDat_Struct '2048
        Dim ConRowVer As String '12n
        Dim PstHldBrn As String '4x
        Dim PstHldBox As String '4x
        Dim TelMob As String '40x
        Dim WebUrl As String '50x
        Dim Rsv103 As String '14x
        Dim CusLngCde As String '2x
        Dim EqnCmpCde As String '1x
        Dim ConModStp As String '14x
        Dim ConModWho As String '10x
        Dim LocDat As LocDat_Struct '466
        Dim Rsv104 As String '932x
        Dim Rsv105 As String '499x

        Public Function PackTable() As String
            Dim st As String
            st = Pack.PackNString(ConRowVer, 12)
            st &= Pack.PackString(PstHldBrn, 4)
            st &= Pack.PackString(PstHldBox, 4)
            st &= Pack.PackString(TelMob, 40)
            st &= Pack.PackString(WebUrl, 50)
            st &= Pack.PackString(Rsv103, 14)
            st &= Pack.PackString(CusLngCde, 2)
            st &= Pack.PackString(EqnCmpCde, 1)
            st &= Pack.PackString(ConModStp, 14)
            st &= Pack.PackString(ConModWho, 10)
            st &= LocDat.PackTable()
            st &= Pack.PackString(Rsv104, 932)
            st &= Pack.PackString(Rsv105, 499)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            ConRowVer = Pack.Strip(DataStream, 12)
            PstHldBrn = Pack.Strip(DataStream, 4)
            PstHldBox = Pack.Strip(DataStream, 4)
            TelMob = Pack.Strip(DataStream, 40)
            WebUrl = Pack.Strip(DataStream, 50)
            Rsv103 = Pack.Strip(DataStream, 14)
            CusLngCde = Pack.Strip(DataStream, 2)
            EqnCmpCde = Pack.Strip(DataStream, 1)
            ConModStp = Pack.Strip(DataStream, 14)
            ConModWho = Pack.Strip(DataStream, 10)
            LocDat.ReadTable(DataStream)
            Rsv104 = Pack.Strip(DataStream, 932)
            Rsv105 = Pack.Strip(DataStream, 499)
        End Sub
    End Structure

    <Serializable()> _
    Public Structure LocDat_Struct '466
        Dim AraNadCde As String '4x
        Dim AraNad() As String '4*35x
        Dim EngNadCde As String '4x
        Dim EngNad() As String '4*35x
        'Dim SrtCde As String '10x
        Dim SrtLndCde As String '2x
        Dim SrtZipCde As String '8x
        Dim EmlTrk As String '65x
        Dim TelNum1 As String '25x
        Dim TelNum2 As String '25x
        Dim FaxNum As String '25x
        Dim TlxNum As String '20x
        Dim TlxBak As String '8x

        Public Function PackTable() As String
            Dim st As String
            st = Pack.PackString(AraNadCde, 4)
            For ind As Integer = 0 To 3 : st &= Pack.PackString(AraNad(ind), 35) : Next
            st &= Pack.PackString(EngNadCde, 4)
            For ind As Integer = 0 To 3 : st &= Pack.PackString(EngNad(ind), 35) : Next
            'st &= Pack.PackString(SrtCde, 10)
            st &= Pack.PackString(SrtLndCde, 2)
            st &= Pack.PackString(SrtZipCde, 8)
            st &= Pack.PackString(EmlTrk, 65)
            st &= Pack.PackString(TelNum1, 25)
            st &= Pack.PackString(TelNum2, 25)
            st &= Pack.PackString(FaxNum, 25)
            st &= Pack.PackString(TlxNum, 20)
            st &= Pack.PackString(TlxBak, 8)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            AraNadCde = Pack.Strip(DataStream, 4)
            ReDim AraNad(3)
            For ind As Integer = 0 To 3 : AraNad(ind) = Pack.Strip(DataStream, 35) : Next
            EngNadCde = Pack.Strip(DataStream, 4)
            ReDim EngNad(3)
            For ind As Integer = 0 To 3 : EngNad(ind) = Pack.Strip(DataStream, 35) : Next
            'SrtCde = Pack.Strip(DataStream, 10)
            SrtLndCde = Pack.Strip(DataStream, 2)
            SrtZipCde = Pack.Strip(DataStream, 8)
            EmlTrk = Pack.Strip(DataStream, 65)
            TelNum1 = Pack.Strip(DataStream, 25)
            TelNum2 = Pack.Strip(DataStream, 25)
            FaxNum = Pack.Strip(DataStream, 25)
            TlxNum = Pack.Strip(DataStream, 20)
            TlxBak = Pack.Strip(DataStream, 8)
        End Sub
    End Structure

    <Serializable()> _
    Public Structure DmoDat_Struct
        Dim PrsNatCde As String  '2x
        Dim PrsSexCde As String  '1x
        Dim PrsDOB As String     '8x
        'Dim PrsDOBYea As String  '4n
        'Dim PrsDOBMth As String  '2n
        'Dim PrsDOBDay As String  '2n
        Dim PrsAge As String  '3n
        Dim PrsPOB As String  '20x
        Dim PrsMarSta As String  '1x
        Dim PrsRlgCde As String  '3x
        Dim PrsDepNum As String  '2n

        Public Function PackTable() As String
            Dim st As String = ""
            st &= Pack.PackString(PrsNatCde, 2)
            st &= Pack.PackString(PrsSexCde, 1)
            st &= Pack.PackString(PrsDOB, 8)
            'st &= Pack.PackString(PrsDOBYea, 4)
            'st &= Pack.PackString(PrsDOBMth, 2)
            'st &= Pack.PackString(PrsDOBDay, 2)
            st &= Pack.PackString(PrsAge, 3)
            st &= Pack.PackString(PrsPOB, 20)
            st &= Pack.PackString(PrsMarSta, 1)
            st &= Pack.PackString(PrsRlgCde, 3)
            st &= Pack.PackString(PrsDepNum, 2)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            PrsNatCde = Pack.Strip(DataStream, 2)
            PrsSexCde = Pack.Strip(DataStream, 1)
            PrsDOB = Pack.Strip(DataStream, 8)
            'PrsDOBYea = Pack.Strip(DataStream, 4)
            'PrsDOBMth = Pack.Strip(DataStream, 2)
            'PrsDOBDay = Pack.Strip(DataStream, 2)
            PrsAge = Pack.Strip(DataStream, 3)
            PrsPOB = Pack.Strip(DataStream, 20)
            PrsMarSta = Pack.Strip(DataStream, 1)
            PrsRlgCde = Pack.Strip(DataStream, 3)
            PrsDepNum = Pack.Strip(DataStream, 2)
        End Sub
    End Structure

    <Serializable()> _
    Public Structure PrsNam_struct
        Dim ShtNam As String '15x
        Dim UnsNam As String '35x
        Dim StrNam() As String '4*15x=	60
    End Structure

    <Serializable()> _
    Public Structure NamDat_Struct '466
        Dim PrsNam() As PrsNam_struct '2*110x
        Dim PrsSalCde As String '3x
        Dim TypSalCde As String '1x

        Public Function PackTable() As String
            Dim st As String = ""
            For i As Integer = 0 To 1
                st &= Pack.PackString(PrsNam(i).ShtNam, 15)
                st &= Pack.PackString(PrsNam(i).UnsNam, 35)
                For j As Integer = 0 To 3
                    st &= Pack.PackString(PrsNam(i).StrNam(j), 15)
                Next
            Next
            st &= Pack.PackString(PrsSalCde, 3)
            st &= Pack.PackString(TypSalCde, 1)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            ReDim PrsNam(1) '2 elements
            ReDim PrsNam(0).StrNam(3) '4 elements
            ReDim PrsNam(1).StrNam(3) '4 elements

            For i As Integer = 0 To 1
                PrsNam(i).ShtNam = Pack.Strip(DataStream, 15)
                PrsNam(i).UnsNam = Pack.Strip(DataStream, 35)
                For j As Integer = 0 To 3
                    PrsNam(i).StrNam(j) = Pack.Strip(DataStream, 15)
                Next
            Next
            PrsSalCde = Pack.Strip(DataStream, 3)
            TypSalCde = Pack.Strip(DataStream, 1)
        End Sub
    End Structure

    <Serializable()> _
    Public Structure EduDat_Struct
        Dim EduLev As String '4x
        Dim EduLoc As String '20x

        Public Function PackTable() As String
            Dim st As String = ""
            st &= Pack.PackString(EduLev, 4)
            st &= Pack.PackString(EduLoc, 20)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            EduLev = Pack.Strip(DataStream, 4)
            EduLoc = Pack.Strip(DataStream, 20)
        End Sub
    End Structure

    <Serializable()> _
    Public Structure EmpDat_Struct '0 Msg #123455
        Dim EmpTyp As String '4x				Desc:Type of employment
        Dim JobCat As String '4x				Desc:Job category or title
        Dim BusCat As String '4x				Desc:Business sector
        Dim AnnSalSar As String '7n				Desc:Annual salary (whole SAR)
        Dim AnnBonSar As String '7n				Desc:Annual bonus (whole SAR)
        Dim AnnComSar As String '7n				Desc:Annual commission (whole SAR)
        Dim EmpCde As String '6x				Desc:Employer code
        Dim EmpCid As String '14x				Desc:Employer code
        'EmpNamAdd 				                Desc:Employer name and address
        Dim NamAdd() As String '35x				Desc:

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(EmpTyp, 4)
            st &= Pack.PackString(JobCat, 4)
            st &= Pack.PackString(BusCat, 4)
            st &= Pack.PackNString(AnnSalSar, 7)
            st &= Pack.PackNString(AnnBonSar, 7)
            st &= Pack.PackNString(AnnComSar, 7)
            st &= Pack.PackString(EmpCde, 6)
            st &= Pack.PackString(EmpCid, 14)
            For i As Integer = 0 To 3 : st &= Pack.PackString(NamAdd(i), 35) : Next
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            ReDim NamAdd(3) '4 elements
            EmpTyp = Pack.Strip(DataStream, 4)
            JobCat = Pack.Strip(DataStream, 4)
            BusCat = Pack.Strip(DataStream, 4)
            AnnSalSar = Pack.Strip(DataStream, 7)
            AnnBonSar = Pack.Strip(DataStream, 7)
            AnnComSar = Pack.Strip(DataStream, 7)
            EmpCde = Pack.Strip(DataStream, 6)
            EmpCid = Pack.Strip(DataStream, 14)
            For i As Integer = 0 To 3 : NamAdd(i) = Pack.Strip(DataStream, 35) : Next
        End Sub
    End Structure

    <Serializable()> _
    Public Structure PrsBasDat_Struct '1024
        Dim BasRowVer As String '12n
        Dim Rsv202 As String '8x
        Dim DmoDat As DmoDat_Struct '40x
        Dim NamDat As NamDat_Struct '224x
        Dim EduDat As EduDat_Struct '24x
        Dim EmpDat As EmpDat_Struct '193x
        Dim BasModStp As String '14x
        Dim BasModWho As String '10x
        Dim Rsv203 As String '499x

        Public Function PackTable() As String
            Dim st As String
            st = Pack.PackString(BasRowVer, 12)
            st &= Pack.PackString(Rsv202, 8)
            st &= DmoDat.PackTable() '40
            st &= NamDat.PackTable() '224
            st &= EduDat.PackTable() '24
            st &= EmpDat.PackTable() '193
            st &= Pack.PackString(BasModStp, 14)
            st &= Pack.PackString(BasModWho, 10)
            st &= Pack.PackString(Rsv203, 499)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            BasRowVer = Pack.Strip(DataStream, 12)
            Rsv202 = Pack.Strip(DataStream, 8)
            DmoDat.ReadTable(DataStream) '40
            NamDat.ReadTable(DataStream) '224
            EduDat.ReadTable(DataStream) '24
            EmpDat.ReadTable(DataStream) '193
            BasModStp = Pack.Strip(DataStream, 14)
            BasModWho = Pack.Strip(DataStream, 10)
            Rsv203 = Pack.Strip(DataStream, 499)
        End Sub
    End Structure

    <Serializable()> _
    Public Structure ComConDat_Struct '1000
        Dim PerChn() As PerChn_Struct '4*250

        Public Function PackTable() As String
            Dim st As String = ""
            If PerChn Is Nothing Then Return Space(1000)
            For i As Integer = 0 To 3 : st &= PerChn(i).PackTable() : Next
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            ReDim PerChn(3)
            For i As Integer = 0 To 3 : PerChn(i).ReadTable(DataStream) : Next
        End Sub
    End Structure

    <Serializable()> _
    Public Structure PerChn_Struct '250
        Dim ChnIde As String '4x
        Dim MobRowVer As String '12x
        Dim MobTelRec As String '1x
        Dim MobTelUse As String '1x
        Dim MobTel As String '25x
        Dim EmlRowVer As String '12x
        Dim EmlAddRec As String '1x
        Dim EmlAddUse As String '1x
        Dim EmlAdd As String '50x
        Dim Rsv00 As String '143x

        Public Function PackTable() As String
            Dim st As String
            st = Pack.PackString(ChnIde, 4)
            st &= Pack.PackString(MobRowVer, 12)
            st &= Pack.PackString(MobTelRec, 1)
            st &= Pack.PackString(MobTelUse, 1)
            st &= Pack.PackString(MobTel, 25)
            st &= Pack.PackString(EmlRowVer, 12)
            st &= Pack.PackString(EmlAddRec, 1)
            st &= Pack.PackString(EmlAddUse, 1)
            st &= Pack.PackString(EmlAdd, 50)
            st &= Pack.PackString(Rsv00, 143)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            ChnIde = Pack.Strip(DataStream, 4)
            MobRowVer = Pack.Strip(DataStream, 12)
            MobTelRec = Pack.Strip(DataStream, 1)
            MobTelUse = Pack.Strip(DataStream, 1)
            MobTel = Pack.Strip(DataStream, 25)
            EmlRowVer = Pack.Strip(DataStream, 12)
            EmlAddRec = Pack.Strip(DataStream, 1)
            EmlAddUse = Pack.Strip(DataStream, 1)
            EmlAdd = Pack.Strip(DataStream, 50)
            Rsv00 = Pack.Strip(DataStream, 143)
        End Sub
    End Structure

    <Serializable()> _
    Public Structure AltBalDat_Struct
        Dim ChgFlg As String '1x
        Dim ChgCcy As String '3x
        Dim ChgAmt As String '10n

        Public Function PackTable() As String
            Dim st As String
            st = Pack.PackString(ChgFlg, 1)
            st &= Pack.PackString(ChgCcy, 3)
            st &= Pack.PackNString(ChgAmt, 10)
            Return st
        End Function
        Public Sub ReadTable(ByRef DataStream As String)
            ChgFlg = Pack.Strip(DataStream, 1)
            ChgCcy = Pack.Strip(DataStream, 3)
            ChgAmt = Pack.Strip(DataStream, 10)
        End Sub
    End Structure

    <Serializable()> _
    Public Structure AltTrxAct_Struct
        Dim TrxFlg As String '1x
        Dim TrxCcy As String '3x
        Dim TrxAmt As String '10n
        Dim TrxAtm As String '1x
        Dim TrxCor As String '1x
        Dim TrxSMS As String '1x
        Dim TrxIBK As String '1x
        Dim TrxIVR As String '1x
        Dim TrxWAP As String '1x
        Dim TrxDeb As String '1x
        Dim TrxCrd As String '1x
        Dim TrxXfrInb As String '1x
        Dim TrxXfrOut As String '1x
        Dim Rsv35 As String '11x

        Public Function PackTable() As String
            Dim st As String
            st = Pack.PackString(TrxFlg, 1)
            st &= Pack.PackString(TrxCcy, 3)
            st &= Pack.PackNString(TrxAmt, 10)
            st &= Pack.PackString(TrxAtm, 1)
            st &= Pack.PackString(TrxCor, 1)
            st &= Pack.PackString(TrxSMS, 1)
            st &= Pack.PackString(TrxIBK, 1)
            st &= Pack.PackString(TrxIVR, 1)
            st &= Pack.PackString(TrxWAP, 1)
            st &= Pack.PackString(TrxDeb, 1)
            st &= Pack.PackString(TrxCrd, 1)
            st &= Pack.PackString(TrxXfrInb, 1)
            st &= Pack.PackString(TrxXfrOut, 1)
            st &= Pack.PackString(Rsv35, 11)
            Return st
        End Function
        Public Sub ReadTable(ByRef DataStream As String)
            TrxFlg = Pack.Strip(DataStream, 1)
            TrxCcy = Pack.Strip(DataStream, 3)
            TrxAmt = Pack.Strip(DataStream, 10)
            TrxAtm = Pack.Strip(DataStream, 1)
            TrxCor = Pack.Strip(DataStream, 1)
            TrxSMS = Pack.Strip(DataStream, 1)
            TrxIBK = Pack.Strip(DataStream, 1)
            TrxIVR = Pack.Strip(DataStream, 1)
            TrxWAP = Pack.Strip(DataStream, 1)
            TrxDeb = Pack.Strip(DataStream, 1)
            TrxCrd = Pack.Strip(DataStream, 1)
            TrxXfrInb = Pack.Strip(DataStream, 1)
            TrxXfrOut = Pack.Strip(DataStream, 1)
            Rsv35 = Pack.Strip(DataStream, 11)
        End Sub
    End Structure

    <Serializable()> _
    Public Structure SmsUsrDat_Struct '0 Msg #123002
        Dim CusNum As String '6n				Desc:
        Dim SmsTelNum As String '25x				Desc:
        Dim SmsLng As String '2x				Desc:
        Dim SmsStp As String '14x				Desc:
        Dim SmsDlvCde As String '3x				Desc:
        Dim SmsDlvExp As String '3x				Desc:
        Dim SmsDlvBeg As String '8x				Desc:
        Dim SmsDlvTyp As String '1x				Desc:
        Dim SmsMsgCls As String '1x				Desc:
        Dim SmsDlvReg As String '1x				Desc:
        Dim SmsChrSet As String '1x				Desc:
        Dim SmsDlvPri As String '1x				Desc:
        Dim SmsRsv01 As String '58x				Desc:
        'SmsItm 
        Dim SmsSze As String '4n				Desc:
        Dim SmsTxt As String 'Varies			Desc:

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackNString(CusNum, 6)
            st &= Pack.PackString(SmsTelNum, 25)
            st &= Pack.PackString(SmsLng, 2)
            st &= Pack.PackString(SmsStp, 14)
            st &= Pack.PackString(SmsDlvCde, 3)
            st &= Pack.PackString(SmsDlvExp, 3)
            st &= Pack.PackString(SmsDlvBeg, 8)
            st &= Pack.PackString(SmsDlvTyp, 1)
            st &= Pack.PackString(SmsMsgCls, 1)
            st &= Pack.PackString(SmsDlvReg, 1)
            st &= Pack.PackString(SmsChrSet, 1)
            st &= Pack.PackString(SmsDlvPri, 1)
            st &= Pack.PackString(SmsRsv01, 58)
            st &= Pack.PackNString(SmsSze, 4)
            st &= Pack.PackString(SmsTxt, CInt(SmsSze))
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            CusNum = Pack.Strip(DataStream, 6)
            SmsTelNum = Pack.Strip(DataStream, 25)
            SmsLng = Pack.Strip(DataStream, 2)
            SmsStp = Pack.Strip(DataStream, 14)
            SmsDlvCde = Pack.Strip(DataStream, 3)
            SmsDlvExp = Pack.Strip(DataStream, 3)
            SmsDlvBeg = Pack.Strip(DataStream, 8)
            SmsDlvTyp = Pack.Strip(DataStream, 1)
            SmsMsgCls = Pack.Strip(DataStream, 1)
            SmsDlvReg = Pack.Strip(DataStream, 1)
            SmsChrSet = Pack.Strip(DataStream, 1)
            SmsDlvPri = Pack.Strip(DataStream, 1)
            SmsRsv01 = Pack.Strip(DataStream, 58)
            SmsSze = Pack.Strip(DataStream, 4)
            SmsTxt = Pack.Strip(DataStream, 1600)
        End Sub
    End Structure

    <Serializable()> _
    Public Structure SmpUsrDat_Struct '0 Msg #123005
        Dim CusNum As String '6n				Desc:Retail customer number or space filled if anonymous
        Dim SmpEmlAdd As String '50x				Desc:E-mail address
        Dim SmpLng As String '2x				Desc:Language code (AR=Arabic, EN=English)
        Dim SmpStp As String '14x				Desc:Date and time generated "YYYYMMDDhhmmss"
        Dim SmpMsgCls As String '1x				Desc:Message class: 1 = chargeable class messages, 0 = not chargeable class 
        Dim SmpRsv07 As String '55x				Desc:Reserved for future use, space filled
        Dim SmpMsgSub As String '60x			Desc:Message subject (space filled at appropriate end)
        'SmpItm                                 Desc:SMTP message item
        Dim SmpSze As String '4n				Desc:o
        Dim SmpTxt As String '0x				Desc:o

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackNString(CusNum, 6)
            st &= Pack.PackString(SmpEmlAdd, 50)
            st &= Pack.PackString(SmpLng, 2)
            st &= Pack.PackString(SmpStp, 14)
            st &= Pack.PackString(SmpMsgCls, 1)
            st &= Pack.PackString(SmpRsv07, 55)
            st &= Pack.PackString(SmpMsgSub, 60)
            st &= Pack.PackNString(SmpSze, 4)
            st &= Pack.PackString(SmpTxt, CInt(SmpSze))
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            CusNum = Pack.Strip(DataStream, 6)
            SmpEmlAdd = Pack.Strip(DataStream, 50)
            SmpLng = Pack.Strip(DataStream, 2)
            SmpStp = Pack.Strip(DataStream, 14)
            SmpMsgCls = Pack.Strip(DataStream, 1)
            SmpRsv07 = Pack.Strip(DataStream, 55)
            SmpMsgSub = Pack.Strip(DataStream, 60)
            SmpSze = Pack.Strip(DataStream, 4)
            SmpTxt = Pack.Strip(DataStream, 2000)
        End Sub
    End Structure

    <Serializable()> _
    Public Structure M615051_CMRCombo_Struct '1052
        Dim CusNum As String '6x
        Dim EqnCmpCde As String '1x
        Dim ReqComCon As String '1x
        Dim UpdComMob As String '1x
        Dim UpdComEml As String '1x
        Dim Rsv01 As String '6x
        Dim CidRowVer As String '12n
        Dim ConRowVer As String '12n
        Dim BasRowVer As String '12n
        Dim ComConDat As ComConDat_Struct '1000

        Public Function PackTable() As String
            Dim st As String
            st = Pack.PackString(CusNum, 6)
            st &= Pack.PackString(EqnCmpCde, 1)
            st &= Pack.PackString(ReqComCon, 1)
            st &= Pack.PackString(UpdComMob, 1)
            st &= Pack.PackString(UpdComEml, 1)
            st &= Pack.PackString(Rsv01, 6)
            st &= Pack.PackNString(CidRowVer, 12)
            st &= Pack.PackNString(ConRowVer, 12)
            st &= Pack.PackNString(BasRowVer, 12)
            st &= ComConDat.PackTable()
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            CusNum = Pack.Strip(DataStream, 6)
            EqnCmpCde = Pack.Strip(DataStream, 1)
            ReqComCon = Pack.Strip(DataStream, 1)
            UpdComMob = Pack.Strip(DataStream, 1)
            UpdComEml = Pack.Strip(DataStream, 1)
            Rsv01 = Pack.Strip(DataStream, 6)
            CidRowVer = Pack.Strip(DataStream, 12)
            ConRowVer = Pack.Strip(DataStream, 12)
            BasRowVer = Pack.Strip(DataStream, 12)
            ComConDat.ReadTable(DataStream)
        End Sub
    End Structure

    <Serializable()> _
    Public Structure M708011_GetSMSBanking_Struct '1154 Msg #708011
        Dim EchCusNum As String '6n				    Desc:Retail customer number (mobile user number) or spaces
        Dim EchTelNum As String '25x				Desc:Mobile telephone number or spaces
        Dim EchComCon As String '1x				Desc:Set to "Y" to have common contact data returned.
        Dim Rsv01 As String '12x				Desc:Reserved, space filled
        Dim TabRowVer As String '12n				Desc:Host table row version number
        Dim CusNum As String '6n				Desc:Retail customer number (mobile user number)
        Dim SmsTelNum As String '25x				Desc:Mobile telephone number
        Dim SmsLng As String '2x				Desc:Language code (AR=Arabic, EN=English)
        Dim SmsAccNum As String '13x				Desc:Default account number
        Dim SmsRegAct As String '1x				Desc:Flag (R/D) indicating status (Registered/Deregistered)
        Dim SmsPatDat As String '6x				Desc:Usage pattern (see ChnPatDat structure)
        Dim Rsv02 As String '15x				Desc:Reserved, space filled
        Dim UsrStpDat As String '30x				Desc:User date and time stamp
        Dim ComConDat As ComConDat_Struct '1000

        Public Function PackTable() As String
            Dim st As String
            st = Pack.PackNString(EchCusNum, 6)
            st &= Pack.PackString(EchTelNum, 25)
            st &= Pack.PackString(EchComCon, 1)
            st &= Pack.PackString(Rsv01, 12)
            st &= Pack.PackNString(TabRowVer, 12)
            st &= Pack.PackNString(CusNum, 6)
            st &= Pack.PackString(SmsTelNum, 25)
            st &= Pack.PackString(SmsLng, 2)
            st &= Pack.PackString(SmsAccNum, 13)
            st &= Pack.PackString(SmsRegAct, 1)
            st &= Pack.PackString(SmsPatDat, 6)
            st &= Pack.PackString(Rsv02, 15)
            st &= Pack.PackString(UsrStpDat, 30)
            st &= ComConDat.PackTable()
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            EchCusNum = Pack.Strip(DataStream, 6)
            EchTelNum = Pack.Strip(DataStream, 25)
            EchComCon = Pack.Strip(DataStream, 1)
            Rsv01 = Pack.Strip(DataStream, 12)
            TabRowVer = Pack.Strip(DataStream, 12)
            CusNum = Pack.Strip(DataStream, 6)
            SmsTelNum = Pack.Strip(DataStream, 25)
            SmsLng = Pack.Strip(DataStream, 2)
            SmsAccNum = Pack.Strip(DataStream, 13)
            SmsRegAct = Pack.Strip(DataStream, 1)
            SmsPatDat = Pack.Strip(DataStream, 6)
            Rsv02 = Pack.Strip(DataStream, 15)
            UsrStpDat = Pack.Strip(DataStream, 30)
            ComConDat.ReadTable(DataStream)
        End Sub
    End Structure

    <Serializable()> _
    Public Structure M708020_ModifySMSBanking_Struct '1080 Msg #708020
        Dim ReqComCon As String '1x				Desc:Set to "Y" to have indicate common contact data present
        Dim UpdComDat As String '1x				Desc:Set to "Y" to have common contact data updated (aligned)
        Dim TabRowVer As String '12n				Desc:Host table row version number
        Dim CusNum As String '6n				Desc:Retail customer number (mobile user number)
        Dim SmsTelNum As String '25x				Desc:Mobile telephone number
        Dim SmsLng As String '2x				Desc:Language code (AR=Arabic, EN=English)
        Dim SmsAccNum As String '13x				Desc:Default account number
        Dim SmsRegAct As String '1x				Desc:Flag (R/D) indicating required status (Register/Deregister)
        Dim SmsPatDat As String '6x				Desc:Required registration pattern (see ChnPatDat structure)
        Dim Rsv01 As String '13x				Desc:Reserved, space filled
        Dim ComConDat As ComConDat_Struct '1000

        Public Function PackTable() As String
            Dim st As String
            st = Pack.PackString(ReqComCon, 1)
            st &= Pack.PackString(UpdComDat, 1)
            st &= Pack.PackNString(TabRowVer, 12)
            st &= Pack.PackNString(CusNum, 6)
            st &= Pack.PackString(SmsTelNum, 25)
            st &= Pack.PackString(SmsLng, 2)
            st &= Pack.PackString(SmsAccNum, 13)
            st &= Pack.PackString(SmsRegAct, 1)
            st &= Pack.PackString(SmsPatDat, 6)
            st &= Pack.PackString(Rsv01, 13)
            st &= ComConDat.PackTable()
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            ReqComCon = Pack.Strip(DataStream, 1)
            UpdComDat = Pack.Strip(DataStream, 1)
            TabRowVer = Pack.Strip(DataStream, 12)
            CusNum = Pack.Strip(DataStream, 6)
            SmsTelNum = Pack.Strip(DataStream, 25)
            SmsLng = Pack.Strip(DataStream, 2)
            SmsAccNum = Pack.Strip(DataStream, 13)
            SmsRegAct = Pack.Strip(DataStream, 1)
            SmsPatDat = Pack.Strip(DataStream, 6)
            Rsv01 = Pack.Strip(DataStream, 13)
            ComConDat.ReadTable(DataStream)
        End Sub
    End Structure

    <Serializable()> _
    Public Structure M708021_ModifySMSBanking_Struct '1032 Msg #708021
        Dim ReqComCon As String '1x				Desc:Set to "Y" to have indicate common contact data present
        Dim UpdComDat As String '1x				Desc:Set to "Y" to have common contact data updated (aligned)
        Dim TabRowVer As String '12n				Desc:Host table row version number (of updated table row)
        Dim Rsv01 As String '18x				Desc:Reserved, space filled
        Dim ComConDat As ComConDat_Struct '1000

        Public Function PackTable() As String
            Dim st As String
            st = Pack.PackString(ReqComCon, 1)
            st &= Pack.PackString(UpdComDat, 1)
            st &= Pack.PackNString(TabRowVer, 12)
            st &= Pack.PackString(Rsv01, 18)
            st &= ComConDat.PackTable()
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            ReqComCon = Pack.Strip(DataStream, 1)
            UpdComDat = Pack.Strip(DataStream, 1)
            TabRowVer = Pack.Strip(DataStream, 12)
            Rsv01 = Pack.Strip(DataStream, 18)
            ComConDat.ReadTable(DataStream)
        End Sub
    End Structure

    <Serializable()> _
    Public Structure M708031_AlertServices_Struct '0 Msg #708031
        Dim EchCusNum As String '6n				Desc:Retail customer number (mobile user number) or spaces
        Dim EchTelNum As String '25x				Desc:Mobile telephone number or spaces
        Dim EchComCon As String '1x				Desc:Set to "Y" to have common contact data returned.
        Dim Rsv01 As String '12x				Desc:Reserved, space filled
        Dim TabRowVer As String '12n				Desc:Host table row version number
        Dim CusNum As String '6n				Desc:Retail customer number (mobile user number)
        Dim AltTelNum As String '25x				Desc:Mobile phone number (or spaces)
        Dim AltMobFlg As String '1x				Desc:Flag (Y/N) alerts to be sent to the mobile
        Dim AltEmlAdd As String '50x				Desc:E-mail address (or spaces)
        Dim AltEmlFlg As String '1x				Desc:Flag (Y/N) alerts to be sent to the e-mail address
        Dim AltPatDat As String '6x				Desc:Usage pattern (see ChnPatDat structure)
        Dim AltLngFlg As String '2x				Desc:Language code (AR=Arabic, EN=English)
        Dim AltRegFlg As String '1x				Desc:Flag (Y/N) indicating whether registered
        Dim Rsv02 As String '20x				Desc:Reserved, space filled
        Dim UsrStpDat As String '30x				Desc:User date and time stamp
        Dim ComConDat As ComConDat_Struct '1000

        Public Function PackTable() As String
            Dim st As String
            st = Pack.PackNString(EchCusNum, 6)
            st &= Pack.PackString(EchTelNum, 25)
            st &= Pack.PackString(EchComCon, 1)
            st &= Pack.PackString(Rsv01, 12)
            st &= Pack.PackNString(TabRowVer, 12)
            st &= Pack.PackNString(CusNum, 6)
            st &= Pack.PackString(AltTelNum, 25)
            st &= Pack.PackString(AltMobFlg, 1)
            st &= Pack.PackString(AltEmlAdd, 50)
            st &= Pack.PackString(AltEmlFlg, 1)
            st &= Pack.PackString(AltPatDat, 6)
            st &= Pack.PackString(AltLngFlg, 2)
            st &= Pack.PackString(AltRegFlg, 1)
            st &= Pack.PackString(Rsv02, 20)
            st &= Pack.PackString(UsrStpDat, 30)
            st &= ComConDat.PackTable()
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            EchCusNum = Pack.Strip(DataStream, 6)
            EchTelNum = Pack.Strip(DataStream, 25)
            EchComCon = Pack.Strip(DataStream, 1)
            Rsv01 = Pack.Strip(DataStream, 12)
            TabRowVer = Pack.Strip(DataStream, 12)
            CusNum = Pack.Strip(DataStream, 6)
            AltTelNum = Pack.Strip(DataStream, 25)
            AltMobFlg = Pack.Strip(DataStream, 1)
            AltEmlAdd = Pack.Strip(DataStream, 50)
            AltEmlFlg = Pack.Strip(DataStream, 1)
            AltPatDat = Pack.Strip(DataStream, 6)
            AltLngFlg = Pack.Strip(DataStream, 2)
            AltRegFlg = Pack.Strip(DataStream, 1)
            Rsv02 = Pack.Strip(DataStream, 20)
            UsrStpDat = Pack.Strip(DataStream, 30)
            ComConDat.ReadTable(DataStream)
        End Sub
    End Structure

    <Serializable()> _
    Public Structure M708040_AlertServices_Struct '0 Msg #708040
        Dim ReqComCon As String '1x				Desc:Set to "Y" to have indicate common contact data present
        Dim UpdComMob As String '1x				Desc:Set to "Y" to have common Mobile contact data updated (aligned)
        Dim UpdComEml As String '1x				Desc:Set to "Y" to have common E-mail contact data updated (aligned)
        Dim Rsv01 As String '11x				Desc:Reserved, space filled
        Dim TabRowVer As String '12n				Desc:Host table row version number
        Dim CusNum As String '6n				Desc:Retail customer number (mobile user number)
        Dim AltTelNum As String '25x				Desc:Mobile phone number (or spaces)
        Dim AltMobFlg As String '1x				Desc:Flag (Y/N) alerts to be sent to the mobile
        Dim AltEmlAdd As String '50x				Desc:E-mail address (or spaces)
        Dim AltEmlFlg As String '1x				Desc:Flag (Y/N) alerts to be sent to the e-mail address
        Dim AltPatDat As String '6x				Desc:Required registration pattern (see ChnPatDat structure)
        Dim AltLngFlg As String '2x				Desc:Language code (AR=Arabic, EN=English)
        Dim AltRegFlg As String '1x				Desc:Flag (Y/N) indicating whether registered
        Dim Rsv02 As String '48x				Desc:Reserved, space filled
        Dim ComConDat As ComConDat_Struct '1000

        Public Function PackTable() As String
            Dim st As String
            st = Pack.PackString(ReqComCon, 1)
            st &= Pack.PackString(UpdComMob, 1)
            st &= Pack.PackString(UpdComEml, 1)
            st &= Pack.PackString(Rsv01, 11)
            st &= Pack.PackNString(TabRowVer, 12)
            st &= Pack.PackNString(CusNum, 6)
            st &= Pack.PackString(AltTelNum, 25)
            st &= Pack.PackString(AltMobFlg, 1)
            st &= Pack.PackString(AltEmlAdd, 50)
            st &= Pack.PackString(AltEmlFlg, 1)
            st &= Pack.PackString(AltPatDat, 6)
            st &= Pack.PackString(AltLngFlg, 2)
            st &= Pack.PackString(AltRegFlg, 1)
            st &= Pack.PackString(Rsv02, 48)
            st &= ComConDat.PackTable()
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            ReqComCon = Pack.Strip(DataStream, 1)
            UpdComMob = Pack.Strip(DataStream, 1)
            UpdComEml = Pack.Strip(DataStream, 1)
            Rsv01 = Pack.Strip(DataStream, 11)
            TabRowVer = Pack.Strip(DataStream, 12)
            CusNum = Pack.Strip(DataStream, 6)
            AltTelNum = Pack.Strip(DataStream, 25)
            AltMobFlg = Pack.Strip(DataStream, 1)
            AltEmlAdd = Pack.Strip(DataStream, 50)
            AltEmlFlg = Pack.Strip(DataStream, 1)
            AltPatDat = Pack.Strip(DataStream, 6)
            AltLngFlg = Pack.Strip(DataStream, 2)
            AltRegFlg = Pack.Strip(DataStream, 1)
            Rsv02 = Pack.Strip(DataStream, 48)
            ComConDat.ReadTable(DataStream)
        End Sub
    End Structure

    <Serializable()> _
    Public Structure M708041_AlertServices_Struct '1166 Msg #708041
        Dim ReqComCon As String '1x				Desc:Set to "Y" to have indicate common contact data present
        Dim UpdComMob As String '1x				Desc:Set to "Y" to have common contact data updated (aligned)
        Dim UpdComEml As String '1x				Desc:Set to "Y" to have common E-mail contact data updated (aligned)
        Dim Rsv01 As String '11x				Desc:Reserved, space filled
        Dim TabRowVer As String '12n				Desc:Host table row version number (of updated table row)
        Dim Rsv03 As String '18x				Desc:Reserved, space filled
        Dim ComConDat As ComConDat_Struct '1000

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(ReqComCon, 1)
            st &= Pack.PackString(UpdComMob, 1)
            st &= Pack.PackString(UpdComEml, 1)
            st &= Pack.PackString(Rsv01, 11)
            st &= Pack.PackNString(TabRowVer, 12)
            st &= Pack.PackString(Rsv03, 18)
            st &= ComConDat.PackTable()
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            ReqComCon = Pack.Strip(DataStream, 1)
            UpdComMob = Pack.Strip(DataStream, 1)
            UpdComEml = Pack.Strip(DataStream, 1)
            Rsv01 = Pack.Strip(DataStream, 11)
            TabRowVer = Pack.Strip(DataStream, 12)
            Rsv03 = Pack.Strip(DataStream, 18)
            ComConDat.ReadTable(DataStream)
        End Sub
    End Structure

    <Serializable()> _
    Public Structure M708051_GetAlertServicePreferences_Struct '0 Msg #708051
        Dim AltRowVer As String '12n				Desc:Main host table row version number (of updated table row)
        Dim CusNum As String '6n				Desc:Retail customer number (mobile user number) or spaces
        Dim AltAccAll As String '1x				Desc:Flag (Y/N) indicating whether all accounts are requied.
        Dim AltDlyBal As AltBalDat_Struct '14x				Desc:Daily balance reporting (refer to table structure)
        Dim AltTrxAct As AltTrxAct_Struct '35x				Desc:Transaction activity reporting (refer to table structure)
        Dim AltActStp As String '14x				Desc:Date/time of last alert activity (YYYYMMDDhhmmss)
        Dim UsrStpDat As String '30x				Desc:Main host user date/time stamp (see structure)
        Dim Rsv01 As String '26x				Desc:Reserved, space filled
        Dim AccItmCnt As String '2n				Desc:Number of account items that follow [j], maximum 20.
        Dim AccItm() As M708052_GetAlertServicePreferencesAccItm_Struct '30

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackNString(AltRowVer, 12)
            st &= Pack.PackNString(CusNum, 6)
            st &= Pack.PackString(AltAccAll, 1)
            st &= AltDlyBal.PackTable
            st &= AltTrxAct.PackTable
            st &= Pack.PackString(AltActStp, 14)
            st &= Pack.PackString(UsrStpDat, 30)
            st &= Pack.PackString(Rsv01, 26)
            st &= Pack.PackNString(AccItmCnt, 2)

            Dim count As Integer
            count = CType(AccItmCnt, Integer)
            If count <= 0 Then
                Erase AccItm
            Else
                ReDim AccItm(count - 1)
                For i As Integer = 0 To AccItm.Length - 1
                    st &= AccItm(i).PackTable()
                Next
            End If

            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            AltRowVer = Pack.Strip(DataStream, 12)
            CusNum = Pack.Strip(DataStream, 6)
            AltAccAll = Pack.Strip(DataStream, 1)
            AltDlyBal.ReadTable(DataStream)
            AltTrxAct.ReadTable(DataStream)
            AltActStp = Pack.Strip(DataStream, 14)
            UsrStpDat = Pack.Strip(DataStream, 30)
            Rsv01 = Pack.Strip(DataStream, 26)
            AccItmCnt = Pack.Strip(DataStream, 2)

            Dim count As Integer
            count = CType(AccItmCnt, Integer)
            If count <= 0 Then
                Erase AccItm
            Else
                ReDim AccItm(count - 1)
                For i As Integer = 0 To AccItm.Length - 1
                    AccItm(i).ReadTable(DataStream)
                Next
            End If

        End Sub
    End Structure

    <Serializable()> _
    Public Structure M708052_GetAlertServicePreferencesAccItm_Struct '0 Msg #708052
        Dim TabRowVer As String '12n				Desc:Alert account table entry
        Dim AccNum As String '13n				Desc:Account number
        Dim Rsv02 As String '5x				Desc:Reserved, space filled

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackNString(TabRowVer, 12)
            st &= Pack.PackNString(AccNum, 13)
            st &= Pack.PackString(Rsv02, 5)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            TabRowVer = Pack.Strip(DataStream, 12)
            AccNum = Pack.Strip(DataStream, 13)
            Rsv02 = Pack.Strip(DataStream, 5)
        End Sub
    End Structure

    <Serializable()> _
    Public Structure M708060_ModifyAlertServicePreferences_Struct '0 Msg #708060
        Dim TabRowVer As String '12n				Desc:Host table row version number
        Dim CusNum As String '6n				Desc:Retail customer number (mobile user number) or spaces
        Dim AltAccAll As String '1x				Desc:Flag (Y/N) indicating whether all accounts are requied.
        Dim AltDlyBal As AltBalDat_Struct '14x				Desc:Daily balance reporting (refer to table structure)
        Dim AltTrxAct As AltTrxAct_Struct '35x				Desc:Transaction activity reporting (refer to table structure)
        Dim AltActStp As String '14x				Desc:Date/time of last alert activity (YYYYMMDDhhmmss)
        Dim UsrStpDat As String '30x				Desc:Main host user date/time stamp (see structure)
        Dim Rsv01 As String '26x				Desc:Reserved, space filled
        Dim AccItmCnt As String '2n				Desc:Number of account items that follow [j], maximum 20.
        Dim AccItm() As M708052_GetAlertServicePreferencesAccItm_Struct '0

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackNString(TabRowVer, 12)
            st &= Pack.PackNString(CusNum, 6)
            st &= Pack.PackString(AltAccAll, 1)
            st &= AltDlyBal.PackTable
            st &= AltTrxAct.PackTable
            st &= Pack.PackString(AltActStp, 14)
            st &= Pack.PackString(UsrStpDat, 30)
            st &= Pack.PackString(Rsv01, 26)
            st &= Pack.PackNString(AccItmCnt, 2)

            Dim count As Integer
            count = CType(AccItmCnt, Integer)
            If count > 0 Then
                For i As Integer = 0 To AccItm.Length - 1
                    st &= AccItm(i).PackTable()
                Next
            End If

            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            TabRowVer = Pack.Strip(DataStream, 12)
            CusNum = Pack.Strip(DataStream, 6)
            AltAccAll = Pack.Strip(DataStream, 1)
            AltDlyBal.ReadTable(DataStream)
            AltTrxAct.ReadTable(DataStream)
            AltActStp = Pack.Strip(DataStream, 14)
            UsrStpDat = Pack.Strip(DataStream, 30)
            Rsv01 = Pack.Strip(DataStream, 26)
            AccItmCnt = Pack.Strip(DataStream, 2)

            Dim count As Integer
            count = CType(AccItmCnt, Integer)
            If count <= 0 Then
                Erase AccItm
            Else
                ReDim AccItm(count - 1)
                For i As Integer = 0 To AccItm.Length - 1
                    AccItm(i).ReadTable(DataStream)
                Next
            End If

        End Sub
    End Structure

    <Serializable()> _
    Public Structure M708070_TestMessages_Struct '41
        Dim TgtTyp As String '3x
        Dim TgtKey As String '50x
        Dim AltDlvCde As String  '3x
        Dim AltDlvExp As String  '3x
        Dim RndNum As String  '5n
        Dim UsrStpDat As String  '30x
    End Structure

    <Serializable()> _
    Public Structure M708300_SendTestMessage_Struct '0 Msg #123001
        Dim CusNum As String '6n				Desc:Retail customer number (in 708300) or spaces
        Dim SndMob As String '1x				Desc:Flag (Y/N) indicating whether to send (in 708300).
        Dim SndEml As String '1x				Desc:Flag (Y/N) indicating whether to send (in 708300).
        Dim MobTel As String '25x				Desc:Mobile phone number (in 708400) or spaces
        Dim EmlAdd As String '50x				Desc:E-mail address (in 708400) or spaces
        Dim SmsBlkMrk As String '5x				Desc:Constant "<ALT>"
        Dim SmsBlkTyp As String '3x				Desc:Constant "<M>" = marketing message, "<P>" = personal message as String 
        Dim Rsv01 As String '23x				Desc:Reserved, space filled

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(CusNum, 6)
            st &= Pack.PackString(SndMob, 1)
            st &= Pack.PackString(SndEml, 1)
            st &= Pack.PackString(MobTel, 25)
            st &= Pack.PackString(EmlAdd, 50)
            st &= Pack.PackString(SmsBlkMrk, 5)
            st &= Pack.PackString(SmsBlkTyp, 3)
            st &= Pack.PackString(Rsv01, 23)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            CusNum = Pack.Strip(DataStream, 6)
            SndMob = Pack.Strip(DataStream, 1)
            SndEml = Pack.Strip(DataStream, 1)
            MobTel = Pack.Strip(DataStream, 25)
            EmlAdd = Pack.Strip(DataStream, 50)
            SmsBlkMrk = Pack.Strip(DataStream, 5)
            SmsBlkTyp = Pack.Strip(DataStream, 3)
            Rsv01 = Pack.Strip(DataStream, 23)
        End Sub
    End Structure

    <Serializable()> _
    Public Structure M708310_SendMessage_Struct '0 Msg #123003
        Dim CusNum As String '6n				Desc:Retail customer number (in 708310) or spaces
        Dim SndMob As String '1x				Desc:Flag (Y/N) indicating whether to send (in 708310).
        Dim SndEml As String '1x				Desc:Flag (Y/N) indicating whether to send (in 708310).
        Dim MobTel As String '25x				Desc:Mobile phone number structure (in 708410) or spaces
        Dim EmlAdd As String '50x	            Desc:E-mail address (in 708410) or spaces
        Dim Rsv01 As String '23x				Desc:Reserved, space filled
        Dim SmsBlkMrk As String '5x				Desc:Constant "<ALT>"
        Dim SmsBlkTyp As String '3x				Desc:Constant "<M>" = marketing message
        Dim SmsUsrDat As SmsUsrDat_Struct 'v    Desc:SMS user data (refer to structure)
        Dim SmpUsrDat As SmpUsrDat_Struct 'v    Desc:SMS user data (refer to structure)

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackNString(CusNum, 6)
            st &= Pack.PackString(SndMob, 1)
            st &= Pack.PackString(SndEml, 1)
            st &= Pack.PackString(MobTel, 25)
            st &= Pack.PackString(EmlAdd, 50)
            st &= Pack.PackString(Rsv01, 23)
            st &= Pack.PackString(SmsBlkMrk, 5)
            st &= Pack.PackString(SmsBlkTyp, 3)
            st &= SmsUsrDat.PackTable
            st &= SmpUsrDat.PackTable
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            CusNum = Pack.Strip(DataStream, 6)
            SndMob = Pack.Strip(DataStream, 1)
            SndEml = Pack.Strip(DataStream, 1)
            MobTel = Pack.Strip(DataStream, 25)
            EmlAdd = Pack.Strip(DataStream, 50)
            Rsv01 = Pack.Strip(DataStream, 23)
            SmsBlkMrk = Pack.Strip(DataStream, 5)
            SmsBlkTyp = Pack.Strip(DataStream, 3)
            SmsUsrDat.ReadTable(DataStream)
            SmpUsrDat.ReadTable(DataStream)
        End Sub
    End Structure

    Public Structure IceCfgData_Struct

        Dim AntLimHi As String '3n	System-wide ANTS high limit: Score >= is a hit (000 to 100).	
        Dim AntLimLo As String '3n	System-wide ANTS low limit: Score < is not a hit (000 to 100)	
        Dim Rsv2 As String '17x	Reserved, space filled	
        Dim ChnMlrTyp As String '3x	Channel mailer type. Spaces = current type		"LAS" = laser mailer
        Dim FupSzeMax As String '4n2x	CIB: File upload maximum size	
        Dim FupSzeMin As String '4n2x	CIB: File upload minimum size	
        Dim InsMaxPndAge As String '2x	CIB: Days instruction may wait pending final approva	
        Dim InsMaxRelAge As String '2x	CIB: Days instruction may wait pending release	
        Dim InsMaxFwdDay As String '2x	CIB: Maximum days forward value	
        Dim SetPyrCrpLim As String '1x	CIB: Flag (Y/N) corporate limit may be set as ignored	
        Dim Rsv21 As String '1x	Reserved, space filled	
        Dim DwnMaxDlyDay As String '3x	CIB: maximum calendar days a download may remain pending	
        Dim DwnMaxAckDay As String '3x	CIB: Maximum calendar days a download may remain accepted	
        Dim PrePyrMaxEmp As String '4x	CIB: Maximum employees in a prepared payroll	
        Dim TakOvrIdlMin As String '4x	CIB: Take over token minimum idle time	
        Dim TakOvrDlyMin As String '4x	CIB: Take over token maximum delay for request	
        Dim Rsv22 As String '2x	Reserved, space filled	
        Dim SibMaxFwdDay As String '2x	CIB: Maximum days forward value SAIB transfer	
        Dim SarMaxFwdDay As String '2x	CIB: Maximum days forward value Sarie transfer	
        Dim SwfMaxFwdDay As String '2x	CIB: Maximum days forward value SWIFT transfer	
        Dim LoaBadGuyChk As String '1x	Loans: Flag (Y/N) if C-list to be checked	
        Dim LoaBadGuyRej As String '1x	Loans: Flag (Y/N) if C-list hit to reject application	
        Dim LoaBlkLstChk As String '1x	Loans: Flag (Y/N) if black list to be checked	
        Dim LoaBlkLstRej As String '1x	Loans: Flag (Y/N) if black list hit to reject application	
        Dim SetPyrCcyCde As String '80x	CIB: Currency codes t allowed in payroll definitions	
        Dim LoaEmpMaxRet As String '4x	Loans: Maximum employers that may be enumerated.	

        Dim CusNumRnk As String '1n	Number of retail customer classification levels (ranks)	
        Dim CusNamRnk() As String '6*10x	Name to be given to the rank	
        Dim CusRgbRnk() As String '6*6x	RGB colour value for the rank (3 sets of 3 digits)	
        Dim CusBalRnk() As String '5*5n	Balance (in SAR 1,000’s) below which this rank applies	
        Dim CusIncRnk() As String '5*5n	Income (in SAR 1000’s) below which this ranl applies	
        Dim CusUpgDay As String '3n	Number of days stickiness before upgrading rank	
        Dim CusDwnDay As String '3n	Number of days stickiness before downgrading rank	
        Dim CusMinRnkDay As String '3n	Minimum number of days before allocating a rank	
        Dim CusMaxRnkDay As String '3n	Maximum number of days to cater for in calculating a rank	
        Dim CmrRevDayMax As String '3n	Maximum business days allowed between payment and reversal	
        Dim CmrCanDayMax As String '3n	Maximumbusiness days allowed between payment and cancel	
        Dim CmrIceSeeDer As String '5n	Seed information for the asymmetric algorithm
        Dim TxtRgbRnk() As String  '6*6x	RGB colour value for the rank (3 sets of 2 digits) foreground
        Dim DataBlock As String '226x of parameters
        Dim LndAraFmt As String '1x	Landline area code format control flag 
        Dim Rsv3 As String

        Public Sub ReadTable(ByRef DataStream As String)
            Dim i As Integer
            Dim temp As String

            AntLimHi = Pack.Strip(DataStream, 3)
            AntLimLo = Pack.Strip(DataStream, 3)
            Rsv2 = Pack.Strip(DataStream, 17)
            ChnMlrTyp = Pack.Strip(DataStream, 3)
            FupSzeMax = Pack.Strip(DataStream, 6)
            FupSzeMin = Pack.Strip(DataStream, 6)
            InsMaxPndAge = Pack.Strip(DataStream, 2)
            InsMaxRelAge = Pack.Strip(DataStream, 2)
            InsMaxFwdDay = Pack.Strip(DataStream, 2)

            SetPyrCrpLim = Pack.Strip(DataStream, 1)
            Rsv21 = Pack.Strip(DataStream, 1)
            DwnMaxDlyDay = Pack.Strip(DataStream, 3)

            DwnMaxAckDay = Pack.Strip(DataStream, 3)
            PrePyrMaxEmp = Pack.Strip(DataStream, 4)
            TakOvrIdlMin = Pack.Strip(DataStream, 4)

            TakOvrDlyMin = Pack.Strip(DataStream, 4)
            Rsv22 = Pack.Strip(DataStream, 2)
            SibMaxFwdDay = Pack.Strip(DataStream, 2)

            SarMaxFwdDay = Pack.Strip(DataStream, 2)
            SwfMaxFwdDay = Pack.Strip(DataStream, 2)
            LoaBadGuyChk = Pack.Strip(DataStream, 1)

            '
            LoaBadGuyRej = Pack.Strip(DataStream, 1)
            LoaBlkLstChk = Pack.Strip(DataStream, 1)
            LoaBlkLstRej = Pack.Strip(DataStream, 1)

            SetPyrCcyCde = Pack.Strip(DataStream, 80)
            LoaEmpMaxRet = Pack.Strip(DataStream, 4)
            CusNumRnk = Pack.Strip(DataStream, 1)
            ' Fill CusNamRnk array
            ReDim CusNamRnk(6)
            temp = Pack.Strip(DataStream, 60)
            CusNamRnk(0) = ""
            For i = 1 To 6
                CusNamRnk(i) = Pack.Strip(temp, 10).Trim
            Next
            ' Fill CusRgbRnk array
            ReDim CusRgbRnk(6)
            CusRgbRnk(0) = ""
            temp = Pack.Strip(DataStream, 36)
            For i = 1 To 6
                CusRgbRnk(i) = Pack.Strip(temp, 6)
            Next
            ' Fill CusBalRnk array
            ReDim CusBalRnk(4)
            temp = Pack.Strip(DataStream, 25)
            For i = 0 To 4
                CusBalRnk(i) = Pack.Strip(temp, 5)
            Next
            ' Fill CusBalRnk array
            ReDim CusIncRnk(4)
            temp = Pack.Strip(DataStream, 25)
            For i = 0 To 4
                CusIncRnk(i) = Pack.Strip(temp, 5)
            Next
            CusUpgDay = Pack.Strip(DataStream, 3)
            CusDwnDay = Pack.Strip(DataStream, 3)
            CusMinRnkDay = Pack.Strip(DataStream, 3)
            CusMaxRnkDay = Pack.Strip(DataStream, 3)
            CmrRevDayMax = Pack.Strip(DataStream, 3)
            CmrCanDayMax = Pack.Strip(DataStream, 3)
            CmrIceSeeDer = Pack.Strip(DataStream, 5)
            ReDim TxtRgbRnk(6)
            temp = Pack.Strip(DataStream, 36)
            TxtRgbRnk(0) = ""
            For i = 1 To 6
                TxtRgbRnk(i) = Pack.Strip(temp, 6)
            Next
            'Rsv3 = Pack.Strip(DataStream, 655)
            DataBlock = Pack.Strip(DataStream, 226)
            LndAraFmt = Pack.Strip(DataStream, 1) : If LndAraFmt = " " Then LndAraFmt = "B"
            Rsv3 = Pack.Strip(DataStream, 427)
            Pack.Strip(DataStream, 1)

            TELI0100.Phone.SetCompatibilityMode(CChar(LndAraFmt))

        End Sub
    End Structure

#End Region

#Region "test"

    '708010
    'SendMessage_GetSMSBankingServiceEnrolmentData
    'GetMessage_GetSMSBankingServiceEnrolmentData

    '708020
    'SendMessage_ModifySMSBankingServiceEnrolmentData
    'GetMessage_ModifySMSBankingServiceEnrolmentData

    '708030
    'SendMessage_GetAlertServiceEnrolmentData
    'GetMessage_GetAlertServiceEnrolmentData

    '708040
    'SendMessage_ModifyAlertServiceEnrolmentData
    'GetMessage_ModifyAlertServiceEnrolmentData

    '708050  
    'SendMessage_GetAlertServicePreferences
    'GetMessage_GetAlertServicePreferences

    '708060  
    'SendMessage_ModifyAlertServicePreferences
    'GetMessage_ModifyAlertServicePreferences

#End Region

#Region "SendMessage_..."

    Public Function SendMessage_Enroll2FA(ByVal CusNum As String) As String
        Dim tmpStr As String = ""
        tmpStr &= Pack.PackString(CusNum, 6)
        tmpStr &= Pack.PackString("", 26)
        Return AppInstance.SendMessageVisuallyEx("611000", tmpStr, "CUS", CusNum, "", "")
    End Function


    Public Function SendMessage_Reset2FA(ByVal CusNum As String, ByVal AppIde As String) As String
        Dim tmpStr As String = ""
        tmpStr &= Pack.PackString(CusNum, 6)
        tmpStr &= Pack.PackString(AppIde, 12)
        tmpStr &= Pack.PackString("", 14)
        Return AppInstance.SendMessageVisuallyEx("611010", tmpStr, "CUS", CusNum, "", "")
    End Function

    'Not used
    Public Function SendMessage_ObtainContactInformation(ByVal CusNum As String, ByVal EqnCmpCde As String) As String
        Dim tmpStr As String

        tmpStr &= Pack.PackNSString(CusNum, 6)
        tmpStr &= Pack.PackString(EqnCmpCde, 1)
        tmpStr &= Pack.PackString("", 9)
        Return AppInstance.SendMessageVisuallyEx("615000", tmpStr, "CUS", CusNum, "", "")
    End Function

    Public Function SendMessage_GetCMRCombo(ByVal CusNum As String, ByVal EqnCmpCde As String, ByVal ReqComCon As String) As String
        Dim tmpStr As String

        tmpStr &= Pack.PackString(CusNum, 6)
        tmpStr &= Pack.PackString(EqnCmpCde, 1)
        tmpStr &= Pack.PackString(ReqComCon, 1)
        tmpStr &= Pack.PackString("", 8)
        Return AppInstance.SendMessageVisuallyEx("615040", tmpStr, "CUS", CusNum, "", "")
    End Function

    Public Function SendMessage_ModifyCMRCombo(ByVal bUpdComMob As String, ByVal bUpdComEml As String, ByVal p_Struct As CMRComboInformation_Struct) As String
        Dim st As String
        st = p_Struct.PackTable()
        Dim ch() As Char = st.ToCharArray
        ch(8) = CChar(Pack.PackString(bUpdComMob, 1))
        ch(9) = CChar(Pack.PackString(bUpdComEml, 1))
        st = ch
        Return AppInstance.SendMessageVisuallyEx("615050", st, "CUS", p_Struct.CusNum, "", "")
    End Function

    Public Function SendMessage_GetSMSBanking(ByVal CusNum As String, ByVal SmsTelNum As String, ByVal ReqComCon As String) As String

        Dim st As String
        st = Pack.PackNString(CusNum, 6)
        st &= Pack.PackString(SmsTelNum, 25)
        st &= Pack.PackString(ReqComCon, 1)
        st &= Pack.PackString("", 12)
        Return AppInstance.SendMessageVisuallyEx("708010", st, "CUS", CusNum, "", "")
    End Function

    Public Function SendMessage_ModifySMSBanking(ByVal p_Struct As M708020_ModifySMSBanking_Struct) As String

        Dim st As String
        st = p_Struct.PackTable()
        Return AppInstance.SendMessageVisuallyEx("708020", st, "CUS", p_Struct.CusNum, "", "")
    End Function

    Public Function SendMessage_GetAlertServices(ByVal CusNum As String, ByVal AltTelNum As String, ByVal ReqComCon As String) As String

        Dim st As String
        st = Pack.PackNString(CusNum, 6)
        st &= Pack.PackString(AltTelNum, 25)
        st &= Pack.PackString(ReqComCon, 1)
        st &= Pack.PackString(" ", 12)
        Return AppInstance.SendMessageVisuallyEx("708030", st, "CUS", CusNum, "", "")
    End Function

    Public Function SendMessage_ModifyAlertServices(ByVal p_Struct As M708040_AlertServices_Struct) As String

        Dim st As String
        st = p_Struct.PackTable()
        Return AppInstance.SendMessageVisuallyEx("708040", st, "CUS", p_Struct.CusNum, "", "")
    End Function

    Public Function SendMessage_GetAlertServicePreferences(ByVal CusNum As String, ByVal AltTelNum As String, ByVal Rsv01 As String) As String

        Dim st As String = String.Empty
        st &= Pack.PackNString(CusNum, 6)
        st &= Pack.PackString(AltTelNum, 25)
        st &= Pack.PackString(Rsv01, 13)
        Return AppInstance.SendMessageVisuallyEx("708050", st, "CUS", CusNum, "", "")
    End Function

    Public Function SendMessage_ModifyAlertServicePreferences(ByVal p_Struct As M708060_ModifyAlertServicePreferences_Struct) As String

        Dim st As String = String.Empty
        st &= p_Struct.PackTable()
        Return AppInstance.SendMessageVisuallyEx("708060", st, "CUS", p_Struct.CusNum, "", "")
    End Function

    Public Function SendMessage_GetRecentTestMessages(ByVal CusNum As String, Optional ByVal TgtTyp As String = "", Optional ByVal TgtKey As String = "") As String
        Dim st As String = String.Empty
        st &= Pack.PackString(CusNum, 6)
        st &= Pack.PackString(TgtTyp, 3)
        st &= Pack.PackString(TgtKey, 50)
        st &= Pack.PackString(" ", 5) 'rsv01
        Return AppInstance.SendMessageVisuallyEx("708070", st, "CUS", CusNum, "", "")
    End Function

    Public Function SendMessage_SendTestMessage_Cus(ByVal MsgDat As M708300_SendTestMessage_Struct) As String
        Dim st As String = MsgDat.PackTable
        Return AppInstance.SendMessageVisuallyEx("708300", st, "CUS", MsgDat.CusNum, "", "")
    End Function

    Public Function SendMessage_SendTestMessage_Gen(ByVal MsgDat As M708300_SendTestMessage_Struct) As String
        Dim st As String = MsgDat.PackTable
        Return AppInstance.SendMessageVisuallyEx("708400", st, "GEN", "", "", "")
    End Function

    Public Function SendMessage_SendMessage_Cus(ByVal MsgDat As M708310_SendMessage_Struct) As String
        Dim st As String = MsgDat.PackTable
        Return AppInstance.SendMessageVisuallyEx("708310", st, "CUS", "", "", "")
    End Function

    Public Function SendMessage_SendMessage_Gen(ByVal MsgDat As M708310_SendMessage_Struct) As String
        Dim st As String = MsgDat.PackTable
        Return AppInstance.SendMessageVisuallyEx("708410", st, "GEN", "", "", "")
    End Function

#End Region

#Region "GetMessage_..."

    Public Function GetMessage_Enroll2FA(ByVal MsgId As String, ByRef CusPfx As String, ByRef OrdNum As String) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("611000", "", MsgId, &H81000158, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 32) 'MsgReqDat	32x	Request data
            'SecDevDat	32	Security device data
            AppInstance.strip(resp, 1) 'SecDevFlg	1x	Flag (Y/N) to indicate if a security token is issued
            AppInstance.strip(resp, 1) 'SecDevAct	1x	Flag (Y/N) to indicate if a security token is active
            OrdNum = AppInstance.strip(resp, 8) 'SecDevIde	8x	ORD: Identity number (serial number of the identity token) or seed value
            AppInstance.strip(resp, 3) 'SecDevVnd	3x	Device vendor: 2BK=SAIB Mobile OTP
            AppInstance.strip(resp, 1) 'SecDevUse	1x	Device usage information "U"=use for both login and transaction.
            AppInstance.strip(resp, 18) 'RsvDat21	18x	Reserved (space filled)
            CusPfx = AppInstance.strip(resp, 2) 'CusPfx	2x	Customer prefix
            AppInstance.strip(resp, 62) 'Rsv020	62x	Reserved, space filled
        Catch ex As Exception
            HandleError(&H81000159, "Error in GetMessage_Enroll2FA:" & ex.Message, "Error", ex)
            Return False
        End Try
        Return True

    End Function

    Public Function GetMessage_Reset2FA(ByVal MsgId As String, ByRef CusPfx As String, ByRef OrdNum As String) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("611010", "", MsgId, &H81000158, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 32) 'MsgReqDat	32x	Request data
            'SecDevDat	32	Security device data
            AppInstance.strip(resp, 1) 'SecDevFlg	1x	Flag (Y/N) to indicate if a security token is issued
            AppInstance.strip(resp, 1) 'SecDevAct	1x	Flag (Y/N) to indicate if a security token is active
            OrdNum = AppInstance.strip(resp, 8) 'SecDevIde	8x	ORD: Identity number (serial number of the identity token) or seed value
            AppInstance.strip(resp, 3) 'SecDevVnd	3x	Device vendor: 2BK=SAIB Mobile OTP
            AppInstance.strip(resp, 1) 'SecDevUse	1x	Device usage information "U"=use for both login and transaction.
            AppInstance.strip(resp, 18) 'RsvDat21	18x	Reserved (space filled)
            CusPfx = AppInstance.strip(resp, 2) 'CusPfx	2x	Customer prefix
            AppInstance.strip(resp, 62) 'Rsv020	62x	Reserved, space filled
        Catch ex As Exception
            HandleError(&H81000159, "Error in GetMessage_Reset2FA:" & ex.Message, "Error", ex)
            Return False
        End Try
        Return True
    End Function

    'Not used
    Public Function GetMessage_ObtainContactInformation(ByVal MsgId As String, ByRef MsgRspDat As ContactInformation_Struct) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("615000", "", MsgId, &H81000158, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            MsgRspDat.ReadTable(resp)
        Catch ex As Exception
            HandleError(&H81000159, "Error:", "Error", ex)
            Return False
        End Try
        Return True

    End Function

    Public Function GetMessage_GetCMRCombo(ByVal MsgId As String, ByRef MsgRspDat As CMRComboInformation_Struct) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("615040", "", MsgId, &H81000160, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            MsgRspDat.ReadTable(resp)

        Catch ex As Exception
            HandleError(&H81000161, "Error:", "Error", ex)
            Return False
        End Try
        Return True

    End Function

    Public Function GetMessage_ModifyCMRCombo(ByVal MsgId As String, ByRef MsgRspDat As M615051_CMRCombo_Struct) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("615050", "", MsgId, &H81000441, resp)) Then Return False
        Try

            AppInstance.strip(resp, 256)
            MsgRspDat.ReadTable(resp)

        Catch ex As Exception
            HandleError(&H81000441, "Error:", "Error", ex)
            Return False
        End Try
        Return True

    End Function

    Public Function GetMessage_GetSMSBanking(ByVal MsgId As String, ByRef MsgRspDat As M708011_GetSMSBanking_Struct) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("708010", "", MsgId, &H81000442, resp)) Then Return False
        Try

            AppInstance.strip(resp, 256)
            MsgRspDat.ReadTable(resp)

        Catch ex As Exception
            HandleError(&H81000442, "Error:", "Error", ex)
            Return False
        End Try
        Return True

    End Function

    Public Function GetMessage_ModifySMSBanking(ByVal MsgId As String, ByRef MsgRspDat As M708021_ModifySMSBanking_Struct) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("708020", "", MsgId, &H81000443, resp)) Then Return False
        Try

            AppInstance.strip(resp, 256)
            MsgRspDat.ReadTable(resp)

        Catch ex As Exception
            HandleError(&H81000443, "Error:", "Error", ex)
            Return False
        End Try
        Return True

    End Function

    Public Function GetMessage_GetAlertServices(ByVal MsgId As String, ByRef MsgRspDat As M708031_AlertServices_Struct) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("708030", "", MsgId, &H81000444, resp)) Then Return False
        Try

            AppInstance.strip(resp, 256)
            MsgRspDat.ReadTable(resp)

        Catch ex As Exception
            HandleError(&H81000444, "Error:", "Error", ex)
            Return False
        End Try
        Return True

    End Function

    Public Function GetMessage_ModifyAlertServices(ByVal MsgId As String, ByRef MsgRspDat As M708041_AlertServices_Struct) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("708040", "", MsgId, &H81000445, resp)) Then Return False
        Try

            AppInstance.strip(resp, 256)
            MsgRspDat.ReadTable(resp)

        Catch ex As Exception
            HandleError(&H81000445, "Error:", "Error", ex)
            Return False
        End Try
        Return True

    End Function

    Public Function GetMessage_GetAlertServicePreferences(ByVal MsgId As String, ByRef MsgRspDat As M708051_GetAlertServicePreferences_Struct) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("708050", "", MsgId, &H81000446, resp)) Then Return False
        Try

            AppInstance.strip(resp, 256)
            MsgRspDat.ReadTable(resp)

        Catch ex As Exception
            HandleError(&H81000446, "Error:", "Error", ex)
            Return False
        End Try
        Return True

    End Function

    Public Function GetMessage_ModifyAlertServicePreferences(ByVal MsgId As String, ByRef TabRowVer As String) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("708060", "", MsgId, &H81000447, resp)) Then Return False
        Try

            AppInstance.strip(resp, 256)
            TabRowVer = Pack.Strip(resp, 12)

        Catch ex As Exception
            HandleError(&H81000447, "Error:", "Error", ex)
            Return False
        End Try
        Return True

    End Function

    Public Function GetMessage_GetRecentTestMessages(ByVal MsgId As String, ByRef TstMsgList() As M708070_TestMessages_Struct) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("708070", "", MsgId, &H81000618, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 64) 'Echoed data
            Dim count As Integer = CType(AppInstance.strip(resp, 2), Integer)
            If count <= 0 Then
                '''HandleError(&H80002039, SIBL0100.Util.Debug.getStackFrame(New StackTrace(True).GetFrame(0)) & ": No data received", "ICE Communications")
                '''Return False
                Erase TstMsgList
                Return True
            End If
            ReDim TstMsgList(count - 1)
            For i As Integer = 0 To TstMsgList.Length - 1
                With TstMsgList(i)
                    .TgtTyp = AppInstance.strip(resp, 3)
                    .TgtKey = AppInstance.strip(resp, 50)
                    .AltDlvCde = AppInstance.strip(resp, 3)
                    .AltDlvExp = AppInstance.strip(resp, 3)
                    .RndNum = AppInstance.strip(resp, 5)
                    .UsrStpDat = AppInstance.strip(resp, 30)
                End With
            Next
        Catch ex As Exception
            HandleError(&H81000618, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_SendTestMessage_Cus(ByVal MsgId As String, ByRef TestNum As String) As Boolean
        Dim resp As String = String.Empty
        If Not (GetMessage_Common("708300", "", MsgId, &H81000448, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 114) 'MsgReqDat	114x
            AppInstance.strip(resp, 25) 'MobTel	25x
            AppInstance.strip(resp, 50) 'EmlAdd	50x
            TestNum = AppInstance.strip(resp, 5)
            AppInstance.strip(resp, 16) 'Rsv00	17x
        Catch ex As Exception
            HandleError(&H81000448, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_SendTestMessage_Gen(ByVal MsgId As String, ByRef TestNum As String) As Boolean
        Dim resp As String = String.Empty
        If Not (GetMessage_Common("708400", "", MsgId, &H81000449, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 114) 'MsgReqDat	114x
            AppInstance.strip(resp, 25) 'MobTel	25x
            AppInstance.strip(resp, 50) 'EmlAdd	50x
            TestNum = AppInstance.strip(resp, 5)
            AppInstance.strip(resp, 16) 'Rsv00	16x
        Catch ex As Exception
            HandleError(&H81000449, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_SendMessage_Cus(ByVal MsgId As String) As Boolean
        Dim resp As String = String.Empty
        If Not (GetMessage_Common("708310", "", MsgId, &H81000450, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
        Catch ex As Exception
            HandleError(&H81000450, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_SendMessage_Gen(ByVal MsgId As String) As Boolean
        Dim resp As String = String.Empty
        If Not (GetMessage_Common("708410", "", MsgId, &H81000451, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
        Catch ex As Exception
            HandleError(&H81000451, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

#End Region

End Module

Public Module CRM

    Public Structure M615120_EnumCusInfUpd_Struct
        Dim ReqAct As String '1x
        Dim ReqCan As String '1x
        Dim ReqDon As String '1x
        Dim Rsv01 As String '5x
        Dim ReqAccOff As String '3x
        Dim DteBeg As String '8x
        Dim DteEnd As String '8x
        Dim MxItm As String '2n
        Dim Rsv02 As String '35x
        Public Function PackTable() As String
            Dim st As String = ""
            st &= Pack.PackString(ReqAct, 1)
            st &= Pack.PackString(ReqCan, 1)
            st &= Pack.PackString(ReqDon, 1)
            st &= Pack.PackString(Rsv01, 5)
            st &= Pack.PackString(ReqAccOff, 3)
            st &= Pack.PackString(DteBeg, 8)
            st &= Pack.PackString(DteEnd, 8)
            st &= Pack.PackString(MxItm, 2)
            st &= Pack.PackString(Rsv02, 35)
            Return st
        End Function
    End Structure

    Public Structure DfcDat_Struct
        Dim DfcIde As String
        Dim DfcNewInd As String
        Dim DfcOldInd As String
        Dim DfcNewDat As String
        Dim DfcOldDat As String
        Public Function PackTable() As String
            Dim st As String = ""
            st &= Pack.PackString(DfcIde, 4)
            st &= Pack.PackString(DfcNewInd, 1)
            st &= Pack.PackString(DfcOldInd, 1)
            st &= DfcNewDat
            st &= DfcOldDat
            Return st
        End Function
        Public Sub ReadTable(ByRef DataStream As String)
            DfcIde = Pack.Strip(DataStream, 4)
            DfcNewInd = Pack.Strip(DataStream, 1)
            DfcOldInd = Pack.Strip(DataStream, 1)
            DfcNewDat = Pack.Strip(DataStream, CInt(DataStream.Length / 2))
            DfcOldDat = DataStream
            'load the old values in the new value field if DfcNewInd is "N"
            If DfcNewInd <> "Y" Then DfcNewDat = DfcOldDat
        End Sub
        Public Function Changed() As Boolean
            Return (DfcNewInd = "Y") AndAlso (DfcOldDat <> DfcNewDat)
        End Function
    End Structure

    Public Structure PUP_Struct
        Dim TabRowVer As String  '12x.
        Dim CusNum As String  '6x.
        Dim ChnIde As String  '4x.
        Dim ChnUsrIde As String  '10x.
        Dim ChnCrpIde As String  '10x.
        Dim ReqStp As String  '14x.
        Dim ReqRef As String  '8x.
        Dim AccOffIde As String  '3x.
        Dim AccMgrIde As String  '3x.
        Dim ReqSta As String  '4x.
        Dim StaUsrIde As String  '10x.
        Dim StaStp As String  '14x.
        Dim BasOldInd As String '3n
        Dim OutCusTyp As String ' 2x
        Dim OutSibEmp As String ' 1x
        Dim RsvP1 As String '44x
        Dim Dfc1SEX As DfcDat_Struct  '8x.
        Dim Dfc1MAR As DfcDat_Struct  '8x.
        Dim Dfc1DOB As DfcDat_Struct  '22x.
        Dim Dfc1NAT As DfcDat_Struct  '10x.
        Dim Dfc1CID As DfcDat_Struct  '34x.
        Dim Dfc1EXP As DfcDat_Struct  '22x.
        Dim Dfc1NAE As DfcDat_Struct  '286x.
        Dim Dfc1NAA As DfcDat_Struct  '286x.
        Dim Dfc1SNE As DfcDat_Struct  '36x
        Dim Dfc1SNA As DfcDat_Struct  '36x
        Dim Dfc1CSC As DfcDat_Struct  '12x
        Dim Dfc2EML As DfcDat_Struct  '106x
        Dim Dfc2HOM As DfcDat_Struct  '56x
        Dim Dfc2BUS As DfcDat_Struct  '56x
        Dim Dfc2MOB As DfcDat_Struct  '56x
        Dim Dfc2FAX As DfcDat_Struct  '56x
        Dim Dfc3BRN As DfcDat_Struct  '14x
        Dim Dfc3BOX As DfcDat_Struct  '14x
        Dim Dfc4LND As DfcDat_Struct  '10x
        Dim Dfc4ZIP As DfcDat_Struct  '22x
        Dim DfcHDOB As DfcDat_Struct  '22x
        Dim DfcHEXP As DfcDat_Struct  '22x
        Dim RsvP2 As String  '658x.

        Public Function PackTable() As String
            Dim st As String = ""
            st &= Pack.PackString(TabRowVer, 12)
            st &= Pack.PackString(CusNum, 6)
            st &= Pack.PackString(ChnIde, 4)
            st &= Pack.PackString(ChnUsrIde, 10)
            st &= Pack.PackString(ChnCrpIde, 10)
            st &= Pack.PackString(ReqStp, 14)
            st &= Pack.PackString(ReqRef, 8)
            st &= Pack.PackString(AccOffIde, 3)
            st &= Pack.PackString(AccMgrIde, 3)
            st &= Pack.PackString(ReqSta, 4)
            st &= Pack.PackString(StaUsrIde, 10)
            st &= Pack.PackString(StaStp, 14)
            st &= Pack.PackNString(BasOldInd, 3)
            st &= Pack.PackNString(OutCusTyp, 2)
            st &= Pack.PackNString(OutSibEmp, 1)
            st &= Pack.PackString(RsvP1, 44)
            st &= Dfc1SEX.PackTable
            st &= Dfc1MAR.PackTable
            st &= Dfc1DOB.PackTable
            st &= Dfc1NAT.PackTable
            st &= Dfc1CID.PackTable
            st &= Dfc1EXP.PackTable
            st &= Dfc1NAE.PackTable
            st &= Dfc1NAA.PackTable
            st &= Dfc1SNE.PackTable
            st &= Dfc1SNA.PackTable
            st &= Dfc1CSC.PackTable
            st &= Dfc2EML.PackTable
            st &= Dfc2HOM.PackTable
            st &= Dfc2BUS.PackTable
            st &= Dfc2MOB.PackTable
            st &= Dfc2FAX.PackTable
            st &= Dfc3BRN.PackTable
            st &= Dfc3BOX.PackTable
            st &= Dfc4LND.PackTable
            st &= Dfc4ZIP.PackTable
            st &= DfcHDOB.PackTable
            st &= DfcHEXP.PackTable
            st &= Pack.PackString(RsvP2, 658)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            TabRowVer = Pack.Strip(DataStream, 12)
            CusNum = Pack.Strip(DataStream, 6)
            ChnIde = Pack.Strip(DataStream, 4)
            ChnUsrIde = Pack.Strip(DataStream, 10)
            ChnCrpIde = Pack.Strip(DataStream, 10)
            ReqStp = Pack.Strip(DataStream, 14)
            ReqRef = Pack.Strip(DataStream, 8)
            AccOffIde = Pack.Strip(DataStream, 3)
            AccMgrIde = Pack.Strip(DataStream, 3)
            ReqSta = Pack.Strip(DataStream, 4)
            StaUsrIde = Pack.Strip(DataStream, 10)
            StaStp = Pack.Strip(DataStream, 14)
            BasOldInd = Pack.Strip(DataStream, 3)
            OutCusTyp = Pack.Strip(DataStream, 2)
            OutSibEmp = Pack.Strip(DataStream, 1)
            RsvP1 = Pack.Strip(DataStream, 44)
            Dfc1SEX.ReadTable(strip(DataStream, 8))
            Dfc1MAR.ReadTable(strip(DataStream, 8))
            Dfc1DOB.ReadTable(strip(DataStream, 22))
            Dfc1NAT.ReadTable(strip(DataStream, 10))
            Dfc1CID.ReadTable(strip(DataStream, 34))
            Dfc1EXP.ReadTable(strip(DataStream, 22))
            Dfc1NAE.ReadTable(strip(DataStream, 286))
            Dfc1NAA.ReadTable(strip(DataStream, 286))
            Dfc1SNE.ReadTable(strip(DataStream, 36))
            Dfc1SNA.ReadTable(strip(DataStream, 36))
            Dfc1CSC.ReadTable(strip(DataStream, 12))
            Dfc2EML.ReadTable(strip(DataStream, 106))
            Dfc2HOM.ReadTable(strip(DataStream, 56))
            Dfc2BUS.ReadTable(strip(DataStream, 56))
            Dfc2MOB.ReadTable(strip(DataStream, 56))
            Dfc2FAX.ReadTable(strip(DataStream, 56))
            Dfc3BRN.ReadTable(strip(DataStream, 14))
            Dfc3BOX.ReadTable(strip(DataStream, 14))
            Dfc4LND.ReadTable(strip(DataStream, 10))
            Dfc4ZIP.ReadTable(strip(DataStream, 22))
            DfcHDOB.ReadTable(strip(DataStream, 22))
            DfcHEXP.ReadTable(strip(DataStream, 22))
            RsvP2 = Pack.Strip(DataStream, 658)
        End Sub

    End Structure

#Region "SendMessage_"
    Public Function SendMessage_CancelCusInfUpdReq(ByVal CusNum As String, ByVal TabRowVer As String) As String
        Dim tmpStr As String = ""
        tmpStr &= Pack.PackString(TabRowVer, 12)
        tmpStr &= Pack.PackString(CusNum, 6)
        tmpStr &= Pack.PackString("", 26)
        Return AppInstance.SendMessageVisuallyEx("615070", tmpStr, "CUS", CusNum, "", "")
    End Function

    Public Function SendMessage_ApplyCusInfUpdReq(ByVal CusNum As String, ByVal TabRowVer As String) As String
        Dim tmpStr As String = ""
        tmpStr &= Pack.PackString(TabRowVer, 12)
        tmpStr &= Pack.PackString(CusNum, 6)
        tmpStr &= Pack.PackString("", 26)
        Return AppInstance.SendMessageVisuallyEx("615080", tmpStr, "CUS", CusNum, "", "")
    End Function

    Public Function SendMessage_GetCusInfUpdReq(ByVal CusNum As String) As String
        Dim tmpStr As String = ""
        tmpStr &= Pack.PackString(CusNum, 6)
        tmpStr &= Pack.PackString("", 38)
        Return AppInstance.SendMessageVisuallyEx("615090", tmpStr, "CUS", CusNum, "", "")
    End Function

    Public Function SendMessage_EnumCusInfUpdReq(ByVal MsgDat As M615120_EnumCusInfUpd_Struct) As String
        Dim tmpStr As String

        tmpStr = MsgDat.PackTable
        Return AppInstance.SendMessageVisuallyEx("615120", tmpStr, "GEN", "", "", "")
    End Function
#End Region

#Region "GetMessage_"
    Public Function GetMessage_CancelCusInfUpdReq(ByVal MsgId As String) As Boolean
        Dim resp As String = String.Empty
        If Not (GetMessage_Common("615070", "", MsgId, &H81000177, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 44) 'Echoed data
        Catch ex As Exception
            HandleError(&H81000178, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_ApplyCusInfUpdReq(ByVal MsgId As String) As Boolean
        Dim resp As String = String.Empty
        If Not (GetMessage_Common("615080", "", MsgId, &H81000177, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 44) 'Echoed data
        Catch ex As Exception
            HandleError(&H81000178, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_GetCusInfUpdReq(ByVal MsgId As String, ByRef MsgRspDat As PUP_Struct) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("615090", "", MsgId, &H81000177, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 44) 'Echoed data
            MsgRspDat.ReadTable(resp)
        Catch ex As Exception
            HandleError(&H81000178, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_EnumCusInfUpdReq(ByVal MsgId As String, ByRef PupArr() As PUP_Struct, ByRef foundCount As Integer) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("615120", "", MsgId, &H81000177, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 64) 'Echoed data
            foundCount = CType(AppInstance.strip(resp, 4), Integer)
            Dim count As Integer = CType(AppInstance.strip(resp, 2), Integer)
            If count <= 0 Then
                Erase PupArr
                Return True
            End If
            If count <> foundCount Then
                ModalMsgBox("There are more transactions in the system than can be shown here." & vbCrLf & _
                        "Of the " & foundCount & " recorded, only " & count & " can be shown", MsgBoxStyle.Information, "ICE Results")
                Application.DoEvents()
                ShowBusyIcon(True)
            End If
            ReDim PupArr(count - 1)
            For i As Integer = 0 To PupArr.Length - 1
                PupArr(i).ReadTable(resp)
            Next
        Catch ex As Exception
            HandleError(&H81000178, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function
#End Region

End Module

'Public Function PackTable() As String
'    Dim st As String = ""
'    st &= Pack.PackString(  ,  )
'    Return st
'End Function
'Public Sub ReadTable(ByRef DataStream As string)
'         = Pack.Strip(DataStream,   )
'End Sub

Public Module CorporateBanking

    Public Structure LimSchDat_Struct
        Dim TabRowVer As String '12n
        Dim ChgStp As String '14x
        Dim ChgUid As String '10x

        Dim LimSchIde As String  '10x
        Dim LimSchAct As String  '1x
        Dim LimDlyCnt As String  '4n
        Dim LimDlyAmt As String  '9n
        Dim LimMthCnt As String  '4n
        Dim LimMthAmt As String  '9n
        Dim LimSngTrx As String  '9n
        'Dim LimQtlTrx As String '10	•	IPS Quick Transfer limit or referred as Proxy Limit (in whole SAR) or zero

        Public Sub ReadTable(ByRef DataStream As String)

            TabRowVer = Pack.Strip(DataStream, 12)

            'ChgStp = Pack.Strip(DataStream, 10)
            'ChgUid = Pack.Strip(DataStream, 1)
            LimSchIde = Pack.Strip(DataStream, 10)
            LimSchAct = Pack.Strip(DataStream, 1)
            LimDlyCnt = Pack.Strip(DataStream, 5)
            LimDlyAmt = Pack.Strip(DataStream, 10)
            LimMthCnt = Pack.Strip(DataStream, 5)
            LimMthAmt = Pack.Strip(DataStream, 10)
            LimSngTrx = Pack.Strip(DataStream, 10)

        End Sub
    End Structure

    Public Structure CorpRolDat_Struct
        Dim TabRowVer As String '12n
        Dim ChgStp As String '14x
        Dim ChgUid As String '10x

        Dim RolIde As String  '10x
        Dim RolAct As String  '1x
        Dim HiaNum As String  '2n
        Dim RolNam As String  '25x
    End Structure

    Public Structure Corp_DepAccDat_ItmDat_Struct

        Dim TabRowVer As String  '12n
        Dim DepAccDat As Corp_DepAccDat_Struct

        Public Function PackTable() As String
            Dim st As String = String.Empty

            st &= AppInstance.PackString(TabRowVer, 12)
            st &= DepAccDat.PackTable()

            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            TabRowVer = Pack.Strip(DataStream, 12)
            DepAccDat.ReadTable(DataStream)
        End Sub

        Public Sub Reset()
            TabRowVer = ""
            DepAccDat.Reset()
        End Sub
    End Structure

    Public Structure Corp_DepAccDat_Struct

        Dim CusNum As String  '6n
        Dim DepIde As String  '10x
        Dim IcsUsrType As String '10x Type of Internet user (corporate or CAV)
        Dim SibStp As String  '14x
        Dim SibUsr As String  '10x
        Dim CusNumRef As String '6n Customer number referenced by the account number or “*ALL”
        Dim AccNum As String  '13x
        Dim UsePatEnq As String  '1x
        Dim UsePatReq As String  '1x
        Dim UsePatExe As String  '1x
        Dim UseAccDeb As String  '1x
        Dim UseAccCrd As String  '1x
        Dim UseSeeDea As String  '1x

        Public Sub Reset()
            CusNum = "" '6n
            DepIde = "" '10x
            IcsUsrType = "" '10x Type of Internet user (corporate or CAV)
            SibStp = "" '14x
            SibUsr = "" '10x
            CusNumRef = "" '6n Customer number referenced by the account number or “*ALL”
            AccNum = "" '13x
            UsePatEnq = "" '1x
            UsePatReq = "" '1x
            UsePatExe = "" '1x
            UseAccDeb = "" '1x
            UseAccCrd = "" '1x
            UseSeeDea = "" '1x
        End Sub

        Public Function PackTable() As String
            Dim st As String = String.Empty

            st &= AppInstance.PackString(CusNum, 6)
            st &= AppInstance.PackString(DepIde, 10)
            st &= AppInstance.PackString(IcsUsrType, 6)
            st &= AppInstance.PackString(SibStp, 14)
            st &= AppInstance.PackString(SibUsr, 10)
            st &= AppInstance.PackString(CusNumRef, 6)
            st &= AppInstance.PackString(AccNum, 13)
            st &= AppInstance.PackString(UsePatEnq, 1)
            st &= AppInstance.PackString(UsePatReq, 1)
            st &= AppInstance.PackString(UsePatExe, 1)
            st &= AppInstance.PackString(UseAccDeb, 1)
            st &= AppInstance.PackString(UseAccCrd, 1)
            st &= AppInstance.PackString(UseSeeDea, 1)

            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            CusNum = Pack.Strip(DataStream, 6)
            DepIde = Pack.Strip(DataStream, 10)
            IcsUsrType = Pack.Strip(DataStream, 6)
            SibStp = Pack.Strip(DataStream, 14)
            SibUsr = Pack.Strip(DataStream, 10)
            CusNumRef = Pack.Strip(DataStream, 6)
            AccNum = Pack.Strip(DataStream, 13)
            UsePatEnq = Pack.Strip(DataStream, 1)
            UsePatReq = Pack.Strip(DataStream, 1)
            UsePatExe = Pack.Strip(DataStream, 1)
            UseAccDeb = Pack.Strip(DataStream, 1)
            UseAccCrd = Pack.Strip(DataStream, 1)
            UseSeeDea = Pack.Strip(DataStream, 1)
        End Sub

    End Structure

    Public Structure CorpMnuItm_Struct
        Dim TabRowVer As String '12n
        Dim ChgStp As String    '14x
        Dim ChgUid As String    '10x
        Dim CorpMnuDat() As CoreSys_MnuItmDat

        Public Function PackTable() As String
            Dim st As String = String.Empty
            Dim Count As Integer
            st &= AppInstance.PackString(TabRowVer, 12)
            st &= AppInstance.PackString("", 49)


            If CorpMnuDat Is Nothing Then Count = 0 Else Count = CType(CorpMnuDat.Length, Integer)
            st &= AppInstance.PackNSString(CStr(Count), 3, False)
            If Count > 0 Then
                For i As Integer = 0 To Count - 1
                    st &= CorpMnuDat(i).PackTable()
                    st &= AppInstance.PackString("", 15)
                Next
            End If

            Return st
        End Function
    End Structure

    Public Structure CorpMnuPrfDat
        Dim MnuPrfIde As String    '8x Menu profile identifier (must be a BankAway menu profile name)
        Dim MnuItmIde As String    '10x Menu item identifier (internal to AS/400)
        Dim MnuItmSee As String    '1x Flag (Y/N) indicating that viewing is allowed
        Dim MunItmEnt As String    '1x Flag (Y/N) indicating that entry/modification is allowed
        Dim MunItmAut As String    '1x Flag (Y/N) indicating that authorisation is allowed

    End Structure

    Public Structure CorpMnuPrf_Struct
        Dim TabRowver As String     '12n
        Dim ChgStp As String        '14x
        Dim ChgUid As String        '10x
        Dim MnuPrfIde As String     '8x
        Dim MnuPrfDsc As String     '25x

    End Structure

    Public Structure CorpMnuPrfDetail_Struct
        Dim MnuPrfIde As String     '8x	Menu profile identifier
        Dim TabRowver As String     '12n Table row version (for the profile)
        Dim ChgStp As String        '14x Date and time this profile was changed
        Dim ChgUid As String        '10x User identity of the SAIB user making the change
        Dim MnuPrfIde2 As String    '8x	Menu profile identifier being returned
        Dim MnuPrfDsc As String     'Menu profile name
        Dim CorpMnuDat() As CorpMnuPrfDat

        Public Sub Clear()
            MnuPrfIde = ""
            TabRowver = "000000000000"
            MnuPrfDsc = ""
            ChgStp = ""
            ChgUid = ""
            MnuPrfIde2 = ""

        End Sub

        Public Function PackTable() As String
            Dim MsgData As String
            Dim i, Count As Integer
            MsgData &= AppInstance.PackString(MnuPrfIde, 8)
            MsgData &= AppInstance.PackString(TabRowver, 12)
            MsgData &= AppInstance.PackString("", 32)
            MsgData &= AppInstance.PackString(MnuPrfDsc, 25)
            If (CorpMnuDat Is Nothing) Then Count = 0 Else Count = CType(CorpMnuDat.Length, Integer)

            MsgData &= AppInstance.PackNSString(CStr(Count), 3, False)
            If Count > 0 Then
                For i = 0 To Count - 1
                    MsgData &= AppInstance.PackString(CorpMnuDat(i).MnuPrfIde, 8)
                    MsgData &= AppInstance.PackString(CorpMnuDat(i).MnuItmIde, 10)
                    MsgData &= AppInstance.PackString(CorpMnuDat(i).MnuItmSee, 1)
                    MsgData &= AppInstance.PackString(CorpMnuDat(i).MunItmEnt, 1)
                    MsgData &= AppInstance.PackString(CorpMnuDat(i).MunItmAut, 1)
                Next
            End If
            Return MsgData
        End Function

        Public Sub readTable(ByVal resp As String)
            Dim MsgData As String
            Dim tmpStr As String
            Dim i, count As Integer
            MnuPrfIde = AppInstance.strip(resp, 8)
            TabRowver = AppInstance.strip(resp, 12)
            ChgStp = AppInstance.strip(resp, 14)
            ChgUid = AppInstance.strip(resp, 10)
            MnuPrfIde2 = AppInstance.strip(resp, 8)
            MnuPrfDsc = AppInstance.strip(resp, 25)
            count = AppInstance.ExInt(AppInstance.strip(resp, 3))
            If count <= 0 Then
                'PrfDat = Nothing

            End If
            ReDim CorpMnuDat(count - 1)
            For i = 0 To count - 1
                tmpStr = AppInstance.strip(resp, 21)
                With CorpMnuDat(i)
                    .MnuPrfIde = AppInstance.strip(tmpStr, 8)
                    .MnuItmIde = AppInstance.strip(tmpStr, 10)
                    .MnuItmSee = AppInstance.strip(tmpStr, 1)
                    .MunItmEnt = AppInstance.strip(tmpStr, 1)
                    .MunItmAut = AppInstance.strip(tmpStr, 1)
                End With
            Next

        End Sub
    End Structure

    Public Structure CorpRulAut
        Dim RolAut As String
        Dim NumAut As String

    End Structure

    Public Structure CorpRulDat_Struct
        Dim TabRowVer As String     '12n
        Dim SibStp As String        '14x
        Dim SibUsr As String        '10x

        '10n	Rule key
        Dim CusNum As String        '6n Customer number where this rule is to be applied
        Dim RulNum As String        '4n Rule number (unique within customer number)
        Dim ItmAct As String        '1x	Status A=Active, D=Deleted
        Dim RulDsc As String        '25x Rule descriptive text
        Dim RulTrxCde As String     '3x	Transaction code to which this rule applies
        Dim RulAmtBeg As String     '13n Band: Amount begins from this value (in lowest currency units)
        Dim RulAmtEnd As String     '13n Band: Amount ends at this value (in lowest currency units)
        Dim RulAmtCcy As String     '3x	Currency code of the banded amounts
        Dim RulAut() As CorpRulAut  '33	Authorising roles [1], [2] and [3]
        Public Function PackTable() As String
            Dim msgData As String

            msgData = AppInstance.PackString(CusNum, 6)
            msgData &= AppInstance.PackString(TabRowVer, 12)
            msgData &= AppInstance.PackString("", 24)
            msgData &= AppInstance.PackString(CusNum, 6)
            msgData &= AppInstance.PackNSString(RulNum, 4, False)
            msgData &= AppInstance.PackString(ItmAct, 1)
            msgData &= AppInstance.PackString(RulDsc, 25)
            msgData &= AppInstance.PackString(RulTrxCde, 10)
            msgData &= AppInstance.PackNSString(RulAmtBeg, 10, False)
            msgData &= AppInstance.PackNSString(RulAmtEnd, 10, False)
            msgData &= AppInstance.PackString(RulAmtCcy, 3)
            msgData &= AppInstance.PackString(RulAut(0).RolAut, 10)
            msgData &= AppInstance.PackString(RulAut(0).NumAut, 1)
            msgData &= AppInstance.PackString(RulAut(1).RolAut, 10)
            msgData &= AppInstance.PackString(RulAut(1).NumAut, 1)
            msgData &= AppInstance.PackString(RulAut(2).RolAut, 10)
            msgData &= AppInstance.PackString(RulAut(2).NumAut, 1)
            Return msgData
        End Function

        Public Sub ReadTable(ByVal tmpStr As String)
            CusNum = AppInstance.strip(tmpStr, 6)
            TabRowVer = AppInstance.strip(tmpStr, 12)
            SibStp = AppInstance.strip(tmpStr, 14)
            SibUsr = AppInstance.strip(tmpStr, 10)
            CusNum = AppInstance.strip(tmpStr, 6)
            RulNum = AppInstance.strip(tmpStr, 4)
            ItmAct = AppInstance.strip(tmpStr, 1)
            RulDsc = AppInstance.strip(tmpStr, 25)
            RulTrxCde = AppInstance.strip(tmpStr, 10)
            RulAmtBeg = AppInstance.strip(tmpStr, 10)
            RulAmtEnd = AppInstance.strip(tmpStr, 10)
            RulAmtCcy = AppInstance.strip(tmpStr, 3)
            ReDim RulAut(2)
            RulAut(0).RolAut = AppInstance.strip(tmpStr, 10)
            RulAut(0).NumAut = AppInstance.strip(tmpStr, 1)
            RulAut(1).RolAut = AppInstance.strip(tmpStr, 10)
            RulAut(1).NumAut = AppInstance.strip(tmpStr, 1)
            RulAut(2).RolAut = AppInstance.strip(tmpStr, 10)
            RulAut(2).NumAut = AppInstance.strip(tmpStr, 1)

        End Sub
    End Structure

    Public Structure CorpTrxDat
        Dim CorTrxIde As String '10x	BankAway (ICS) transaction code
        Dim CorTrxAut As String '1x	BankAway (ICS) transaction description
        Dim CorTrxDsc As String '30x	BankAway (ICS) transaction description
    End Structure

    Public Structure CorpTrxDat_Struct
        Dim TabRowver As String     '12n	Table row version (for the entire table)
        Dim ChgStp As String        '14x	Date and time this table was changed
        Dim ChgUid As String        '10x	User identity of the SAIB user making the change
        Dim CorpTrxDat() As CorpTrxDat
    End Structure


    Public Structure Request_ExtendedEnumerateCorporateNominees_Struct '0 Msg #612320
        Dim CusNum As String '6x				Desc: Customer number of the corporate to be enumerated
        Dim IcsUsrTyp As String '6x				Desc: Type of Internet user to be enumerated
        Dim Rsv1 As String '20x				Desc: Reserved, space filled

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(CusNum, 6)
            st &= Pack.PackString(IcsUsrTyp, 6)
            st &= Pack.PackString(Rsv1, 20)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            CusNum = Pack.Strip(DataStream, 6)
            IcsUsrTyp = Pack.Strip(DataStream, 6)
            Rsv1 = Pack.Strip(DataStream, 20)
        End Sub

        Public Function SendMessage_Request_ExtendedEnumerateCorporateNominees(ByVal CusNum As String, ByVal IcsUsrTyp As String, ByVal Rsv1 As String) As String

            Dim st As String = String.Empty
            Dim structInstance As Request_ExtendedEnumerateCorporateNominees_Struct
            structInstance.CusNum = CusNum
            structInstance.IcsUsrTyp = IcsUsrTyp
            structInstance.Rsv1 = Rsv1

            st &= structInstance.PackTable()
            Return AppInstance.SendMessageVisuallyEx("612320", st, "CUS", CusNum, "", "")
        End Function

    End Structure

    Public Structure ResponseExtendedEnumerateCorporateNominees_Struct '0 Msg #612321
        Dim CusNum As String '6x				Desc: Customer number of the corporate to be enumerated
        Dim IcsUsrTyp As String '6x				Desc: Type of Internet user to be enumerated
        Dim Rsv1 As String '20x				Desc: Reserved, space filled
        Dim ItmCnt As String '3n				Desc: Number [j] of items being returned
        Dim ItmGrp() As Nominees_ItmGrp_Struct '0 * ItmCnt				Desc:Zero, one or several item groups

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(CusNum, 6)
            st &= Pack.PackString(IcsUsrTyp, 6)
            st &= Pack.PackString(Rsv1, 20)
            st &= Pack.PackNString(ItmCnt, 3)
            For ind As Integer = 0 To CInt(ItmCnt) - 1 : st &= ItmGrp(ind).PackTable() : Next
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            CusNum = Pack.Strip(DataStream, 6)
            IcsUsrTyp = Pack.Strip(DataStream, 6)
            Rsv1 = Pack.Strip(DataStream, 20)
            ItmCnt = Pack.Strip(DataStream, 3)
            ReDim ItmGrp(CInt(ItmCnt) - 1)
            For ind As Integer = 0 To CInt(ItmCnt) - 1 : ItmGrp(ind).ReadTable(DataStream) : Next
        End Sub

        Public Function GetMessage_ResponseExtendedEnumerateCorporateNominees(ByVal MsgId As String, ByRef MsgRspDat As ResponseExtendedEnumerateCorporateNominees_Struct) As Boolean
            Dim resp As String = String.Empty

            If Not (GetMessage_Common("612320", "", MsgId, &H81000452, resp)) Then Return False
            Try

                AppInstance.strip(resp, 256)
                MsgRspDat.ReadTable(resp)

            Catch ex As Exception
                HandleError(&H81000452, "Error:", "Error", ex)
                Return False
            End Try
            Return True

        End Function

        Public Function SendMessage_CreateCorpNom(ByVal CusNum As String, ByVal UsrType As String, ByRef CorpNom As ResponseExtendedEnumerateCorporateNominees_Struct, ByVal p_index As Integer) As String
            Dim MsgData As String
            'Corporate type CRPNOM
            Try
                With CorpNom
                    MsgData = AppInstance.PackString(UsrType, 6)
                    MsgData &= AppInstance.PackString(CusNum, 6)
                    MsgData &= AppInstance.PackString("", 52)   'reserved  


                    MsgData &= .ItmGrp(p_index).NomRegExt.NomRegDat.PackTable()


                End With
            Catch ex As Exception
                Return Nothing
            End Try
            Return AppInstance.SendMessageVisuallyEx("612170", MsgData, "GEN", "", "", "")
        End Function

        Public Function GetMessage_CreateCorpNomn(ByVal MsgId As String, ByRef CorpNom As ResponseExtendedEnumerateCorporateNominees_Struct, ByVal p_index As Integer) As Boolean
            Dim resp As String = String.Empty

            CorpNom = Nothing
            If Not (GetMessage_Common("612170", "", MsgId, &H81000330, resp)) Then Return False
            Try
                AppInstance.strip(resp, 256)
                AppInstance.strip(resp, 6) 'CorpNom.IcsUsrTyp = AppInstance.strip(resp, 6)
                AppInstance.strip(resp, 6) 'CorpNom.IcsCusNum = AppInstance.strip(resp, 6)
                AppInstance.strip(resp, 40)

                ReDim CorpNom.ItmGrp(1)
                CorpNom.ItmGrp(p_index).TabRowVer = AppInstance.strip(resp, 12) 'new row version 

                CorpNom.ItmGrp(p_index).NomRegExt.NomRegDat.ReadTable(resp)


            Catch ex As Exception
                HandleError(&H81000331, "Error:", "Error", ex)
                Return False
            End Try
            Return True

        End Function

        Public Function SendMessage_ModifyCorpNom(ByRef CorpNom As ResponseExtendedEnumerateCorporateNominees_Struct, ByVal p_index As Integer) As String
            Dim MsgData As String

            Try
                With CorpNom.ItmGrp(p_index).NomRegExt.NomRegDat
                    'NewRowver
                    MsgData = AppInstance.PackString(.NomUsrKey, 10)
                    MsgData &= AppInstance.PackString(.NomCrpKey, 10)
                    MsgData &= AppInstance.PackString(CorpNom.ItmGrp(p_index).TabRowVer, 12)
                    MsgData &= AppInstance.PackString("", 32)

                    'Nominee data structure here
                    MsgData &= CorpNom.ItmGrp(p_index).NomRegExt.NomRegDat.PackTable()
                End With
            Catch ex As Exception
                Return Nothing
            End Try
            Return AppInstance.SendMessageVisuallyEx("612270", MsgData, "GEN", "", "", "")
        End Function

        Public Function GetMessage_ModifyCorpNomn(ByVal MsgId As String, ByRef CorpNom As ResponseExtendedEnumerateCorporateNominees_Struct, ByVal p_index As Integer) As Boolean
            Dim resp As String = String.Empty

            CorpNom = Nothing
            If Not (GetMessage_Common("612270", "", MsgId, &H81000332, resp)) Then Return False
            Try
                AppInstance.strip(resp, 256)
                AppInstance.strip(resp, 10)
                AppInstance.strip(resp, 10)
                AppInstance.strip(resp, 12) 'old row version
                AppInstance.strip(resp, 20)

                ReDim CorpNom.ItmGrp(1)
                CorpNom.ItmGrp(p_index).TabRowVer = AppInstance.strip(resp, 12) 'new row version 

                CorpNom.ItmGrp(p_index).NomRegExt.NomRegDat.ReadTable(resp)

            Catch ex As Exception
                HandleError(&H81000333, "Error:", "Error", ex)
                Return False
            End Try
            Return True


        End Function

    End Structure



    Public Structure Nominees_ItmGrp_Struct '0 Msg #6123210
        Dim TabRowVer As String '12n				Desc: ·
        Dim Rsv2 As String '8x				Desc: ·
        Dim NomRegExt As NomRegExt_Struct   '0				Desc:·

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackNString(TabRowVer, 12)
            st &= Pack.PackString(Rsv2, 8)
            st &= NomRegExt.PackTable()
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            TabRowVer = Pack.Strip(DataStream, 12)
            Rsv2 = Pack.Strip(DataStream, 8)
            NomRegExt.ReadTable(DataStream)
        End Sub
    End Structure



    Public Structure NomRegExt_Struct  '0 Msg #6123211
        Dim NomRegDat As NomRegDat_Struct '0				Desc:Structure for Nominee registration data
        Dim ExtRsv1 As String '102x				Desc: Reserved, space filled
        Dim SecDevDat As SecDevDat_Struct '0				Desc:Structure for related security device data
        Dim ExtRsv2 As String '166x				Desc: Reserved, space filled

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= NomRegDat.PackTable()
            st &= Pack.PackString(ExtRsv1, 102)
            st &= SecDevDat.PackTable()
            st &= Pack.PackString(ExtRsv2, 166)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            NomRegDat.ReadTable(DataStream)
            ExtRsv1 = Pack.Strip(DataStream, 102)
            SecDevDat.ReadTable(DataStream)
            ExtRsv2 = Pack.Strip(DataStream, 166)
        End Sub
    End Structure



    Public Structure NomRegDat_Struct '0 Msg #6123212
        Dim NomUsrKey As String '10x				Desc: Internet user identity part (host UsrKey, IBKUseIde)
        Dim NomCrpKey As String '10x				Desc: Internet corporate identity part (host CorKey)
        Dim NomCusNum As String '6n				Desc: Customer number of the corporate
        Dim NomNamEng As String '35x				Desc: Nominee name in English (host IBKEngNam, IBKEnrNam)
        Dim NomNamAra As String '35x				Desc: Nominee name in Arabic (host IBKArbNam)
        Dim NomNatCde As String '2x				Desc: ·
        Dim NomDocTyp As String '2x				Desc: ·
        Dim NomDocNum As String '10x				Desc: ·
        Dim NomLngCde As String '1x				Desc: Preferred language (A=Arabic, E=English) (host IBKLngCde)
        Dim NomEmlAdd As String '50x				Desc: E-mail address (host AppSmtp)
        Dim NomTelOff As String '25x				Desc: Office phone number (host AppTelOff)
        Dim NomTelMob As String '25x				Desc: Mobile phone number (host AppTelMob)
        Dim NomTrxPwd As String '1x				Desc: Flag (Y/N) transaction password will be used (host CcfTrxPwd)
        Dim NomTrxTok As String '1x				Desc: Flag (Y/N) transaction token will be used (host SecDevFlg)
        Dim DivIde As String '10x				Desc: Department name (host DepIde)
        Dim LimSchIde As String '10x				Desc: Limit scheme name (host )
        Dim RolIde As String '10x				Desc: Role name (host LocIde)
        Dim MenPrfIde As String '8x				Desc: Menu profile name (host UsePrfNam)
        Dim ActFlg As String '1x				Desc: Activation flag: A=Active, S=Stopped, D=Denied (host UseSta) “I” = Inactive waiting Registration authorization “P” =  Inactive waiting Password change authorization “T” = Inactive for Tanfeeth Block
        Dim IcsUsrDat As String '6x				Desc: Refer to decoding
        Dim DirDwnDat As String '12x	        Direcory access pattern (refer to structure)
        Dim NomAltFlg As String '1x	            (Y/E/M/N) Nominee to receive operational alerts
        Dim NomPyrFlg As String '1x	            Flag (Y/N) indicating if the user (nominee) is a Payroll user
        Dim NomDocExp As String     '8n	Expiry date (YYYYMMDD) of the nominee’s identity document
        Dim NomNum As String        '3x	Nominee number assigned data entry clerk   
        Dim SmsAutFlg As String     '1x	Flag (Y) indicating authentication via SMS is enabled. Flag (N or Space) means SMS authentication is disabled.
        Dim NomPwdRst As String     '1x	Flag (Y) indicating Nominee password reset request.
        Dim SofTknFlg As String     '1x	Flag (Y) indicate soft taken authentication is enabled
        Dim NomDob As String        '8n	Date of birth of the nominee in the format (YYYYMMDD)
        Dim Rsv2 As String          '15x Desc: Reserved for future use, space filled

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(NomUsrKey, 10)
            st &= Pack.PackString(NomCrpKey, 10)
            st &= Pack.PackNString(NomCusNum, 6)
            st &= Pack.PackString(NomNamEng, 35)
            st &= Pack.PackString(NomNamAra, 35)
            st &= Pack.PackString(NomNatCde, 2)
            st &= Pack.PackString(NomDocTyp, 2)
            st &= Pack.PackString(NomDocNum, 10)
            st &= Pack.PackString(NomLngCde, 1)
            st &= Pack.PackString(NomEmlAdd, 50)
            st &= Pack.PackString(NomTelOff, 25)
            st &= Pack.PackString(NomTelMob, 25)
            st &= Pack.PackString(NomTrxPwd, 1)
            st &= Pack.PackString(NomTrxTok, 1)
            st &= Pack.PackString(DivIde, 10)
            st &= Pack.PackString(LimSchIde, 10)
            st &= Pack.PackString(RolIde, 10)
            st &= Pack.PackString(MenPrfIde, 8)
            st &= Pack.PackString(ActFlg, 1)
            st &= Pack.PackString(IcsUsrDat, 6)
            st &= Pack.PackString(DirDwnDat, 12)
            st &= Pack.PackString(NomAltFlg, 1)
            st &= Pack.PackString(NomPyrFlg, 1)

            st &= Pack.PackString(NomDocExp, 8)
            st &= Pack.PackString(NomNum, 3)
            st &= Pack.PackString(SmsAutFlg, 1)
            st &= Pack.PackString(NomPwdRst, 1)
            st &= Pack.PackString(SofTknFlg, 1)
            st &= Pack.PackString(NomDob, 8)
            st &= Pack.PackString(Rsv2, 6)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            NomUsrKey = Pack.Strip(DataStream, 10)
            NomCrpKey = Pack.Strip(DataStream, 10)
            NomCusNum = Pack.Strip(DataStream, 6)
            NomNamEng = Pack.Strip(DataStream, 35)
            NomNamAra = Pack.Strip(DataStream, 35)
            NomNatCde = Pack.Strip(DataStream, 2)
            NomDocTyp = Pack.Strip(DataStream, 2)
            NomDocNum = Pack.Strip(DataStream, 10)
            NomLngCde = Pack.Strip(DataStream, 1)
            NomEmlAdd = Pack.Strip(DataStream, 50)
            NomTelOff = Pack.Strip(DataStream, 25)
            NomTelMob = Pack.Strip(DataStream, 25)
            NomTrxPwd = Pack.Strip(DataStream, 1)
            NomTrxTok = Pack.Strip(DataStream, 1)
            DivIde = Pack.Strip(DataStream, 10)
            LimSchIde = Pack.Strip(DataStream, 10)
            RolIde = Pack.Strip(DataStream, 10)
            MenPrfIde = Pack.Strip(DataStream, 8)
            ActFlg = Pack.Strip(DataStream, 1)
            IcsUsrDat = Pack.Strip(DataStream, 6)
            DirDwnDat = Pack.Strip(DataStream, 12)
            NomAltFlg = Pack.Strip(DataStream, 1)
            NomPyrFlg = Pack.Strip(DataStream, 1)
            NomDocExp = Pack.Strip(DataStream, 8)
            NomNum = Pack.Strip(DataStream, 3)
            SmsAutFlg = Pack.Strip(DataStream, 1)
            NomPwdRst = Pack.Strip(DataStream, 1)
            SofTknFlg = Pack.Strip(DataStream, 1)
            NomDob = Pack.Strip(DataStream, 8)
            Rsv2 = Pack.Strip(DataStream, 6)
        End Sub


    End Structure



    Public Structure SecDevDat_Struct '0 Msg #6123213
        Dim SecDevFlg As String '1x				Desc: Flag (Y/N) to indicate if a security token is issued
        Dim SecDevAct As String '1x				Desc: Flag (Y/N) to indicate if a security token is active
        Dim SecDevIde As String '8x				Desc: Identity number (serial number of the identity token)
        Dim SecDevVnd As String '3x				Desc: Security device vendor: RSA=RSA, VSC=Vasco
        Dim RsvDat21 As String '19x				Desc: Reserved (space filled)

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(SecDevFlg, 1)
            st &= Pack.PackString(SecDevAct, 1)
            st &= Pack.PackString(SecDevIde, 8)
            st &= Pack.PackString(SecDevVnd, 3)
            st &= Pack.PackString(RsvDat21, 19)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            SecDevFlg = Pack.Strip(DataStream, 1)
            SecDevAct = Pack.Strip(DataStream, 1)
            SecDevIde = Pack.Strip(DataStream, 8)
            SecDevVnd = Pack.Strip(DataStream, 3)
            RsvDat21 = Pack.Strip(DataStream, 19)
        End Sub
    End Structure



    'Structures for Corporate Nominee
    Public Structure CorpNomReg_Struct
        'Dim IcsUsrTyp As String
        'Dim IcsCusNum As String
        Dim TabRowVer As String

        'Corporate Nominee Structure 300x
        Dim NomUsrKey As String     '10x Internet user identity part (host UsrKey, IBKUseIde)
        Dim NomCrpKey As String     '10x Internet corporate identity part (host CorKey)
        Dim NomCusNum As String     '6n	Customer number of the corporate
        Dim NomNamEng As String     '35x Nominee name in English (host IBKEngNam, IBKEnrNam)
        Dim NomNamAra As String     '35x Nominee name in Arabic (host IBKArbNam)
        'NomCid  '14x Nominee identity (host NomNatIde)
        Dim NomNatCde As String     '2x	Nominee nationality code
        Dim NomDocTyp As String     '2x	Nominee identity document type
        Dim NomDocNum As String     '10x Nominee identity document number
        Dim NomLngCde As String     '1x	Preferred language (A=Arabic, E=English) (host IBKLngCde)
        Dim NomEmlAdd As String     '50x E-mail address (host AppSmtp)
        Dim NomTelOff As String     '25x Office phone number (host AppTelOff)
        Dim NomTelMob As String     '25x Mobile phone number (host AppTelMob)
        Dim NomTrxPwd As String     '1x	Flag (Y/N) transaction password will be used (host CcfTrxPwd)
        Dim NomTrxTok As String     '1x	Flag (Y/N) transaction token will be used (host SecDevFlg)
        Dim DivIde As String        '10x Department name or "*ALL" (host DepIde)
        Dim LimSchIde As String     '10x Limit scheme name (host LimSchIde)
        Dim RolIde As String        '10x Role name (host LocIde)
        Dim MenPrfIde As String     '8x	Menu profile name (host UsePrfNam)
        Dim ActFlg As String        '1x	Activation flag: A=Active, S=Stopped, D=Denied (host UseSta) “I” = Inactive waiting Registration authorization “P” =  Inactive waiting Password change authorization“T” = Inactive for Tanfeeth Block
        Dim IcsUsrDat As String        '6x	Refer to decoding
        Dim Rsv2 As String          '48x Reserved for future use, space filled

    End Structure

    Public Structure CorpChlGrp_Struct
        Dim TabRowVer As String
        Dim CusNumPrm As String
        Dim CusNumLnk As String
        Dim Rsv1 As String
        Dim CusNumSec() As String
    End Structure

    Public Structure CorpDat_Struct
        Dim CorUseFlg As String
        Dim CorChnNam As String
        Dim CorLimIde As String
        Dim IcsCusNum As String
        Dim IcsCorKey As String
        Dim IcsUsrKey As String
        Dim IcsEnrNam As String
        Dim IcsCusTyp As String
        Dim IcsCusSeg As String
        Dim CntFlg As String
        Dim CntDep() As Integer
        Dim CntNom() As Integer
        Dim CntRul() As Integer
        Dim Rsv20 As String '17x	Reserved for future use, space filled
        Dim SwfChgOur As String '1x	Flag (Y/N) corporate may set SWIFT charges to “OUR”
        Dim CorXfrChg As String '3x	Corporate transfer (SWIFT/Sarie singleton) charges category
        Dim CorStpSar As String '1x	Flag (N/Y or space) to indicate STP SARIE is allowed
        Dim CorStpSwf As String '1x	Flag (N/Y or space) to indicate STP SWIFT is allowed
        Dim LimQtlTrx As String '10	IPS Quick Transfer limit or referred as Proxy Limit (in whole SAR) Space or Zero indicates IPS quick transfer function should be disabled.
        Dim Rsv21 As String '113	Reserved for future use, space filled

        Public Sub ReadTable(ByRef DataStream As String)
            CorUseFlg = AppInstance.strip(DataStream, 1)
            CorChnNam = AppInstance.strip(DataStream, 10)
            CorLimIde = AppInstance.strip(DataStream, 10)
            IcsCusNum = AppInstance.strip(DataStream, 6)
            IcsCorKey = AppInstance.strip(DataStream, 10)
            IcsUsrKey = AppInstance.strip(DataStream, 10)
            IcsEnrNam = AppInstance.strip(DataStream, 35)
            IcsCusTyp = AppInstance.strip(DataStream, 2)
            IcsCusSeg = AppInstance.strip(DataStream, 1)
            CntFlg = AppInstance.strip(DataStream, 1)
            ReDim CntDep(1)
            ReDim CntNom(1)
            ReDim CntRul(1)

            If CntFlg = "Y" Then
                CntDep(0) = CType(AppInstance.strip(DataStream, 3), Integer)
                CntDep(1) = CType(AppInstance.strip(DataStream, 3), Integer)
                CntNom(0) = CType(AppInstance.strip(DataStream, 3), Integer)
                CntNom(1) = CType(AppInstance.strip(DataStream, 3), Integer)
                CntRul(0) = CType(AppInstance.strip(DataStream, 3), Integer)
                CntRul(1) = CType(AppInstance.strip(DataStream, 3), Integer)
                AppInstance.strip(DataStream, 6)
            Else
                AppInstance.strip(DataStream, 24)
            End If

            Rsv20 = AppInstance.strip(DataStream, 17)
            SwfChgOur = AppInstance.strip(DataStream, 1)
            CorXfrChg = AppInstance.strip(DataStream, 3)
            CorStpSar = AppInstance.strip(DataStream, 1)
            CorStpSwf = AppInstance.strip(DataStream, 1)
            LimQtlTrx = AppInstance.strip(DataStream, 10)
            Rsv21 = AppInstance.strip(DataStream, 113)
        End Sub
    End Structure

    Public Structure CorpCibUserStatus_Struct
        Dim CusNum As String '6x	o	Customer number
        Dim NomCorKey As String '10x	o	Corporate identity
        Dim NomUsrKey As String '10x	o	Nominee user identity
        Dim NomNam As String '35x	o	User name
        Dim ActFlg As String '1x	o	Nominee activation flag: A=Active, S=Stopped, D=Denied
        Dim NomLogFlg As String '1x	o	Logon state: L=logged in, N=not logged in
        Dim NomLogStp As String '14x	o	Date and time of this login (YYYYMMDDhhmmss)
        Dim Rsv300 As String '11x	o	Reserved, space filled

        Public Sub ReadTable(ByRef DataStream As String)
            CusNum = AppInstance.strip(DataStream, 6)
            NomCorKey = AppInstance.strip(DataStream, 10)
            NomUsrKey = AppInstance.strip(DataStream, 10)
            NomNam = AppInstance.strip(DataStream, 35)
            ActFlg = AppInstance.strip(DataStream, 1)
            NomLogFlg = AppInstance.strip(DataStream, 1)
            NomLogStp = AppInstance.strip(DataStream, 14)
            Rsv300 = AppInstance.strip(DataStream, 11)
        End Sub
    End Structure

    <Serializable()> _
    Public Structure CorSvcTme_Struct
        'SvcTme	8
        Dim SvcTmeBeg As String '4x	o	Start working day (format HHMM)
        Dim SvcTmeEnd As String '4x	o	End working day (format HHMM)
    End Structure

    <Serializable()> _
    Public Structure CorSvcDat_Struct   '94	Corporate service data
        'CorSvcDat	
        Dim TabRowVer As String         '12x	Table row version
        Dim SvcTme1 As CorSvcTme_Struct '7*8x	•	A list of seven working days (Sat[1] to Fri[7])
        Dim SvcTme2 As CorSvcTme_Struct '7*8x	•	A list of seven working days (Sat[1] to Fri[7])
        Dim SvcTme3 As CorSvcTme_Struct '7*8x	•	A list of seven working days (Sat[1] to Fri[7])
        Dim SvcTme4 As CorSvcTme_Struct '7*8x	•	A list of seven working days (Sat[1] to Fri[7])
        Dim SvcTme5 As CorSvcTme_Struct '7*8x	•	A list of seven working days (Sat[1] to Fri[7])
        Dim SvcTme6 As CorSvcTme_Struct '7*8x	•	A list of seven working days (Sat[1] to Fri[7])
        Dim SvcTme7 As CorSvcTme_Struct '7*8x	•	A list of seven working days (Sat[1] to Fri[7])
        Dim SvcTrxSta As String         '1x	•	Transaction service status:	“C” = Closed, “O” = Open
        Dim SvcEnqSta As String         '1x	•	Enquiry service status:		“C” = Closed, “O” = Open
        Dim SvcEnqStp As String         '14x	•	Date and time changed (YYYYMMDDhhmmss)
        Dim SvcEnqWho As String         '10x	•	Who changed (user identity)

        Public Sub ReadTable(ByRef DataStream As String)
            TabRowVer = AppInstance.strip(DataStream, 12)

            SvcTme1.SvcTmeBeg = AppInstance.strip(DataStream, 4)
            SvcTme1.SvcTmeEnd = AppInstance.strip(DataStream, 4)
            SvcTme2.SvcTmeBeg = AppInstance.strip(DataStream, 4)
            SvcTme2.SvcTmeEnd = AppInstance.strip(DataStream, 4)
            SvcTme3.SvcTmeBeg = AppInstance.strip(DataStream, 4)
            SvcTme3.SvcTmeEnd = AppInstance.strip(DataStream, 4)
            SvcTme4.SvcTmeBeg = AppInstance.strip(DataStream, 4)
            SvcTme4.SvcTmeEnd = AppInstance.strip(DataStream, 4)
            SvcTme5.SvcTmeBeg = AppInstance.strip(DataStream, 4)
            SvcTme5.SvcTmeEnd = AppInstance.strip(DataStream, 4)
            SvcTme6.SvcTmeBeg = AppInstance.strip(DataStream, 4)
            SvcTme6.SvcTmeEnd = AppInstance.strip(DataStream, 4)
            SvcTme7.SvcTmeBeg = AppInstance.strip(DataStream, 4)
            SvcTme7.SvcTmeEnd = AppInstance.strip(DataStream, 4)

            SvcTrxSta = AppInstance.strip(DataStream, 1)
            SvcEnqSta = AppInstance.strip(DataStream, 1)
            SvcEnqStp = AppInstance.strip(DataStream, 14)
            SvcEnqWho = AppInstance.strip(DataStream, 10)
        End Sub

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(TabRowVer, 12)

            st &= Pack.PackString(SvcTme1.SvcTmeBeg, 4)
            st &= Pack.PackString(SvcTme1.SvcTmeEnd, 4)
            st &= Pack.PackString(SvcTme2.SvcTmeBeg, 4)
            st &= Pack.PackString(SvcTme2.SvcTmeEnd, 4)
            st &= Pack.PackString(SvcTme3.SvcTmeBeg, 4)
            st &= Pack.PackString(SvcTme3.SvcTmeEnd, 4)
            st &= Pack.PackString(SvcTme4.SvcTmeBeg, 4)
            st &= Pack.PackString(SvcTme4.SvcTmeEnd, 4)
            st &= Pack.PackString(SvcTme5.SvcTmeBeg, 4)
            st &= Pack.PackString(SvcTme5.SvcTmeEnd, 4)
            st &= Pack.PackString(SvcTme6.SvcTmeBeg, 4)
            st &= Pack.PackString(SvcTme6.SvcTmeEnd, 4)
            st &= Pack.PackString(SvcTme7.SvcTmeBeg, 4)
            st &= Pack.PackString(SvcTme7.SvcTmeEnd, 4)

            st &= Pack.PackString(SvcTrxSta, 1)
            st &= Pack.PackString(SvcEnqSta, 1)
            st &= Pack.PackString(SvcEnqStp, 14)
            st &= Pack.PackString(SvcEnqWho, 10)
            Return st
        End Function
    End Structure

#Region "Messages"

    Public Function SendMessage_GetCibUserStatus(ByVal CusNum As String, ByVal IncLogUsr As String, ByVal IncLofUsr As String) As String
        Dim st As String = String.Empty
        st &= Pack.PackNString(CusNum, 6)
        st &= Pack.PackNString(IncLogUsr, 1)
        st &= Pack.PackNString(IncLofUsr, 1)
        st &= Pack.PackString(" ", 24)
        Return AppInstance.SendMessageVisuallyEx("200020", st, "CUS", CusNum, "", "")
    End Function

    Public Function SendMessage_GetCorSvcStatus(ByVal CusNum As String) As String
        Dim st As String = String.Empty
        st &= Pack.PackNString(CusNum, 6)
        st &= Pack.PackString(" ", 26)
        Return AppInstance.SendMessageVisuallyEx("200030", st, "CUS", CusNum, "", "")
    End Function

    Public Function SendMessage_SetCorSvcStatus(ByVal CusNum As String, ByVal CorSvcDat As CorSvcDat_Struct) As String
        Dim st As String = String.Empty
        st &= Pack.PackNString(CusNum, 6)
        st &= Pack.PackString(" ", 26)
        st &= CorSvcDat.PackTable()
        st &= Pack.PackString(" ", 34)
        Return AppInstance.SendMessageVisuallyEx("200040", st, "CUS", CusNum, "", "")
    End Function

    Public Function SendMessage_EnumerateCorpDep(ByVal CusNum As String, ByVal CavList As String) As String
        Dim MsgData As String

        Try
            CusNum = AppInstance.PackNSString(CusNum, 6, False)
            MsgData = CusNum & AppInstance.PackString(CavList, 10) & AppInstance.PackString("", 16)
        Catch ex As Exception
            Return Nothing
        End Try
        Return AppInstance.SendMessageVisuallyEx("200050", MsgData, "CUS", CusNum, "", "")
    End Function

    Public Function SendMessage_CreateCorpDep(ByRef CoDep As Corp_DepAccDat_Struct) As String
        Dim st As String = String.Empty

        Try

            st &= AppInstance.PackString(CoDep.CusNum, 6)
            st &= AppInstance.PackString("", 6) 'Rsv10
            st &= AppInstance.PackString("", 12) 'Rsv12
            st &= AppInstance.PackString("", 8) 'Rsv04

            st &= CoDep.PackTable()


        Catch ex As Exception
            Return Nothing
        End Try
        Return AppInstance.SendMessageVisuallyEx("200060", st, "CUS", CoDep.CusNum, "", "")
    End Function

    Public Function SendMessage_ModifyCorpDep(ByRef p_Struct As Corp_DepAccDat_ItmDat_Struct) As String
        Dim st As String = String.Empty

        Try
            'CusNum()
            'Rsv10()
            'TabRowVer()
            'Rsv04()

            st &= AppInstance.PackString(p_Struct.DepAccDat.CusNum, 6)
            st &= AppInstance.PackString("", 6)
            st &= AppInstance.PackString(p_Struct.TabRowVer, 12)
            st &= AppInstance.PackString("", 8)

            st &= p_Struct.DepAccDat.PackTable()
            Return AppInstance.SendMessageVisuallyEx("200070", st, "CUS", p_Struct.DepAccDat.CusNum, "", "")

        Catch ex As Exception
            Return Nothing
        End Try
    End Function

    Public Function SendMessage_DeleteCorpDep(ByRef p_Struct As Corp_DepAccDat_ItmDat_Struct) As String
        Dim MsgData As String = String.Empty

        Try
            MsgData &= AppInstance.PackString(p_Struct.DepAccDat.CusNum, 6)
            MsgData &= AppInstance.PackString("", 6)
            MsgData &= AppInstance.PackString(p_Struct.TabRowVer, 12)
            MsgData &= AppInstance.PackString("", 8)

            MsgData &= p_Struct.DepAccDat.PackTable()

        Catch ex As Exception
            Return Nothing
        End Try
        Return AppInstance.SendMessageVisuallyEx("200080", MsgData, "CUS", p_Struct.DepAccDat.CusNum, "", "")
    End Function

    Public Function SendMessage_SetCorWorkHours(ByVal CusNum As String, ByVal CorSvcDat As CorSvcDat_Struct) As String
        Dim st As String = String.Empty
        st &= Pack.PackNString(CusNum, 6)
        st &= Pack.PackString(" ", 26)
        st &= CorSvcDat.PackTable()
        st &= Pack.PackString(" ", 34)
        Return AppInstance.SendMessageVisuallyEx("200090", st, "CUS", CusNum, "", "")
    End Function

    Public Function SendMessage_CreateCorpLimSch(ByVal SchTyp As String, ByRef LimSchDat As LimSchDat_Struct) As String
        Dim MsgData As String

        Try
            With LimSchDat
                MsgData = AppInstance.PackString(SchTyp, 2)
                MsgData &= AppInstance.PackString(.LimSchIde, 10)
                MsgData &= AppInstance.PackString(.LimSchAct, 1)
                MsgData &= AppInstance.PackNSString(.LimDlyCnt, 5, False)
                MsgData &= AppInstance.PackNSString(.LimDlyAmt, 10, False)
                MsgData &= AppInstance.PackNSString(.LimMthCnt, 5, False)
                MsgData &= AppInstance.PackNSString(.LimMthAmt, 10, False)
                MsgData &= AppInstance.PackNSString(.LimSngTrx, 10, False)
            End With
        Catch ex As Exception
            Return Nothing
        End Try
        Return AppInstance.SendMessageVisuallyEx("200110", MsgData, "GEN", "", "", "")
    End Function

    Public Function SendMessage_ModifyCorpLimSch(ByVal SchTyp As String, ByRef LimSchDat As LimSchDat_Struct) As String
        Dim MsgData As String

        Try
            With LimSchDat
                MsgData = AppInstance.PackString(SchTyp, 2)
                MsgData &= AppInstance.PackString(.TabRowVer, 12)
                MsgData &= AppInstance.PackString(.LimSchIde, 10)
                MsgData &= AppInstance.PackString(.LimSchAct, 1)
                MsgData &= AppInstance.PackNSString(.LimDlyCnt, 5, False)
                MsgData &= AppInstance.PackNSString(.LimDlyAmt, 10, False)
                MsgData &= AppInstance.PackNSString(.LimMthCnt, 5, False)
                MsgData &= AppInstance.PackNSString(.LimMthAmt, 10, False)
                MsgData &= AppInstance.PackNSString(.LimSngTrx, 10, False)
            End With
        Catch ex As Exception
            Return Nothing
        End Try
        Return AppInstance.SendMessageVisuallyEx("200120", MsgData, "GEN", "", "", "")
    End Function

    Public Function SendMessage_DeleteCorpLimSch(ByVal SchTyp As String, ByRef LimSchDat As LimSchDat_Struct) As String
        Dim MsgData As String

        Try
            With LimSchDat
                MsgData = AppInstance.PackString(SchTyp, 2)
                MsgData &= AppInstance.PackString(.TabRowVer, 12)
                MsgData &= AppInstance.PackString(.LimSchIde, 10)
                MsgData &= AppInstance.PackString(.LimSchAct, 1)
                MsgData &= AppInstance.PackNSString(.LimDlyCnt, 5, False)
                MsgData &= AppInstance.PackNSString(.LimDlyAmt, 10, False)
                MsgData &= AppInstance.PackNSString(.LimMthCnt, 5, False)
                MsgData &= AppInstance.PackNSString(.LimMthAmt, 10, False)
                MsgData &= AppInstance.PackNSString(.LimSngTrx, 10, False)
            End With
        Catch ex As Exception
            Return Nothing
        End Try
        Return AppInstance.SendMessageVisuallyEx("200130", MsgData, "GEN", "", "", "")
    End Function

    Public Function SendMessage_MaintainCorpMenuItems(ByVal MnuDat As CorpMnuItm_Struct) As String
        Dim MsgData As String
        Dim i, Count As Integer

        Try
            MsgData = MnuDat.PackTable()
        Catch ex As Exception
            Return Nothing
        End Try

        Return AppInstance.SendMessageVisuallyEx("202310", MsgData, "GEN", "", "", "")
    End Function

    Public Function SendMessage_EnumerateCorpRule(ByVal CusNum As String) As String
        Dim MsgData As String

        Try
            CusNum = AppInstance.PackString(CusNum, 6)
            MsgData = CusNum
        Catch ex As Exception
            Return Nothing
        End Try
        Return AppInstance.SendMessageVisuallyEx("202250", MsgData, "CUS", CusNum, "", "")
    End Function

    Public Function SendMessage_CreateCorpRule(ByRef CorpRul As CorpRulDat_Struct) As String
        Dim MsgData As String

        Try
            With CorpRul
                MsgData = AppInstance.PackString(.CusNum, 6)
                MsgData &= AppInstance.PackString("", 36)
                MsgData &= AppInstance.PackString(.CusNum, 6)
                MsgData &= AppInstance.PackNSString(.RulNum, 4, False)
                MsgData &= AppInstance.PackString(.ItmAct, 1)
                MsgData &= AppInstance.PackString(.RulDsc, 25)
                MsgData &= AppInstance.PackString(.RulTrxCde, 10)
                MsgData &= AppInstance.PackNSString(.RulAmtBeg, 10, False)
                MsgData &= AppInstance.PackNSString(.RulAmtEnd, 10, False)
                MsgData &= AppInstance.PackString(.RulAmtCcy, 3)
                MsgData &= AppInstance.PackString(.RulAut(0).RolAut, 10)
                MsgData &= AppInstance.PackString(.RulAut(0).NumAut, 1)
                MsgData &= AppInstance.PackString(.RulAut(1).RolAut, 10)
                MsgData &= AppInstance.PackString(.RulAut(1).NumAut, 1)
                MsgData &= AppInstance.PackString(.RulAut(2).RolAut, 10)
                MsgData &= AppInstance.PackString(.RulAut(2).NumAut, 1)
            End With
        Catch ex As Exception
            Return Nothing
        End Try
        Return AppInstance.SendMessageVisuallyEx("202260", MsgData, "CUS", CorpRul.CusNum, "", "")
    End Function

    Public Function SendMessage_ModifyCorpRule(ByRef CorpRul As CorpRulDat_Struct) As String
        Dim MsgData As String

        Try
            MsgData = CorpRul.PackTable
        Catch ex As Exception
            Return Nothing
        End Try
        Return AppInstance.SendMessageVisuallyEx("202270", MsgData, "CUS", CorpRul.CusNum, "", "")
    End Function

    Public Function SendMessage_DeleteCorpRule(ByRef CorpRul As CorpRulDat_Struct) As String
        Dim MsgData As String

        Try
            MsgData = CorpRul.PackTable
        Catch ex As Exception
            Return Nothing
        End Try
        Return AppInstance.SendMessageVisuallyEx("202280", MsgData, "CUS", CorpRul.CusNum, "", "")
    End Function

    Public Function SendMessage_MaintainCorpTrx(ByRef CorpTrx As CorpTrxDat_Struct) As String
        Dim MsgData As String
        Dim i, Count As Integer

        Try
            With CorpTrx
                MsgData = AppInstance.PackString(.TabRowver, 12)
                MsgData &= AppInstance.PackString("", 24)
                If CorpTrx.CorpTrxDat Is Nothing Then Count = 0 Else Count = CType(CorpTrx.CorpTrxDat.Length, Integer)
                MsgData &= AppInstance.PackNString(CStr(Count), 3)
                If Count > 0 Then
                    For i = 0 To Count - 1
                        MsgData &= AppInstance.PackString(.CorpTrxDat(i).CorTrxIde, 10)
                        MsgData &= AppInstance.PackString(.CorpTrxDat(i).CorTrxAut, 1)
                        MsgData &= AppInstance.PackString(.CorpTrxDat(i).CorTrxDsc, 30)
                    Next
                End If

            End With
        Catch ex As Exception
            Return Nothing
        End Try

        Return AppInstance.SendMessageVisuallyEx("202360", MsgData, "GEN", "", "", "")
    End Function

    Public Function SendMessage_GetMnuPrfDetail(ByVal MnuPrfIde As String) As String
        Dim MsgData As String
        Try
            MsgData = AppInstance.PackString(MnuPrfIde, 8)

        Catch ex As Exception
            Return Nothing
        End Try

        Return AppInstance.SendMessageVisuallyEx("202330", MsgData, "GEN", "", "", "")
    End Function

    Public Function SendMessage_MaintainCorpMnuPrf(ByRef MunPrfDtl As CorpMnuPrfDetail_Struct) As String
        Dim MsgData As String
        Dim i, Count As Integer

        Try
            With MunPrfDtl
                MsgData &= AppInstance.PackString(.MnuPrfIde, 8)
                MsgData &= AppInstance.PackString(.TabRowver, 12)
                MsgData &= AppInstance.PackString("", 32)
                MsgData &= AppInstance.PackString(.MnuPrfDsc, 25)
                If (.CorpMnuDat Is Nothing) Then Count = 0 Else Count = CType(MunPrfDtl.CorpMnuDat.Length, Integer)

                MsgData &= AppInstance.PackNSString(CStr(Count), 3, False)
                If Count > 0 Then
                    For i = 0 To Count - 1
                        MsgData &= AppInstance.PackString(.CorpMnuDat(i).MnuPrfIde, 8)
                        MsgData &= AppInstance.PackString(.CorpMnuDat(i).MnuItmIde, 10)
                        MsgData &= AppInstance.PackString(.CorpMnuDat(i).MnuItmSee, 1)
                        MsgData &= AppInstance.PackString(.CorpMnuDat(i).MunItmEnt, 1)
                        MsgData &= AppInstance.PackString(.CorpMnuDat(i).MunItmAut, 1)
                    Next
                End If

            End With
        Catch ex As Exception
            Return Nothing
        End Try

        Return AppInstance.SendMessageVisuallyEx("202340", MsgData, "GEN", "", "", "")
    End Function

    '*New Messages*****************************************************
    '* Corporate Nominees Related Send Messages ***********************
    '612280: Enumerate Corporate Clients (Nominees)
    Public Function SendMessage_EnumCorpNom(ByVal CusNum As String, ByVal UsrType As String) As String
        Dim MsgData As String

        Try
            MsgData = AppInstance.PackString(CusNum, 6)
            MsgData &= AppInstance.PackString(UsrType, 10)
            MsgData &= AppInstance.PackString("", 16)
        Catch ex As Exception
            Return Nothing
        End Try
        Return AppInstance.SendMessageVisuallyEx("612280", MsgData, "CUS", MsgData, CusNum, "")
    End Function


    Public Function SendMessage_StopCorpNom(ByRef p_ItmGrp As Nominees_ItmGrp_Struct) As String
        Dim MsgData As String

        Try
            With p_ItmGrp.NomRegExt.NomRegDat
                'NewRowver
                MsgData = AppInstance.PackString(.NomUsrKey, 10)
                MsgData &= AppInstance.PackString(.NomCrpKey, 10)
                MsgData &= AppInstance.PackString(p_ItmGrp.TabRowVer, 12)
                MsgData &= AppInstance.PackString("", 32)
                'Nominee data structure here

                MsgData &= .PackTable
            End With
        Catch ex As Exception
            Return Nothing
        End Try
        Return AppInstance.SendMessageVisuallyEx("612290", MsgData, "GEN", "", "", "")
    End Function

    '* Corporate Channel Groups *************************************
    '200000: Request: Link customer to channel group
    Public Function SendMessage_LinkCustGroup(ByRef CusGrp As CorpChlGrp_Struct) As String
        Dim MsgData As String

        Try
            With CusGrp
                MsgData = MsgData & AppInstance.PackString(CusGrp.TabRowVer, 12)
                MsgData &= AppInstance.PackString(CusGrp.CusNumPrm, 6)
                MsgData &= AppInstance.PackString(CusGrp.CusNumLnk, 6)
                MsgData &= AppInstance.PackString(CusGrp.Rsv1, 20)
            End With
        Catch ex As Exception
            Return Nothing
        End Try

        Return AppInstance.SendMessageVisuallyEx("200000", MsgData, "GEN", "", "", "")
    End Function

    '200010: Request: De-link customer from channel group
    Public Function SendMessage_DeLinkCustGroup(ByRef CusGrp As CorpChlGrp_Struct) As String
        Dim MsgData As String

        Try
            With CusGrp
                MsgData = MsgData & AppInstance.PackString(CusGrp.TabRowVer, 12)
                MsgData &= AppInstance.PackString(CusGrp.CusNumPrm, 6)
                MsgData &= AppInstance.PackString(CusGrp.CusNumLnk, 6)
                MsgData &= AppInstance.PackString(CusGrp.Rsv1, 20)
            End With
        Catch ex As Exception
            Return Nothing
        End Try

        Return AppInstance.SendMessageVisuallyEx("200010", MsgData, "GEN", "", "", "")
    End Function

    '* Corporate Setup  *********************************
    '****************************************************
    '*Message 612180: Establish a new Corporate Setup
    '****************************************************

    Public Function SendMessage_CreateCorp(ByRef CorDat As CorpDat_Struct, ByVal p_IcsUserType As String) As String
        Dim MsgData As String

        Try
            With CorDat
                MsgData = MsgData & AppInstance.PackString(p_IcsUserType, 6)
                MsgData &= AppInstance.PackString(CorDat.IcsCusNum, 6)
                MsgData &= AppInstance.PackString("", 52)
                MsgData &= AppInstance.PackString(CorDat.CorUseFlg, 1)
                MsgData &= AppInstance.PackString(CorDat.CorChnNam, 10)
                MsgData &= AppInstance.PackString(CorDat.CorLimIde, 10)
                MsgData &= AppInstance.PackString("", 65)
                MsgData &= AppInstance.PackNSString("0", 24, False)
                MsgData &= AppInstance.PackString("", 17)
                MsgData &= AppInstance.PackString(CorDat.SwfChgOur, 1)
                MsgData &= AppInstance.PackString(CorDat.CorXfrChg, 3)
                MsgData &= AppInstance.PackString(CorDat.CorStpSar, 1)
                MsgData &= AppInstance.PackString(CorDat.CorStpSwf, 1)
                MsgData &= AppInstance.PackString(CorDat.LimQtlTrx, 10)
                MsgData &= AppInstance.PackString("", 113)

            End With
        Catch ex As Exception
            Return Nothing
        End Try

        Return AppInstance.SendMessageVisuallyEx("612180", MsgData, "CUS", CorDat.IcsCusNum, "", "")
    End Function
    '****************************************************
    '*Message 612190: Modify Corporate Setup
    '****************************************************
    Public Function SendMessage_ModifyCorp(ByRef CorDat As CorpDat_Struct, ByVal p_IcsUserType As String) As String
        Dim MsgData As String

        Try
            With CorDat
                MsgData = MsgData & AppInstance.PackString(p_IcsUserType, 6)
                MsgData &= AppInstance.PackString(CorDat.IcsCusNum, 6)
                MsgData &= AppInstance.PackString("", 52)
                MsgData &= AppInstance.PackString(CorDat.CorUseFlg, 1)
                MsgData &= AppInstance.PackString(CorDat.CorChnNam, 10)
                MsgData &= AppInstance.PackString(CorDat.CorLimIde, 10)
                MsgData &= AppInstance.PackString(CorDat.IcsCusNum, 6)
                MsgData &= AppInstance.PackString(CorDat.IcsCorKey, 10)
                MsgData &= AppInstance.PackString(CorDat.IcsUsrKey, 10)
                MsgData &= AppInstance.PackString(CorDat.IcsEnrNam, 35)
                MsgData &= AppInstance.PackString(CorDat.IcsCusTyp, 2)
                MsgData &= AppInstance.PackString(CorDat.IcsCusSeg, 1)
                MsgData &= AppInstance.PackString(CorDat.CntFlg, 1)
                If CorDat.CntFlg = "Y" Then
                    MsgData &= AppInstance.PackNSString(CStr(CorDat.CntDep(0)), 3, False)
                    MsgData &= AppInstance.PackNSString(CStr(CorDat.CntDep(1)), 3, False)
                    MsgData &= AppInstance.PackNSString(CStr(CorDat.CntNom(0)), 3, False)
                    MsgData &= AppInstance.PackNSString(CStr(CorDat.CntNom(1)), 3, False)
                    MsgData &= AppInstance.PackNSString(CStr(CorDat.CntRul(0)), 3, False)
                    MsgData &= AppInstance.PackNSString(CStr(CorDat.CntRul(1)), 3, False)
                    MsgData &= AppInstance.PackNSString("0", 6, False)
                Else
                    MsgData &= AppInstance.PackNSString("0", 24, False)
                End If

                MsgData &= AppInstance.PackString("", 17)
                MsgData &= AppInstance.PackString(CorDat.SwfChgOur, 1)
                MsgData &= AppInstance.PackString(CorDat.CorXfrChg, 3)
                MsgData &= AppInstance.PackString(CorDat.CorStpSar, 1)
                MsgData &= AppInstance.PackString(CorDat.CorStpSwf, 1)
                MsgData &= AppInstance.PackString(CorDat.LimQtlTrx, 10)
                MsgData &= AppInstance.PackString("", 113)
            End With
        Catch ex As Exception
            Return Nothing
        End Try

        Return AppInstance.SendMessageVisuallyEx("612190", MsgData, "CUS", CorDat.IcsCusNum, "", "")
    End Function

    '****************************************************
    '*Enumerate Corporate Entities (612060)
    '****************************************************
    Public Function SendMessage_EnumCorp(ByVal IcsCusNum As String, ByVal IcsCusTyp As String, Optional ByVal ReqCountFlg As String = "Y") As String
        Dim MsgData As String

        Try
            MsgData = MsgData & AppInstance.PackString(IcsCusTyp, 6)
            MsgData = MsgData & AppInstance.PackString(IcsCusNum, 6)
            MsgData = MsgData & AppInstance.PackString(ReqCountFlg, 1)
            MsgData = MsgData & AppInstance.PackString("", 47 + 4)
        Catch ex As Exception
            Return Nothing
        End Try
        Return AppInstance.SendMessageVisuallyEx("612060", MsgData, "GEN", IcsCusNum, "", "")
    End Function

    '****************************
    'Get Messages start here
    '***************************

    Public Function GetMessage_GetCibUserStatus(ByVal MsgId As String, ByRef CibItm() As CorpCibUserStatus_Struct, ByRef CibLonUsr As Integer, ByRef CibLofUsr As Integer) As Boolean
        Dim resp As String = String.Empty
        Dim i, count As Integer
        Dim tmpStr As String

        If Not (GetMessage_Common("200020", "", MsgId, &H81000298, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 32) 'Request Data
            AppInstance.strip(resp, 50) ' Reserved

            CibLonUsr = AppInstance.ExInt(AppInstance.strip(resp, 5))
            CibLofUsr = AppInstance.ExInt(AppInstance.strip(resp, 5))

            count = AppInstance.ExInt(AppInstance.strip(resp, 4))
            If count <= 0 Then
                Erase CibItm
                CibItm = Nothing
                Return True
            End If
            ReDim CibItm(count - 1)
            For i = 0 To CibItm.Length - 1
                tmpStr = AppInstance.strip(resp, 88)
                CibItm(i).ReadTable(tmpStr)
            Next
        Catch ex As Exception
            HandleError(&H81000299, "GetMessage_GetCibUserStatus:" & ex.Message)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_GetCorSvcStatus(ByVal MsgId As String, ByRef CorSvcDat As CorSvcDat_Struct) As Boolean
        Dim resp As String = String.Empty
        Dim i, count As Integer
        Dim tmpStr As String

        If Not (GetMessage_Common("200030", "", MsgId, &H81000298, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 32) 'Request Data
            CorSvcDat.ReadTable(resp) '94x Corporate Service Status
            AppInstance.strip(resp, 34) ' Reserved
        Catch ex As Exception
            HandleError(&H81000299, "GetMessage_GetCorSvcStatus:" & ex.Message)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_SetCorSvcStatus(ByVal MsgId As String, ByRef CorSvcDat As CorSvcDat_Struct) As Boolean
        Dim resp As String = String.Empty
        Dim i, count As Integer
        Dim tmpStr As String

        If Not (GetMessage_Common("200040", "", MsgId, &H81000298, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 32) 'Request Data
            CorSvcDat.ReadTable(resp) '94x Corporate Service Status
            AppInstance.strip(resp, 34) ' Reserved
        Catch ex As Exception
            HandleError(&H81000299, "GetMessage_SetCorSvcStatus:" & ex.Message)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_EnumerateCorpDept(ByVal MsgId As String, ByRef DepDat() As Corp_DepAccDat_ItmDat_Struct) As Boolean
        Dim resp As String = String.Empty
        Dim i, count As Integer
        Dim tmpStr As String

        DepDat = Nothing
        If Not (GetMessage_Common("200050", "", MsgId, &H81000298, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            'Added By Sofyan
            AppInstance.strip(resp, 6) 'Requested Customer number
            AppInstance.strip(resp, 6) ' Requested Type of Internet user (corporate or CAV) or spaces for both
            AppInstance.strip(resp, 20) 'Reserved

            count = CType(AppInstance.strip(resp, 4), Integer)
            If count <= 0 Then
                Erase DepDat
                Return True
            End If
            ReDim DepDat(count - 1)
            For i = 0 To DepDat.Length - 1
                tmpStr = AppInstance.strip(resp, 83)
                DepDat(i).ReadTable(tmpStr)
            Next
        Catch ex As Exception
            HandleError(&H81000299, "GetMessage_EnumerateCorpDept:" & ex.Message)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_CreateCorpDept(ByVal MsgId As String) As Boolean
        Dim resp As String = String.Empty
        Dim TabRowVer As String

        If Not (GetMessage_Common("200060", "", MsgId, &H81000300, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 6 + 6) 'Reserved
            TabRowVer = AppInstance.strip(resp, 12)  'Tab Row version
            AppInstance.strip(resp, 8)   'Reserved
            AppInstance.strip(resp, 71) 'DepAccDat
            If TabRowVer <> "000000000000" Then
                Return True
            Else
                Return False
            End If
        Catch ex As Exception
            HandleError(&H81000301, "GetMessage_CreateCorpDept:" & ex.Message)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_ModifyCorpDept(ByVal MsgId As String, ByRef MsgRspDat As Corp_DepAccDat_Struct) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("200070", "", MsgId, &H81000302, resp)) Then Return False
        Try

            AppInstance.strip(resp, 256)
            MsgRspDat.ReadTable(resp)

        Catch ex As Exception
            HandleError(&H81000286, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_ModifyFileUploadType1(ByVal MsgId As String, ByRef MsgRspDat As FileUploadType_Struct) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("200250", "", MsgId, &H81000286, resp)) Then Return False
        Try

            AppInstance.strip(resp, 256)
            MsgRspDat.ReadTable(resp)

        Catch ex As Exception
            HandleError(&H81000286, "Error:", "Error", ex)
            Return False
        End Try
        Return True

    End Function

    Public Function GetMessage_DeleteCorpDept(ByVal MsgId As String) As Boolean
        Dim resp As String = String.Empty
        Dim TabRowVer As String

        If Not (GetMessage_Common("200080", "", MsgId, &H81000304, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 6 + 6) 'Reserved
            TabRowVer = AppInstance.strip(resp, 12)  'Tab Row version
            AppInstance.strip(resp, 8)   'Reserved
            AppInstance.strip(resp, 71) 'DepAccDat
            If TabRowVer = "000000000000" Then
                Return True
            Else
                Return False
            End If
        Catch ex As Exception
            HandleError(&H81000305, "GetMessage_DeleteCorpDept:" & ex.Message)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_SetCorWorkHours(ByVal MsgId As String, ByRef CorSvcDat As CorSvcDat_Struct) As Boolean
        Dim resp As String = String.Empty
        Dim i, count As Integer
        Dim tmpStr As String

        If Not (GetMessage_Common("200090", "", MsgId, &H81000298, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 32) 'Request Data
            CorSvcDat.ReadTable(resp) '94x Corporate Service Status
            AppInstance.strip(resp, 34) ' Reserved
        Catch ex As Exception
            HandleError(&H81000299, "GetMessage_SetCorWorkHours:" & ex.Message)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_CreateCorpLimSch(ByVal MsgId As String) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("200110", "", MsgId, &H81000306, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 2) 'SchTyp
            AppInstance.strip(resp, 51) 'LimSchDatTable
        Catch ex As Exception
            HandleError(&H81000307, "GetMessage_CreateCorpLimtSchm:" & ex.Message)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_ModifyCorpLimtSchm(ByVal MsgId As String) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("200120", "", MsgId, &H81000308, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 2) 'SchTyp
            AppInstance.strip(resp, 12) 'TabRowVer
            AppInstance.strip(resp, 51) 'LimSchDatTable
        Catch ex As Exception
            HandleError(&H81000309, "GetMessage_ModifyCorpLimtSchm:" & ex.Message)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_DeleteCorpLimtSchm(ByVal MsgId As String) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("200130", "", MsgId, &H81000310, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 2) 'SchTyp
            AppInstance.strip(resp, 12) 'TabRowVer
            AppInstance.strip(resp, 51) 'LimSchDatTable
        Catch ex As Exception
            HandleError(&H81000311, "GetMessage_DeleteCorpLimtSchm:" & ex.Message)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_MaintainCorpMenuItems(ByVal msgId As String, ByRef MnuDat As CorpMnuItm_Struct) As Boolean
        Dim resp As String = String.Empty
        Dim tmpStr As String
        Dim i, count As Integer

        MnuDat = Nothing
        If Not (GetMessage_Common("202310", "", msgId, &H81000312, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            MnuDat.TabRowVer = AppInstance.strip(resp, 12)
            MnuDat.ChgStp = AppInstance.strip(resp, 14)
            MnuDat.ChgUid = AppInstance.strip(resp, 10)
            AppInstance.strip(resp, 25) 'Rsv390
            count = CType(AppInstance.strip(resp, 3), Integer)
            If count <= 0 Then
                MnuDat = Nothing
                Return True
            End If
            ReDim MnuDat.CorpMnuDat(count - 1)
            For i = 0 To MnuDat.CorpMnuDat.Length - 1
                tmpStr = AppInstance.strip(resp, 100)
                With MnuDat.CorpMnuDat(i)
                    .MnuItmIde = AppInstance.strip(tmpStr, 10)
                    .MnuItmDsc = AppInstance.strip(tmpStr, 70)
                    .MnuItmAll = AppInstance.strip(tmpStr, 1)
                    .MnuItmCsa = AppInstance.strip(tmpStr, 1)
                End With
                AppInstance.strip(tmpStr, 18)
            Next
        Catch ex As Exception
            HandleError(&H81000313, "GetMessage_MaintainCorpMenuItems:" & ex.Message)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_EnumerateCorpRule(ByVal MsgId As String, ByRef RulDat() As CorpRulDat_Struct) As Boolean
        Dim resp As String = String.Empty
        Dim tmpStr As String
        Dim i, count As Integer

        RulDat = Nothing
        If Not (GetMessage_Common("202250", "", MsgId, &H81000314, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 6) 'Requested Customer number
            count = CType(AppInstance.strip(resp, 4), Integer)
            If count <= 0 Then
                Erase RulDat
                Return True
            End If
            ReDim RulDat(count - 1)
            For i = 0 To RulDat.Length - 1
                tmpStr = AppInstance.strip(resp, 138)
                With RulDat(i)
                    .TabRowVer = AppInstance.strip(tmpStr, 12)
                    .SibStp = AppInstance.strip(tmpStr, 14)
                    .SibUsr = AppInstance.strip(tmpStr, 10)
                    .CusNum = AppInstance.strip(tmpStr, 6)
                    .RulNum = AppInstance.strip(tmpStr, 4)
                    .ItmAct = AppInstance.strip(tmpStr, 1)
                    .RulDsc = AppInstance.strip(tmpStr, 25)
                    .RulTrxCde = AppInstance.strip(tmpStr, 10)
                    .RulAmtBeg = AppInstance.strip(tmpStr, 10)
                    .RulAmtEnd = AppInstance.strip(tmpStr, 10)
                    .RulAmtCcy = AppInstance.strip(tmpStr, 3)
                    ReDim .RulAut(2)
                    .RulAut(0).RolAut = AppInstance.strip(tmpStr, 10)
                    .RulAut(0).NumAut = AppInstance.strip(tmpStr, 1)
                    .RulAut(1).RolAut = AppInstance.strip(tmpStr, 10)
                    .RulAut(1).NumAut = AppInstance.strip(tmpStr, 1)
                    .RulAut(2).RolAut = AppInstance.strip(tmpStr, 10)
                    .RulAut(2).NumAut = AppInstance.strip(tmpStr, 1)
                End With
            Next
        Catch ex As Exception
            HandleError(&H81000315, "GetMessage_EnumCorpRule:" & ex.Message)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_CreateCorpRule(ByVal MsgId As String) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("202260", "", MsgId, &H81000316, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 6) '
            AppInstance.strip(resp, 12) '
            AppInstance.strip(resp, 14) '
            AppInstance.strip(resp, 10) '
            AppInstance.strip(resp, 101) '

        Catch ex As Exception
            HandleError(&H81000317, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_ModifyCorpRule(ByVal MsgId As String) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("202270", "", MsgId, &H81000318, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 6) '
            AppInstance.strip(resp, 12) '
            AppInstance.strip(resp, 14) '
            AppInstance.strip(resp, 10) '
            AppInstance.strip(resp, 101) '

        Catch ex As Exception
            HandleError(&H81000319, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_DeleteCorpRule(ByVal MsgId As String) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("202280", "", MsgId, &H81000320, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 6) '
            AppInstance.strip(resp, 12) '
            AppInstance.strip(resp, 14) '
            AppInstance.strip(resp, 10) '
            AppInstance.strip(resp, 101) '

        Catch ex As Exception
            HandleError(&H81000321, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_MaintainCorpTrx(ByVal MsgId As String, ByRef TrxDat As CorpTrxDat_Struct) As Boolean
        Dim resp As String = String.Empty
        Dim tmpStr As String
        Dim i, count As Integer

        TrxDat = Nothing

        If Not (GetMessage_Common("202360", "", MsgId, &H81000322, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            TrxDat.TabRowver = AppInstance.strip(resp, 12)
            TrxDat.ChgStp = AppInstance.strip(resp, 14)
            TrxDat.ChgUid = AppInstance.strip(resp, 10)
            count = CType(AppInstance.strip(resp, 3), Integer)
            If count <= 0 Then
                TrxDat = Nothing
                Return True
            End If
            ReDim TrxDat.CorpTrxDat(count - 1)
            For i = 0 To TrxDat.CorpTrxDat.Length - 1
                tmpStr = AppInstance.strip(resp, 41)
                With TrxDat.CorpTrxDat(i)
                    .CorTrxDsc = AppInstance.strip(tmpStr, 10)
                    .CorTrxAut = AppInstance.strip(tmpStr, 1)
                    .CorTrxIde = AppInstance.strip(tmpStr, 30)
                End With
            Next
        Catch ex As Exception
            HandleError(&H81000323, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_GetMnuPrfDetail(ByVal MsgId As String, ByRef PrfDat As CorpMnuPrfDetail_Struct) As Boolean
        Dim resp As String = String.Empty
        Dim tmpStr As String
        Dim i, count As Integer

        PrfDat = Nothing

        If Not (GetMessage_Common("202230", "", MsgId, &H81000324, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            With PrfDat
                .MnuPrfIde = AppInstance.strip(resp, 8)
                .TabRowver = AppInstance.strip(resp, 12)
                .ChgStp = AppInstance.strip(resp, 14)
                .ChgUid = AppInstance.strip(resp, 10)
                .MnuPrfIde2 = AppInstance.strip(resp, 8)
                .MnuPrfDsc = AppInstance.strip(resp, 25)
                count = CType(AppInstance.strip(resp, 3), Integer)
                If count <= 0 Then
                    'PrfDat = Nothing
                    Return True
                End If
                ReDim PrfDat.CorpMnuDat(count - 1)
                For i = 0 To count - 1
                    tmpStr = AppInstance.strip(resp, 21)
                    With PrfDat.CorpMnuDat(i)
                        .MnuPrfIde = AppInstance.strip(tmpStr, 8)
                        .MnuItmIde = AppInstance.strip(tmpStr, 10)
                        .MnuItmSee = AppInstance.strip(tmpStr, 1)
                        .MunItmEnt = AppInstance.strip(tmpStr, 1)
                        .MunItmAut = AppInstance.strip(tmpStr, 1)
                    End With
                Next
            End With

        Catch ex As Exception
            HandleError(&H81000325, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_MaintainCorpMenuPrf(ByVal MsgId As String, ByRef PrfDat As CorpMnuPrfDetail_Struct) As Boolean
        Dim resp As String = String.Empty
        Dim tmpStr As String
        Dim i, count As Integer

        PrfDat = Nothing
        If Not (GetMessage_Common("202340", "", MsgId, &H81000326, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            With PrfDat
                .MnuPrfIde = AppInstance.strip(resp, 8)
                .TabRowver = AppInstance.strip(resp, 12)
                .ChgStp = AppInstance.strip(resp, 14)
                .ChgUid = AppInstance.strip(resp, 10)
                .MnuPrfIde2 = AppInstance.strip(resp, 8)
                .MnuPrfDsc = AppInstance.strip(resp, 25)
                count = AppInstance.ExInt(AppInstance.strip(resp, 3))
                If count <= 0 Then
                    'PrfDat = Nothing
                    Return True
                End If
                ReDim PrfDat.CorpMnuDat(count - 1)
                For i = 0 To count - 1
                    tmpStr = AppInstance.strip(resp, 15)
                    With PrfDat.CorpMnuDat(i)
                        .MnuPrfIde = AppInstance.strip(tmpStr, 8)
                        .MnuItmIde = AppInstance.strip(tmpStr, 10)
                        .MnuItmSee = AppInstance.strip(tmpStr, 1)
                        .MunItmEnt = AppInstance.strip(tmpStr, 1)
                        .MunItmAut = AppInstance.strip(tmpStr, 1)
                    End With
                Next
            End With

        Catch ex As Exception
            HandleError(&H81000327, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    '********************************
    'Corporate Nominee start here
    '*******************************

    Public Function GetMessage_EnumCorpNomn(ByVal MsgId As String, ByRef CorpNom() As CorpNomReg_Struct) As Boolean
        Dim resp As String = String.Empty
        Dim tmpStr As String
        Dim i, count As Integer

        CorpNom = Nothing
        If Not (GetMessage_Common("612280", "", MsgId, &H81000328, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 6) 'CorpNom.IcsUsrTyp = AppInstance.strip(resp, 6)
            AppInstance.strip(resp, 10) 'CorpNom.IcsCusNum = AppInstance.strip(resp, 6)
            AppInstance.strip(resp, 16) 'Reserved
            count = CType(AppInstance.strip(resp, 3), Integer)
            If count <= 0 Then
                CorpNom = Nothing
                Return True
            End If
            ReDim CorpNom(count - 1)
            For i = 0 To count - 1
                tmpStr = AppInstance.strip(resp, 320)
                With CorpNom(i)
                    .TabRowVer = AppInstance.strip(tmpStr, 12) 'row version 
                    AppInstance.strip(tmpStr, 8) ' Reserved
                    .NomUsrKey = AppInstance.strip(tmpStr, 10)
                    .NomCrpKey = AppInstance.strip(tmpStr, 10)
                    .NomCusNum = AppInstance.strip(tmpStr, 6)
                    .NomNamEng = AppInstance.strip(tmpStr, 35)
                    .NomNamAra = AppInstance.strip(tmpStr, 35)
                    .NomNatCde = AppInstance.strip(tmpStr, 2)
                    .NomDocTyp = AppInstance.strip(tmpStr, 2)
                    .NomDocNum = AppInstance.strip(tmpStr, 10)
                    .NomLngCde = AppInstance.strip(tmpStr, 1)
                    .NomEmlAdd = AppInstance.strip(tmpStr, 50)
                    .NomTelOff = AppInstance.strip(tmpStr, 25)
                    .NomTelMob = AppInstance.strip(tmpStr, 25)
                    .NomTrxPwd = AppInstance.strip(tmpStr, 1)
                    .NomTrxTok = AppInstance.strip(tmpStr, 1)
                    .DivIde = AppInstance.strip(tmpStr, 10)
                    .LimSchIde = AppInstance.strip(tmpStr, 10)
                    .RolIde = AppInstance.strip(tmpStr, 10)
                    .MenPrfIde = AppInstance.strip(tmpStr, 8)
                    .ActFlg = AppInstance.strip(tmpStr, 1)
                    .Rsv2 = AppInstance.strip(tmpStr, 48)
                End With
            Next
        Catch ex As Exception
            HandleError(&H81000329, "Error:", "Error", ex)
            Return False
        End Try
        Return True


    End Function


    Public Function GetMessage_StopCorpNomn(ByVal MsgId As String, ByRef CorpNom As String) As Boolean 'CorpNom As CorpNomReg_Struct
        Dim resp As String = String.Empty

        'CorpNom = Nothing
        'If Not (GetMessage_Common("612290", "", MsgId, &H81000334, resp)) Then Return False
        Try
            '    AppInstance.strip(resp, 256)
            '    AppInstance.strip(resp, 10)
            '    AppInstance.strip(resp, 10)
            '    AppInstance.strip(resp, 12) 'old row version
            '    AppInstance.strip(resp, 20)

            '    CorpNom.TabRowVer = AppInstance.strip(resp, 12) 'new row version 


            '    With CorpNom
            '        .NomUsrKey = AppInstance.strip(resp, 10)
            '        .NomCrpKey = AppInstance.strip(resp, 10)
            '        .NomCusNum = AppInstance.strip(resp, 6)
            '        .NomNamEng = AppInstance.strip(resp, 35)
            '        .NomNamAra = AppInstance.strip(resp, 35)
            '        .NomNatCde = AppInstance.strip(resp, 2)
            '        .NomDocTyp = AppInstance.strip(resp, 2)
            '        .NomDocNum = AppInstance.strip(resp, 10)
            '        .NomLngCde = AppInstance.strip(resp, 1)
            '        .NomEmlAdd = AppInstance.strip(resp, 50)
            '        .NomTelOff = AppInstance.strip(resp, 25)
            '        .NomTelMob = AppInstance.strip(resp, 25)
            '        .NomTrxPwd = AppInstance.strip(resp, 1)
            '        .NomTrxTok = AppInstance.strip(resp, 1)
            '        .DivIde = AppInstance.strip(resp, 10)
            '        .LimSchIde = AppInstance.strip(resp, 10)
            '        .RolIde = AppInstance.strip(resp, 10)
            '        .MenPrfIde = AppInstance.strip(resp, 8)
            '        .ActFlg = AppInstance.strip(resp, 1)
            '        .Rsv2 = AppInstance.strip(resp, 48)
            '    End With

        Catch ex As Exception
            HandleError(&H81000335, "Error:", "Error", ex)
            Return False
        End Try
        Return True


    End Function

    Public Function GetMessage_LinkCustGroup(ByRef MsgId As String, ByRef CusChlGrp As CorpChlGrp_Struct) As Boolean
        Dim resp As String = String.Empty
        Dim tmpStr As String
        Dim i, count As Integer

        CusChlGrp = Nothing
        If Not (GetMessage_Common("200000", "", MsgId, &H81000336, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            CusChlGrp.TabRowVer = AppInstance.strip(resp, 12)
            CusChlGrp.CusNumPrm = AppInstance.strip(resp, 6)
            CusChlGrp.CusNumLnk = AppInstance.strip(resp, 6)
            AppInstance.strip(resp, 20)
            count = CType(AppInstance.strip(resp, 2), Integer) ' return all customers primary and secondary
            If count <= 0 Then
                CusChlGrp = Nothing
                Return True
            End If
            ReDim CusChlGrp.CusNumSec(count - 1)
            For i = 0 To count - 1
                CusChlGrp.CusNumSec(i) = AppInstance.strip(resp, 6)
            Next

        Catch ex As Exception
            HandleError(&H81000337, "Error:", "Error", ex)
            Return False
        End Try
        Return True

    End Function

    Public Function GetMessage_DeLinkCustGroup(ByRef MsgId As String, ByRef CusChlGrp As CorpChlGrp_Struct) As Boolean
        Dim resp As String = String.Empty
        Dim i, count As Integer

        CusChlGrp = Nothing
        If Not (GetMessage_Common("200010", "", MsgId, &H81000338, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            CusChlGrp.TabRowVer = AppInstance.strip(resp, 12)
            CusChlGrp.CusNumPrm = AppInstance.strip(resp, 6)
            CusChlGrp.CusNumLnk = AppInstance.strip(resp, 6)
            AppInstance.strip(resp, 20)
            count = CType(AppInstance.strip(resp, 2), Integer)
            If count <= 0 Then
                CusChlGrp = Nothing
                Return True
            End If
            ReDim CusChlGrp.CusNumSec(count - 1)
            For i = 0 To count - 1
                CusChlGrp.CusNumSec(i) = AppInstance.strip(resp, 6)
            Next

        Catch ex As Exception
            HandleError(&H81000339, "Error:", "Error", ex)
            Return False
        End Try
        Return True

    End Function

    'Create Corporate Internet banking

    Public Function GetMessage_CreateCorp(ByRef MsgId As String, ByRef p_CorpDat As CorpDat_Struct) As Boolean
        Dim resp As String = String.Empty

        p_CorpDat = Nothing
        If Not (GetMessage_Common("612180", "", MsgId, &H81000340, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 6 + 6 + 52)
            'AppInstance.strip(resp, 52)
            p_CorpDat.ReadTable(resp)

        Catch ex As Exception
            HandleError(&H81000341, "Error:", "Error", ex)
            Return False
        End Try
        Return True

    End Function

    Public Function GetMessage_ModifyCorp(ByRef MsgId As String, ByRef p_CorpDat As CorpDat_Struct) As Boolean
        Dim resp As String = String.Empty

        p_CorpDat = Nothing
        If Not (GetMessage_Common("612190", "", MsgId, &H81000342, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 6 + 6 + 52)
            'AppInstance.strip(resp, 52)
            p_CorpDat.ReadTable(resp)

        Catch ex As Exception
            HandleError(&H81000343, "Error:", "Error", ex)
            Return False
        End Try
        Return True

    End Function

    Public Function GetMessage_EnumCorp(ByRef MsgId As String, ByRef p_CorpDat() As CorpDat_Struct) As Boolean
        Dim resp As String = String.Empty
        Dim count As Integer
        Dim i As Integer
        Dim tmpStr As String

        p_CorpDat = Nothing
        If Not (GetMessage_Common("612060", "", MsgId, &H81000366, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 6 + 6 + 48)
            count = CType(AppInstance.strip(resp, 4), Integer)
            If count < 0 Then
                Return False
            ElseIf count = 0 Then
                p_CorpDat = Nothing
                Return True
            End If
            ReDim p_CorpDat(count - 1)
            For i = 0 To count - 1
                tmpStr = AppInstance.strip(resp, 256)
                With p_CorpDat(i)
                    .ReadTable(tmpStr)
                End With
            Next

        Catch ex As Exception
            HandleError(&H81000367, "Error:", "Error", ex)
            Return False
        End Try
        Return True

    End Function

#End Region
End Module

Public Module EmployeeLinkage

    <Serializable()> _
    Public Structure YeeDat_Struct
        Dim YeeIdeDat As YeeIdeDat_Struct
        Dim MbxInfDat As MbxInfDat_Struct
        Dim HasCusDat As String  '1x
        Dim CusTyp As String  '2x
        Dim CusNamEng As String  '35x
        Dim CusNamAra As String  '35x
    End Structure

    <Serializable()> Public Structure YeeIdeDat_Struct
        Dim TabRowVer As String '12x
        Dim CusNum As String '6n
        Dim YeeIde As String '4x
        Dim NetSrc As String '4x
        Dim NetIde As String '10x
        Dim UpdStp As String '14x
        Dim UpdUid As String '10x

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackNString(TabRowVer, 12)
            st &= Pack.PackString(CusNum, 6)
            st &= Pack.PackString(YeeIde, 4)
            st &= Pack.PackString(NetSrc, 4)
            st &= Pack.PackString(NetIde, 10)
            st &= Pack.PackString(UpdStp, 14)
            st &= Pack.PackString(UpdUid, 10)
            Return st
        End Function
        Public Sub ReadTable(ByRef DataStream As String)
            TabRowVer = Pack.Strip(DataStream, 12)
            CusNum = Pack.Strip(DataStream, 6)
            YeeIde = Pack.Strip(DataStream, 4)
            NetSrc = Pack.Strip(DataStream, 4)
            NetIde = Pack.Strip(DataStream, 10)
            UpdStp = Pack.Strip(DataStream, 14)
            UpdUid = Pack.Strip(DataStream, 10)
        End Sub
    End Structure

    <Serializable()> Public Structure MbxInfDat_Struct
        Dim NetSrc As String '4x
        Dim NamAli As String '25x
        Dim NamDsp As String '70x
        Dim EmlAdd As String '50x
        Dim TelNum As String '25x
        Dim HasBox As String '1x
        Dim HasIdeStd As String '1x
        Dim HasExtEml As String '1x
        Dim AccIsEnb As String '1x
        Dim AccDepNam As String '50x
        Dim AccDsc As String '70x

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackNString(NetSrc, 4)
            st &= Pack.PackNString(NamAli, 25)
            st &= Pack.PackNString(NamDsp, 70)
            st &= Pack.PackNString(EmlAdd, 50)
            st &= Pack.PackNString(TelNum, 25)
            st &= Pack.PackNString(HasBox, 1)
            st &= Pack.PackNString(HasIdeStd, 1)
            st &= Pack.PackNString(HasExtEml, 1)
            st &= Pack.PackNString(AccIsEnb, 1)
            st &= Pack.PackNString(AccDepNam, 50)
            st &= Pack.PackNString(AccDsc, 70)
            Return st
        End Function
        Public Sub ReadTable(ByRef DataStream As String)
            NetSrc = Pack.Strip(DataStream, 4)
            NamAli = Pack.Strip(DataStream, 25)
            NamDsp = Pack.Strip(DataStream, 70)
            EmlAdd = Pack.Strip(DataStream, 50)
            TelNum = Pack.Strip(DataStream, 25)
            HasBox = Pack.Strip(DataStream, 1)
            HasIdeStd = Pack.Strip(DataStream, 1)
            HasExtEml = Pack.Strip(DataStream, 1)
            AccIsEnb = Pack.Strip(DataStream, 1)
            AccDepNam = Pack.Strip(DataStream, 50)
            AccDsc = Pack.Strip(DataStream, 70)
        End Sub
    End Structure

    Public Structure YeeList_Struct '64
        Dim YeeIdeDat As YeeIdeDat_Struct '60
        Dim HasCusIde As String  '1x
        Dim HasCusYee As String  '1x
        Dim Rsv03 As String  '2x
        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= YeeIdeDat.PackTable()
            st &= Pack.PackNString(HasCusIde, 1)
            st &= Pack.PackNString(HasCusYee, 1)
            st &= Pack.PackNString(Rsv03, 2)
            Return st
        End Function
        Public Sub ReadTable(ByRef DataStream As String)
            YeeIdeDat.ReadTable(DataStream)
            HasCusIde = Pack.Strip(DataStream, 1)
            HasCusYee = Pack.Strip(DataStream, 1)
            Rsv03 = Pack.Strip(DataStream, 2)
        End Sub
    End Structure

    Public Function SendMessage_GetEmployeeLinkage(ByVal CusNum As String) As String

        Dim st As String = String.Empty
        st &= Pack.PackNString(CusNum, 6)
        st &= Pack.PackString(" ", 26)
        Return AppInstance.SendMessageVisuallyEx("613300", st, "CUS", CusNum, "", "")
    End Function

    Public Function GetMessage_GetEmployeeLinkage(ByVal MsgId As String, ByRef YeeDat As YeeDat_Struct) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("613300", "", MsgId, &H81000619, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 32)
            AppInstance.strip(resp, 1) 'HasYeeDat
            YeeDat.YeeIdeDat.ReadTable(resp)
            AppInstance.strip(resp, 17) 'Rsv02
            AppInstance.strip(resp, 1) 'HasMbxDat
            YeeDat.MbxInfDat.ReadTable(resp)
            AppInstance.strip(resp, 39) 'Rsv03
            YeeDat.HasCusDat = AppInstance.strip(resp, 1)
            YeeDat.CusTyp = AppInstance.strip(resp, 2)
            YeeDat.CusNamEng = AppInstance.strip(resp, 35)
            YeeDat.CusNamAra = AppInstance.strip(resp, 35)
        Catch ex As Exception
            HandleError(&H81000619, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function SendMessage_AddEmployeeLinkage(ByVal CusNum As String, ByVal YeeIdeDat As YeeIdeDat_Struct) As String

        Dim st As String = String.Empty
        st &= Pack.PackNString(CusNum, 6)
        st &= YeeIdeDat.PackTable()
        st &= Pack.PackString(" ", 14)
        Return AppInstance.SendMessageVisuallyEx("613310", st, "CUS", CusNum, "", "")
    End Function

    Public Function GetMessage_AddEmployeeLinkage(ByVal MsgId As String, ByRef YeeIdeDat As YeeIdeDat_Struct, ByRef MbxInfDat As MbxInfDat_Struct) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("613310", "", MsgId, &H81000620, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 6) 'cusnum
            YeeIdeDat.ReadTable(resp)
            AppInstance.strip(resp, 14) 'Rsv01
            AppInstance.strip(resp, 1) 'HasMbxDat
            MbxInfDat.ReadTable(resp)
            AppInstance.strip(resp, 21) 'Rsv03
        Catch ex As Exception
            HandleError(&H81000620, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function SendMessage_EditEmployeeLinkage(ByVal CusNum As String, ByVal YeeIdeDat As YeeIdeDat_Struct) As String

        Dim st As String = String.Empty
        st &= Pack.PackNString(CusNum, 6)
        st &= YeeIdeDat.PackTable()
        st &= Pack.PackString(" ", 14)
        Return AppInstance.SendMessageVisuallyEx("613320", st, "CUS", CusNum, "", "")
    End Function

    Public Function GetMessage_EditEmployeeLinkage(ByVal MsgId As String, ByRef YeeIdeDat As YeeIdeDat_Struct, ByRef MbxInfDat As MbxInfDat_Struct) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("613320", "", MsgId, &H81000621, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 6) 'cusnum
            YeeIdeDat.ReadTable(resp)
            AppInstance.strip(resp, 14) 'Rsv01
            AppInstance.strip(resp, 1) 'HasMbxDat
            MbxInfDat.ReadTable(resp)
            AppInstance.strip(resp, 21) 'Rsv03
        Catch ex As Exception
            HandleError(&H81000621, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function SendMessage_DeleteEmployeeLinkage(ByVal CusNum As String, ByVal YeeIdeDat As YeeIdeDat_Struct) As String

        Dim st As String = String.Empty
        st &= Pack.PackNString(CusNum, 6)
        st &= YeeIdeDat.PackTable()
        st &= Pack.PackString(" ", 14)
        Return AppInstance.SendMessageVisuallyEx("613330", st, "CUS", CusNum, "", "")
    End Function

    Public Function GetMessage_DeleteEmployeeLinkage(ByVal MsgId As String, ByRef YeeIdeDat As YeeIdeDat_Struct, ByRef MbxInfDat As MbxInfDat_Struct) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("613330", "", MsgId, &H81000622, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 6) 'cusnum
            YeeIdeDat.ReadTable(resp)
            AppInstance.strip(resp, 14) 'Rsv01
            AppInstance.strip(resp, 1) 'HasMbxDat
            MbxInfDat.ReadTable(resp)
            AppInstance.strip(resp, 21) 'Rsv03
        Catch ex As Exception
            HandleError(&H81000622, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function SendMessage_EnumEmployeesLinkage(ByVal YeeIdeLo As String, ByVal YeeIdeHi As String) As String
        Dim st As String = String.Empty
        st &= Pack.PackString(YeeIdeLo, 4)
        st &= Pack.PackString(YeeIdeHi, 4)
        st &= Pack.PackString("Y", 1)
        st &= Pack.PackString(" ", 23)
        Return AppInstance.SendMessageVisuallyEx("990370", st, "GEN", "", "", "")
    End Function

    Public Function GetMessage_EnumEmployeesLinkage(ByVal MsgId As String, ByRef YeeList() As YeeList_Struct) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("990370", "", MsgId, &H81000623, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 32) 'Echoed
            AppInstance.strip(resp, 28) 'Reserved
            Dim count As Integer = CType(AppInstance.strip(resp, 4), Integer)
            If count <= 0 Then
                '''HandleError(&H80002039, SIBL0100.Util.Debug.getStackFrame(New StackTrace(True).GetFrame(0)) & ": No data received", "ICE Communications")
                '''Return False
                Erase YeeList
                Return True
            End If
            ReDim YeeList(count - 1)
            For i As Integer = 0 To YeeList.Length - 1
                YeeList(i).ReadTable(resp)
            Next
        Catch ex As Exception
            HandleError(&H81000623, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

End Module

Public Module ICEComm

#Region "Ice Data Structures"
    '''Public Enum CoreSys_VerSlt
    '''    CstVerTab = 1
    '''    EqnCusTyp = 2
    '''    EqnAccTyp = 3
    '''    EqnTrxCde = 4
    '''    EqnCcyCde = 5
    '''    EqnLndCde = 6
    '''    ChnEnrPrm = 7
    '''    ChnLimPrm = 8
    '''End Enum

    'Public Enum enumIceAutRol
    '    ICE_ModIceSec = 1
    '    ICE_EnqIceSec = 2
    '    ICE_ModIceRol = 3
    '    ICE_EnqIceRol = 4
    '    ICE_EnqEqnRol = 5
    '    ICE_EnqSysLog = 6
    '    ICE_SysAdmIce = 7
    '    ICE_SysAdm008 = 8
    '    ICE_SysAdm009 = 9
    '    ICE_AccOffOwn = 10
    '    ICE_AccOffAll = 11
    '    ICE_EnqEnrSta = 110
    '    ICE_EnqPrdSta = 111
    '    ICE_EnqCusSta = 112
    '    ICE_EnqTmpDat = 113
    '    ICE_EnqOldStc = 114
    '    ICE_EnqOldAmx = 115
    '    ICE_EnqAtmCrd = 116
    '    ICE_ReqAutMob = 300
    '    ICE_ReqTmpMob = 301
    '    ICE_ReqMsgMob = 302
    '    ICE_ReqAutPrt = 303
    '    ICE_IBKEnrUpd = 400
    '    ICE_IvrEnrUpd = 401
    '    ICE_SmsEnrUpd = 402
    '    ICE_ClpEnrUpd = 403
    '    ICE_EnrCusSet = 404
    '    ICE_EnrCusAct = 405
    '    ICE_EnrAccScp = 406
    '    ICE_LimSelSet = 407
    '    ICE_LimCusSet = 408
    '    ICE_AutEnrSet = 409
    'End Enum

    Public Structure DbtMsg_Struct
        Dim OrgMsgFlg As String '1x 
        Dim OrgMsgTrn As String '1x 
        Dim OrgMsgFin As String '1x 
        Dim Rsv2 As String  '7x 
        Dim OrgFinRsp As ICED0100.FinRspDat_Struct '256x 
        Dim Rsv3 As String  '64x 
        Dim OrgMsgSiz As String '6n 
        Dim OrgMsgMsg As String '...
    End Structure

    Public Structure ChnPrfDat_Struct
        Dim CusNum As String '6n
        Dim CcfTacAcc As String '1x
        Dim UseScp As String '1x
        Dim AccNum As String '13n
        Dim LimPrfCde As String '2x
        'UseLim	40
        Dim UseVelDay As String '8n
        Dim UseVelMth As String '8n
        Dim UseCntDay As String '4n
        Dim UseCntMth As String '4n
        Dim UseMaxTrn As String '8n
        Dim UseLimExp As String '8n
        'EatLim	50
        Dim EatDte As String '8x
        'EatFinDat	28
        Dim EatVelDay As String '10n
        Dim EatVelMth As String '10n
        Dim EatCntDay As String '4n
        Dim EatCntMth As String '4n
        Dim EatLstStp As String '14n
        Dim TacAccStp As String '14x
        Dim TacAccChn As String '4x
        Dim TacAccUsr As String '10x
        Dim Rsv02 As String '19x
        Public Sub ReadTable(ByRef MsgStr As String)
            CusNum = AppInstance.strip(MsgStr, 6)
            CcfTacAcc = AppInstance.strip(MsgStr, 1)
            UseScp = AppInstance.strip(MsgStr, 1)
            AccNum = AppInstance.strip(MsgStr, 13)
            LimPrfCde = AppInstance.strip(MsgStr, 2)
            UseVelDay = AppInstance.strip(MsgStr, 8)
            UseVelMth = AppInstance.strip(MsgStr, 8)
            UseCntDay = AppInstance.strip(MsgStr, 4)
            UseCntMth = AppInstance.strip(MsgStr, 4)
            UseMaxTrn = AppInstance.strip(MsgStr, 8)
            UseLimExp = AppInstance.strip(MsgStr, 8)
            EatDte = AppInstance.strip(MsgStr, 8)
            EatVelDay = AppInstance.strip(MsgStr, 10)
            EatVelMth = AppInstance.strip(MsgStr, 10)
            EatCntDay = AppInstance.strip(MsgStr, 4)
            EatCntMth = AppInstance.strip(MsgStr, 4)
            EatLstStp = AppInstance.strip(MsgStr, 14)
            TacAccStp = AppInstance.strip(MsgStr, 14)
            TacAccChn = AppInstance.strip(MsgStr, 4)
            TacAccUsr = AppInstance.strip(MsgStr, 10)
            Rsv02 = AppInstance.strip(MsgStr, 19)
        End Sub
        Public Function PackTable() As String
            Dim st As String
            st &= AppInstance.PackString(CusNum, 6)
            st &= AppInstance.PackString(CcfTacAcc, 1)
            st &= AppInstance.PackString(UseScp, 1)
            st &= AppInstance.PackString(AccNum, 13)
            st &= AppInstance.PackString(LimPrfCde, 2)
            st &= AppInstance.PackNSString(UseVelDay, 8, False)
            st &= AppInstance.PackNSString(UseVelMth, 8, False)
            st &= AppInstance.PackNSString(UseCntDay, 4, False)
            st &= AppInstance.PackNSString(UseCntMth, 4, False)
            st &= AppInstance.PackNSString(UseMaxTrn, 8, False)
            st &= AppInstance.PackString(UseLimExp, 8)
            st &= AppInstance.PackString(EatDte, 8)
            st &= AppInstance.PackNSString(EatVelDay, 10, False)
            st &= AppInstance.PackNSString(EatVelMth, 10, False)
            st &= AppInstance.PackNSString(EatCntDay, 4, False)
            st &= AppInstance.PackNSString(EatCntMth, 4, False)
            st &= AppInstance.PackString(EatLstStp, 14)
            st &= AppInstance.PackString(TacAccStp, 14)
            st &= AppInstance.PackString(TacAccChn, 4)
            st &= AppInstance.PackString(TacAccUsr, 10)
            st &= AppInstance.PackString(Rsv02, 19)
            Return st
        End Function
        Public Sub Reset()
            CusNum = "" '6n
            CcfTacAcc = "" '1x
            UseScp = "" '1x
            AccNum = "" '13n
            LimPrfCde = "" '2x
            'UseLim	40
            UseVelDay = "" '8n
            UseVelMth = "" '8n
            UseCntDay = "" '4n
            UseCntMth = "" '4n
            UseMaxTrn = "" '8n
            UseLimExp = "" '8n
            'EatLim	50
            EatDte = "" '8x
            'EatFinDat	28
            EatVelDay = "" '10n
            EatVelMth = "" '10n
            EatCntDay = "" '4n
            EatCntMth = "" '4n
            EatLstStp = "" '14n
            TacAccStp = "" '14x
            TacAccChn = "" '4x
            TacAccUsr = "" '10x
            Rsv02 = "" '19x
        End Sub
    End Structure

    Public Structure UsePatDat_Strcut
        Dim UsePatEnq As String '1x
        Dim UsePatReq As String '1x
        Dim UsePatExe As String '1x
        Dim UsePatSar As String '1x
        Dim UsePatSwf As String '1x
        Dim UseSta As String '1x
        Public Sub ReadTable(ByRef MsgStr As String)
            UsePatEnq = AppInstance.strip(MsgStr, 1)
            UsePatReq = AppInstance.strip(MsgStr, 1)
            UsePatExe = AppInstance.strip(MsgStr, 1)
            UsePatSar = AppInstance.strip(MsgStr, 1)
            UsePatSwf = AppInstance.strip(MsgStr, 1)
            UseSta = AppInstance.strip(MsgStr, 1)
        End Sub
        Public Function PackTable() As String
            Dim st As String
            st &= AppInstance.PackString(UsePatEnq, 1)
            st &= AppInstance.PackString(UsePatReq, 1)
            st &= AppInstance.PackString(UsePatExe, 1)
            st &= AppInstance.PackString(UsePatSar, 1)
            st &= AppInstance.PackString(UsePatSwf, 1)
            st &= AppInstance.PackString(UseSta, 1)
            Return st
        End Function
    End Structure

    Public Structure ChnItm_Struct
        Dim PrfRowVer As String '12n
        Dim PrfChgStp As String ' 14x 
        Dim PrfChgUid As String ' 10x 
        Dim ChnNam As String '4x
        Dim UsePatDat As UsePatDat_Strcut
        Dim Rsv03 As String '30x
        Public Sub ReadTable(ByRef MsgStr As String)
            PrfRowVer = AppInstance.strip(MsgStr, 12)
            PrfChgStp = AppInstance.strip(MsgStr, 14)
            PrfChgUid = AppInstance.strip(MsgStr, 10)
            ChnNam = AppInstance.strip(MsgStr, 4)
            UsePatDat.ReadTable(MsgStr)
            Rsv03 = AppInstance.strip(MsgStr, 26)
        End Sub
        Public Function PackTable() As String
            Dim st As String
            st &= AppInstance.PackString(PrfRowVer, 12)
            st &= AppInstance.PackString(PrfChgStp, 14)
            st &= AppInstance.PackString(PrfChgUid, 10)
            st &= AppInstance.PackString(ChnNam, 4)
            st &= UsePatDat.PackTable
            st &= AppInstance.PackString(Rsv03, 26)
            Return st
        End Function
    End Structure

    Public Structure MsgChnPrf_Struct
        Dim PrfRowVer As String ' 12n 
        'Dim PrfChgStp As String '14x 
        'Dim PrfChgUid As String '10x 
        Dim CusAutFlg As String '1x	Flag Y/N ‘ ‘, customer is authorized and the limit will be setup and 5k limit is removed
        Dim Rsv24A As String '23x	Reserved, ignored by ICS
        Dim ChnPrfDat As ChnPrfDat_Struct
        Dim Rsv02 As String '32x
        Dim ChnCnt As String '2n
        Dim ChnItm() As ChnItm_Struct
        Public Sub ReadTable(ByRef MsgStr As String)
            Dim Cnt As Integer
            PrfRowVer = AppInstance.strip(MsgStr, 12)
            'PrfChgStp = AppInstance.strip(MsgStr, 14)
            'PrfChgUid = AppInstance.strip(MsgStr, 10)
            CusAutFlg = AppInstance.strip(MsgStr, 1)
            Rsv24A = AppInstance.strip(MsgStr, 23)
            ChnPrfDat.ReadTable(MsgStr)
            Rsv02 = AppInstance.strip(MsgStr, 32)
            ChnCnt = AppInstance.strip(MsgStr, 2)
            Cnt = AppInstance.ExInt(ChnCnt)
            If Cnt <= 0 Then
                Erase ChnItm
            Else
                ReDim ChnItm(Cnt - 1)
            End If
            For i As Integer = 0 To (Cnt - 1)
                ChnItm(i).ReadTable(MsgStr)
            Next
        End Sub
        Public Function PackTable() As String
            Dim st As String
            Dim Cnt As Integer
            st &= AppInstance.PackString(PrfRowVer, 12)
            st &= AppInstance.PackString(CusAutFlg, 1)
            st &= Space(23) 'Rsv24a
            st &= ChnPrfDat.PackTable
            st &= AppInstance.PackString(Rsv02, 32)
            st &= AppInstance.PackString(ChnCnt, 2)
            Cnt = AppInstance.ExInt(ChnCnt)
            For i As Integer = 0 To (Cnt - 1)
                st &= ChnItm(i).PackTable
            Next
            Return st
        End Function
        Public Sub Reset()
            PrfRowVer = ""
            CusAutFlg = ""
            Rsv24A = ""
            ChnPrfDat.Reset()
            Rsv02 = ""
            ChnCnt = ""
            Erase ChnItm
        End Sub
    End Structure

    Public Structure AutRnkDat_Struct    '	168	Automatically set rank data
        Dim AutRnkSet As String '1x	Flag (Y/N) if automatic data has been set
        Dim RecUpdDte As String '14x	Date and time record updated (YYYYMMDDhhmmss)
        Dim AveCrdBal As String '13ns	Average credit (ledger) balance
        Dim AveCrdDay As String '4n	Number of days in credit (ledger)
        Dim AveDebBal As String '13ns	Average debit (ledger) balance 
        Dim AveDebDay As String '4n	Number of days in debit (ledger)
        Dim AveAccBal As String '13ns	Average all accounts balance
        Dim AveDepBal As String '13ns	Average deposit balance
        Dim AveTotBal As String '13ns	Average total balance
        Dim AveAccInc As String '13ns	Average account income
        Dim TotLoaCom As String '13ns	Total amount of loan commission (charges) remaining
        Dim TotLoaPrn As String '13ns	Total amount of loan principle remaining
        Dim TotDepAmt As String '13ns	Total amount on fixed deposit
        Dim CurRnk As String '1n	Current Automatic Rank
        Dim CurRnkStp As String '14x	Date and time current automatic rank established
        Dim ActRnk As String '1n	as string 'Actual automatic rank
        Dim ActRnkDay As String '3n	Number of days in this rank

        Public Sub ReadTable(ByRef MsgStr As String)
            AutRnkSet = AppInstance.strip(MsgStr, 1)
            RecUpdDte = AppInstance.strip(MsgStr, 14)
            AveCrdBal = AppInstance.strip(MsgStr, 14)
            AveCrdDay = AppInstance.strip(MsgStr, 4)
            AveDebBal = AppInstance.strip(MsgStr, 14)
            AveDebDay = AppInstance.strip(MsgStr, 4)
            AveAccBal = AppInstance.strip(MsgStr, 14)
            AveDepBal = AppInstance.strip(MsgStr, 14)
            AveTotBal = AppInstance.strip(MsgStr, 14)
            AveAccInc = AppInstance.strip(MsgStr, 14)
            TotLoaCom = AppInstance.strip(MsgStr, 14)
            TotLoaPrn = AppInstance.strip(MsgStr, 14)
            TotDepAmt = AppInstance.strip(MsgStr, 14)
            CurRnk = AppInstance.strip(MsgStr, 1)
            CurRnkStp = AppInstance.strip(MsgStr, 14)
            ActRnk = AppInstance.strip(MsgStr, 1)
            ActRnkDay = AppInstance.strip(MsgStr, 3)
        End Sub

        Public Function PackTable() As String
            Dim st As String
            st &= AppInstance.PackString(AutRnkSet, 1)
            st &= AppInstance.PackString(RecUpdDte, 14)
            st &= AppInstance.PackNSString(AveCrdBal, 13)
            st &= AppInstance.PackNString(AveCrdDay, 4)
            st &= AppInstance.PackNSString(AveDebBal, 13)
            st &= AppInstance.PackNString(AveDebDay, 4)
            st &= AppInstance.PackNSString(AveAccBal, 13)
            st &= AppInstance.PackNSString(AveDepBal, 13)
            st &= AppInstance.PackNSString(AveTotBal, 13)
            st &= AppInstance.PackNSString(AveAccInc, 13)
            st &= AppInstance.PackNSString(TotLoaCom, 13)
            st &= AppInstance.PackNSString(TotLoaPrn, 13)
            st &= AppInstance.PackNSString(TotDepAmt, 13)
            st &= AppInstance.PackNString(CurRnk, 1)
            st &= AppInstance.PackString(CurRnkStp, 14)
            st &= AppInstance.PackNString(ActRnk, 1)
            st &= AppInstance.PackNString(ActRnkDay, 3)
            Return st
        End Function
    End Structure

    Public Structure ManRnkDat_Struct       '29	Manually set rank data
        Dim ManRnkSet As String             '1x	Flag (Y/N) if manual data has been set
        Dim ManRnk As String                '1n	Current Manual Rank
        Dim ManRnkRea As String             '3x	Manual rank reason code (or spaces)
        Dim ManRnkStp As String             '14x	Date and time manual rank established
        Dim ManRnkUsr As String             '10x	User identity that set the manual rank
        Public Sub ReadTable(ByRef MsgStr As String)
            ManRnkSet = AppInstance.strip(MsgStr, 1)
            ManRnk = AppInstance.strip(MsgStr, 1)
            ManRnkRea = AppInstance.strip(MsgStr, 3)
            ManRnkStp = AppInstance.strip(MsgStr, 14)
            ManRnkUsr = AppInstance.strip(MsgStr, 10)
        End Sub
        Public Function PackTable() As String
            Dim st As String
            st &= AppInstance.PackString(ManRnkSet, 1)
            st &= AppInstance.PackNString(ManRnk, 1)
            st &= AppInstance.PackNString(ManRnkRea, 3)
            st &= AppInstance.PackString(ManRnkStp, 14)
            st &= AppInstance.PackString(ManRnkUsr, 10)
            Return st
        End Function
    End Structure

    Public Structure ChnSrvFlg_Struct
        Dim ChgSee As String
        Dim CanSee As String
        Dim ChgTrx As String
        Dim CanTrx As String
        Dim Rsv23 As String
    End Structure

    Public Structure AccPrtInChn_Struct
        Dim AccNum As String
        Dim TabRowVer As String
        Dim ChnSrvFlg() As ChnSrvFlg_Struct
    End Structure

    Public Structure JrnDscTab_Struct
        Dim MsgSrc As String  '4x
        Dim ProCde As String  '6x
        Dim MsgCls As String  '3x
        Dim TrxCatCde As String  '3x
        Dim TrxAutCtl As String  '5x
        Dim TrxRvuCtl As String  '5x
        Dim ProCdeDsc As String  '35x
        Dim RSV1 As String  '19x
    End Structure

    Public Structure On2ResCdeTab_Struct
        Dim ResCde As String '3x
        Dim ShrDsc As String '15x
        Dim LngDsc As String '50x
    End Structure

    Public Structure SmaCdeTab_Struct
        Dim SmaCde As String '2x
        Dim SecCde As String '4x
        Dim ShrDscEng As String '15x
        Dim LngDscEng As String '50x
        Dim ShrDscArb As String '15x
        Dim LngDscArb As String '50x
    End Structure

    Public Structure TmpSearch_Struct
        Dim TrgTyp As String  '6x
        Dim TmpIdeNum As String  '3n
        Dim TmpIdeNam As String  '20x
        Dim IVRWavFle As String  '64x
        Dim TmpSta As String  '1x
        Dim TmpCreSys As String  '3x
    End Structure

    Public Structure TmpDat_Struct
        Dim CusNum As String  '6n
        Dim IBKCrpIde As String  '10x
        Dim IBKUsrIde As String  '10x
        Dim TrgTyp As String  '6x
        'TmpIde	87
        Dim TmpIdeNum As String  '3n
        Dim TmpIdeNam As String  '20x
        'Dim IVRWavFle As String  '64x
        Dim AprTmpUsr As String  ' 10x	O	User who approved the template
        Dim AprTmpStp As String  ' 14x	O	Date time the template was approved format YYYYMMDDHHMMSS
        Dim BenRlt As String     ' 2x	M	Beneficiary relationship
        Dim CusKSAKng As String  ' 1x	M	Customer declare about the knowledge of KSA regulation
        Dim BenNmeMsk As String  '	35x	O	Beneficiary name Masked
        Dim Rsv05 As String      ' 2x	O	Reserved for future , space filled

        Dim TmpSta As String  '1x
        Dim TmpSysCre As String  '3x
        Dim TmpStpCre As String  '14x
        Dim TmpUsrCre As String  '10x
        Dim TmpStpMod As String  '14x
        Dim TmpUsrMod As String  '10x
        Dim TmpStpUse As String  '14x
        Dim TmpUsrUse As String  '10x
        Dim DebAccFlg As String  '1x
        Dim DebAccNum As String  '13n
        Dim PayAmtFlg As String  '1x
        Dim PayAmt As String  '14n
        Dim PayCcy As String  '3x
        'AwiGrp	182
        Dim AwiBicCde As String  '11x
        'AwiNat As String  '17
        Dim AwiNatCde As String  '2x
        Dim AwiNatVal As String  '15x
        Dim AwiBicKey As String  '8x
        Dim AwiChpCde As String  '6x
        Dim AwiNamAdd1 As String  '4*35x
        Dim AwiNamAdd2 As String
        Dim AwiNamAdd3 As String
        Dim AwiNamAdd4 As String
        Dim BenAccNum As String  '34x
        Dim BenNamAdd1 As String  '4*35x
        Dim BenNamAdd2 As String
        Dim BenNamAdd3 As String
        Dim BenNamAdd4 As String
        Dim PayDetFlg As String  '1x
        Dim PayDet1 As String  '2*35x
        Dim PayDet2 As String
        Dim TelBen As String  '1x
        Dim TelBenNum As String  '25x
        Dim PaySamCde As String  '2x
        Dim RskMgtDat As String  '60x
        Dim SecCcyCde As String  '3x
        Dim DebAccCcy As String
        Dim TmpAppDat As String  '20x

        Public Function PackTable() As String
            Dim st As String = ""
            st &= Pack.PackString(CusNum, 6)   '6n
            st &= Pack.PackString(IBKCrpIde, 10)   '10x
            st &= Pack.PackString(IBKUsrIde, 10)   '10x
            st &= Pack.PackString(TrgTyp, 6)   '6x
            'TmpIde	87
            st &= Pack.PackString(TmpIdeNum, 3)   '3n
            st &= Pack.PackString(TmpIdeNam, 20)   '20x
            'st &= Pack.PackString(IVRWavFle, 64)   '64x
           
            st &= Pack.PackString(AprTmpUsr, 10)   '1x
            st &= Pack.PackString(AprTmpStp, 14)   '3x
            st &= Pack.PackString(BenRlt, 2)   '14x
            st &= Pack.PackString(CusKSAKng, 1)   '10x
            st &= Pack.PackString(BenNmeMsk, 35)   '14x
            st &= Pack.PackString(Rsv05, 2)   '10x

            st &= Pack.PackString(TmpSta, 1)   '1x
            st &= Pack.PackString(TmpSysCre, 3)   '3x
            st &= Pack.PackString(TmpStpCre, 14)   '14x
            st &= Pack.PackString(TmpUsrCre, 10)   '10x
            st &= Pack.PackString(TmpStpMod, 14)   '14x
            st &= Pack.PackString(TmpUsrMod, 10)   '10x
            st &= Pack.PackString(TmpStpUse, 14)   '14x
            st &= Pack.PackString(TmpUsrUse, 10)   '10x
            st &= Pack.PackString(DebAccFlg, 1)   '1x
            st &= Pack.PackString(DebAccNum, 13)   '13n
            st &= Pack.PackString(PayAmtFlg, 1)   '1x
            st &= Pack.PackString(PayAmt, 14)   '14n
            st &= Pack.PackString(PayCcy, 3)   '3x
            'AwiGrp	182
            st &= Pack.PackString(AwiBicCde, 11)   '11x
            'AwiNat 17
            st &= Pack.PackString(AwiNatCde, 2)   '2x
            st &= Pack.PackString(AwiNatVal, 15)   '15x
            st &= Pack.PackString(AwiBicKey, 8)   '8x
            st &= Pack.PackString(AwiChpCde, 6)   '6x
            st &= Pack.PackString(AwiNamAdd1, 35)   '4*35x
            st &= Pack.PackString(AwiNamAdd2, 35)
            st &= Pack.PackString(AwiNamAdd3, 35)
            st &= Pack.PackString(AwiNamAdd4, 35)
            st &= Pack.PackString(BenAccNum, 34)   '34x
            st &= Pack.PackString(BenNamAdd1, 35)   '4*35x
            st &= Pack.PackString(BenNamAdd2, 35)
            st &= Pack.PackString(BenNamAdd3, 35)
            st &= Pack.PackString(BenNamAdd4, 35)
            st &= Pack.PackString(PayDetFlg, 1)   '1x
            st &= Pack.PackString(PayDet1, 35)   '2*35x
            st &= Pack.PackString(PayDet2, 35)
            st &= Pack.PackString(TelBen, 1)   '1x
            st &= Pack.PackString(TelBenNum, 25)   '25x
            st &= Pack.PackString(PaySamCde, 2)   '2x
            st &= Pack.PackString(RskMgtDat, 60)   '60x
            st &= Pack.PackString(SecCcyCde, 3)   '3x
            st &= Pack.PackString(DebAccCcy, 3)
            st &= Pack.PackString(TmpAppDat, 20)   '20x
            Return st
        End Function
    End Structure

    Public Structure AtmDatItem_Struct
        Dim CrdPan As String
        Dim CrdSta As String
        Dim CrdExpDte As String
        Dim CrdFlg As String
        Dim CrdEmbNam As String
        Dim CamAdd1 As String
        Dim CamAdd2 As String
        Dim CamCty As String
        Dim CamLnd As String
        Dim CamTel As String
        Dim CrdAccNum As String
        Dim CrdLngCde As String
        Dim CrdBrnCde As String
        Dim FinDatFlg As String
        Dim LstActDte As String
        Dim LstActTme As String
        Dim On2TrxCde As String
        Dim On2TrxCcy As String
        Dim On2TrxAmt As String
    End Structure

    Public Structure AtmDatItemEx_Struct
        Dim CrdPan As String
        Dim CrdSta As String
        Dim CrdExpDte As String
        Dim CrdFlg As String
        Dim CrdEmbNam As String
        Dim CamAdd1 As String
        Dim CamAdd2 As String
        Dim CamCty As String
        Dim CamLnd As String
        Dim CamTel As String
        Dim CrdAccNum As String
        Dim CrdLngCde As String
        Dim CrdBrnCde As String
        Dim FinDatFlg As String
        Dim LstActDte As String
        Dim LstActTme As String
        Dim On2TrxCde As String
        Dim On2TrxCcy As String
        Dim On2TrxAmt As String
        Dim On2PinDte As String
        Dim On2PinErr As String
        Dim CrdIssCur As String
        Dim On2TrxDat As On2TrxDat_Struct
        Dim On2CrdCls As String
        Dim CrdTkn As String
        Dim Rsv33 As String
    End Structure

    Public Structure AtmDat_Struct
        Dim CusNum As String
        Dim AccFlg As String
        Dim AccNum As String
        Dim CrdFlg As String
        Dim CrdNum As String
        Dim CrdSta As String
        Dim ItmNum As String
        Dim CrdItm() As AtmDatItem_Struct
    End Structure

    Public Structure AtmDatEx_Struct
        Dim CusNum As String
        Dim AccFlg As String
        Dim AccNum As String
        Dim CrdFlg As String
        Dim CrdNum As String
        Dim Rsv1 As String
        Dim Rsv2 As String
        Dim CrdSta As String
        Dim CrdExp As String

        Dim ItmNum As String
        Dim CrdItmEx() As AtmDatItemEx_Struct


        Function getCardExpiry(ByVal cardExpiry As String) As String
            Dim sCardExpiry As String
            If Not cardExpiry Is Nothing AndAlso cardExpiry.Trim <> "" AndAlso cardExpiry.Length >= 8 Then
                sCardExpiry = cardExpiry
                If sCardExpiry.Substring(6) <> "00" Then
                    sCardExpiry = sCardExpiry.Substring(0, 6) & "00"
                End If
                sCardExpiry = AppInstance.PackString(sCardExpiry, 8)
            Else
                sCardExpiry = AppInstance.PackString(cardExpiry, 8)
            End If
            Return sCardExpiry
        End Function
    End Structure

    Public Structure BalDat_Struct
        Dim BalAvl As String '	14ns
        Dim BalHld As String '	14n
        Dim BalClr As String '	14ns
        Dim BalLdg As String '	14ns
        Dim OvdLim As String '	14n
        Dim OvdExp As String '	8n
    End Structure

    Public Structure BalIntDat_Struct
        Dim BalAvl As String '	14ns
        Dim BalLdg As String '	14ns
    End Structure

    Public Structure TrxSlt_Strcut
        Dim PstDte As String
        Dim ValDte As String
        Dim TrxRef As String
        Dim TrxCde As String
        Dim NarLin1 As String
        Dim NarLin2 As String
        Dim NarLin3 As String
        Dim NarLin4 As String
        Dim TrxAmt As String
    End Structure

    Public Structure TrxSltEx_Strcut
        Dim PstDte As String
        Dim ValDte As String
        Dim TrxRef As String
        Dim TrxCde As String
        Dim NarLin1 As String
        Dim NarLin2 As String
        Dim NarLin3 As String
        Dim NarLin4 As String
        Dim TrxAmt As String
        Dim RunBal As String
        Dim Rsv2 As String
    End Structure

    Public Structure TrxSltIntAcc_Strcut
        Dim PstDte As String
        Dim PstTme As String
        Dim ValDte As String
        Dim TrxRef As String
        Dim TrxCde As String
        Dim TrxAmt As String
        Dim NarLin1 As String
        Dim NarLin2 As String
        Dim Rsv2 As String
    End Structure


    Public Structure IceBrnItm_Struct
        Dim BrnNum As String '4x
        Dim BrnSubNet As String '15x
        Dim IceBrnSrv As String '10x
        Dim MsgAgeDys As String '3n
        Dim JrnAgeDys As String '3n
        Dim Rsv1 As String '165x
    End Structure

    Public Structure CoreSys_VerItm
        Dim CstTabVer As String '12n
        Dim CstTabWho As String '10x
        Dim CstTabStp As String '8n6n
        Dim CstTabNum As String '2n
        Dim CstTabNam As String '10x
    End Structure

    Public Structure CmaAutPrs_Struct
        Dim TabRowVer As String '12n
        Dim CapMnm As String '4x
        Dim CapCusNum As String '6n
        Dim CapNamEng As String '25x
        Dim CapNamAra As String '25x
        Dim Rsv2 As String '28x
    End Structure

    Public Structure CalBasTab_Struct
        Dim TabRowVer As String  '12n	Table version number
        Dim CalGrgMin As String  '8n	Lowest Gregorian date in CalGrgTab (YYYYMMDD)
        Dim CalGrgMax As String  '8n	Highest Gregorian date in CalGrgTab (YYYYMMDD)
        Dim CalHgrMin As String  '8n	Lowest Hegira date in CalGrgTab (YYYYMMDD)
        Dim CalHgrMax As String  '8n	Highest Hegira date in CalGrgTab (YYYYMMDD)
    End Structure

    Public Structure CalGrgTab_Struct
        Dim GrgDte As Integer  '8n	Gregorian date of the first of the month
        Dim GrgOrd As Integer  '5n	Ordinal number of the first day of the Gregorian month
        Dim GrgDim As Integer  '2n	Number of days in the Gregorian month
        Dim HgrDte As Integer  '8n	Hegira date of Gregorian first of month (YYYYMMDD)
        Dim HgrCls As String  '1x	Type of date of the Hegira month
    End Structure

    Public Structure CalHgrTab_Struct
        Dim HgrDte As Integer  '8n	Hegira date of the first of the month
        Dim HgrOrd As Integer  '5n	Ordinal number of the first day of the Hegira month
        Dim HgrDim As Integer  '2n	Number of days in the Hegira month
        Dim GrgDte As Integer  '8n	Gregorian date of Hegira first of month (YYYYMMDD)
        Dim HgrCls As String  '1x	Type of date of the Hegira month
    End Structure

    Public Structure CalCnvTab_Struct
        Dim CalBasTab As CalBasTab_Struct
        Dim CalGrgTab() As CalGrgTab_Struct
        Dim CalHgrTab() As CalHgrTab_Struct
        'Dim CalGrgIdx() As String
        'Dim CalHgrIdx() As String
    End Structure

    Public Structure CapPrdInf_Struct
        Dim TabRowVer As String '12n
        Dim CapMnm As String '4x
        Dim CapPrdMnm As String '6n
        Dim CapPfxLen As String '1n
        Dim CapPfxVal As String '8x

        Dim TgtMinLen As String '2n
        Dim TgtMaxLen As String '2n

        Dim CapAccNum As String '13x
        Dim CapAccCcy As String '3x
        Dim CapPrdEng As String '25x
        Dim CapPrdAra As String '25x
        Dim ShoPfx As String '1x
        Dim TgtFmt As String '1x
        Dim TgtLabEng As String '25x
        Dim TgtLabAra As String '25x
        Dim TgtComEng As String '125x
        Dim TgtComAra As String '125x
        Dim Rsv2 As String '99x
    End Structure

    Public Structure CoreSys_EnrPrm
        Dim ChnNam As String     '4x
        Dim EnrPrfNam As String  '10x
        Dim UsePatEnq As String  '1x
        Dim UsePatReq As String  '1x
        Dim UsePatExe As String  '1x
        Dim UsePatSar As String  '1x
        Dim UsePatSwf As String  '1x
        Dim UseLimChn As String  '4x
        Dim UseLimPrf As String  '10x
        Dim Rsv1 As String       '47x
    End Structure

    Public Structure CoreSys_LimPrm
        Dim ChnNam As String    '4x
        Dim EnrPrfNam As String '10x
        Dim UseVelDay As String '8n
        Dim UseVelMth As String '8n
        Dim UseCntDay As String '4n
        Dim UseCntMth As String '4n
        Dim UseMaxTrn As String '8n
        Dim UseExpPer As String '3n
        Dim Rsv1 As String      '31x
    End Structure

    Public Structure CoreSys_CusItm
        Dim CusNum As String '6x
        Dim CusTyp As String '2x
        Dim CusNam As String '35x
        Dim CusCID As String '14x
        Dim IbkCrpIde As String '10x
        Dim IbkUsrIde As String '10x
        Dim IvrCrpIde As String '10x
        Dim IvrUsrIde As String '10x
        Dim Rsv1 As String '31x
    End Structure

    Public Structure CoreSys_AccOff
        Dim OffCde As String
        Dim OffUsrIde As String
        Dim MgrCde As String
        Dim MgrUsrIde As String
        Dim FmtFlg As String
        Dim TxtUsrIde As String
        Dim TxtSep1 As String
        Dim TxtMgrCde As String
        Dim TxtSep2 As String
        Dim TxtOffNam As String
    End Structure

    Public Structure CoreSys_CusTyp
        Dim CusTypCde As String
        Dim CusDscEng As String
        Dim CusDscAra As String
    End Structure

    Public Structure CoreSys_LndCde
        Dim LndCde As String
        Dim LndNum As String
        Dim LndDscEng As String
        Dim LndDscAra As String
    End Structure

    Public Structure CoreSys_SarBnk
        Dim SarBnkCde As String '4x
        Dim SarSwfCde As String '11x
        Dim SarSibFlg As String '1x
        Dim SarBcc As String '2x
        Dim Rsv2 As String '22x
        'SarDscEng	180
        Dim EngMnu As String '25x
        Dim Rsv21E As String '15x
        Dim EngMsg1 As String '35x
        Dim EngMsg2 As String '35x
        Dim EngMsg3 As String '35x
        Dim EngMsg4 As String '35x
        'SarDscAra	180
        Dim AraMnu As String '25x
        Dim Rsv21A As String '15x
        Dim AraMsg1 As String '35x
        Dim AraMsg2 As String '35x
        Dim AraMsg3 As String '35x
        Dim AraMsg4 As String '35x
    End Structure

    Public Structure CoreSys_ResCde
        Dim Rsv As String
        Dim IntResCde As String
        Dim IntResEng As String
        Dim IntResAra As String

        Public Sub Clear()
            Rsv = String.Empty
            IntResCde = String.Empty
            IntResEng = String.Empty
            IntResAra = String.Empty
        End Sub

    End Structure

    Public Structure CoreSys_ActCde
        Dim Rsv As String
        Dim IntActCde As String
        Dim IntActEng As String
        Dim IntActAra As String
    End Structure

    Public Structure CoreSys_TrxCde
        Dim TrxCde As String
        Dim TrxCls As String
        Dim TrxDscEng As String
        Dim TrxDscAra As String
    End Structure

    Public Structure CoreSys_CcyCde
        Dim CcyCde As String
        Dim CcyNum As String
        Dim CcyDscEng As String
        Dim CcyDscAra As String
        Dim CcyExp As String
        Dim CcyTrdFlg As String

        Sub Clear()
            CcyCde = String.Empty
            CcyNum = String.Empty
            CcyDscEng = String.Empty
            CcyDscAra = String.Empty
            CcyExp = String.Empty
            CcyTrdFlg = String.Empty
        End Sub
    End Structure

    Public Structure CoreSys_DeaTyp
        Dim DeaTypCde As String
        Dim DeaDscEng As String
        Dim DeaDscAra As String
    End Structure

    Public Structure CoreSys_ChnWrd
        Dim ChnWrdEng As String
        Dim ChnWrdAra As String
    End Structure

    Public Structure CoreSys_AccTyp
        Dim AccTypCde As String
        Dim AccDscEng As String
        Dim AccDscAra As String
        Dim AccAppCde As String
        Dim AccHasInt As String
    End Structure

    Public Structure CoreSys_BrnCfg
        Dim BrnNum As String ' 4x 
        Dim BrnSubNet As String ' 15x 
        Dim IceBrnSrv As String ' 10x 
        Dim Rsv1 As String      ' 71x 
    End Structure

    Public Structure CoreSys_CshTrxNam
        Dim CshTrxNam As String '10x
        Dim TrxNamEng As String '35x
        Dim TrxNamAra As String '35x
        Dim Rsv10 As String '10x
    End Structure

    Public Structure CoreSys_CshMsgTyp
        Dim CshMsgTyp As String '4x
        Dim MsgTypEng As String '35x
        Dim MsgTypAra As String '35x
        Dim Rsv16 As String '16x
    End Structure

    Public Structure CoreSys_CshReaCde
        Dim CshReaCde As String '2x
        Dim ReaCdeEng As String '35x
        Dim ReaCdeAra As String '35x
        Dim Rsv18 As String '18x
    End Structure

    Public Structure CoreSys_ON2Cde
        Dim On2TrxCde As String  '4x
        Dim SchTrxCde As String  '4x
        Dim On2FinFlg As String  '1x
        Dim On2RsvFlg As String  '1x
        Dim On2EngTxt As String  '30x
        Dim On2AraTxt As String  '30x
    End Structure

    Public Structure CoreSys_LoaPrf
        Dim PrfCde As String  '2x
        Dim PrfDay As String  '3x
        Dim PrfTxtEng As String  '15x
        Dim PrfTxtAra As String  '15x
        Dim PrfNonAcc As String  '1x
    End Structure

    Public Structure CoreSys_IceAut
        Dim IceAutSer As String '3n
        Dim IceAutCde As String '10x
        Dim IceAutNam As String '35x
    End Structure

    Public Structure CoreSys_PrcCde
        Dim PrcCde As String '6n
        Dim PrcCdeDsc As String '	35x
        Dim PrcShrDec As String '15x
        Dim PrcCat As String '3x
        Dim PrcKeyCls As String '3x
        Dim PrcJrnFlg As String '1x
        Dim Rsv1 As String '	65x
    End Structure


    Public Structure CoreSys_CidDocTyp
        Dim CusSeg As String '3x
        Dim DocTypCde As String '2x
        Dim CusCanSel As String '1x
        Dim DocDscEng As String '30x
        Dim DocDscAra As String '30x
        Dim Rsv33 As String '14x
    End Structure

    Public Structure CoreSys_CusPtyTyp
        Dim PtyTypCde As String '2x
        Dim PtyShtEng As String '10x
        Dim PtyShtAra As String '10x
        Dim PtyDscEng As String '25x
        Dim PtyDscAra As String '25x
        Dim Rsv33 As String '28x
    End Structure


    Public Structure CoreSys_SpcCon
        Dim SccCde As String '3x
        Dim SccDscEng As String '25x
        Dim SccDscAra As String '25x
        Dim SccModCan As String '1x
        Dim SccModIba As String '1x
        Dim SccModPrv As String '1x
        Dim SccSibCde As String '1x
        Dim Rsv33 As String '7x
    End Structure

    Public Structure CoreSys_SalCde
        Dim PrsSalCde As String '3x
        Dim PrsSexCde As String '1x
        Dim EqnSalCde As String '3x
        Dim SalDscEng As String '35x
        Dim SalDscAra As String '35x
        Dim Rsv33 As String '23x
    End Structure

    Public Structure CoreSys_AltPreDef
        Dim PreDefcde As String '4x
        Dim PreDefEng As String '256x
        Dim PreDefAra As String '256x
    End Structure

    ' IH statement suppression reason codes
    Public Structure CoreSys_StmSupRea
        Dim SupReaCde As String ' 4x  - Item code
        Dim ReaDscEng As String ' 50x - English description
        Dim ReaDscAra As String ' 50x - Arabic description
    End Structure


    Public Structure structLocCusInf
        Dim CusNum As String '6x
        Dim AccNum As String '13x
        Dim CrdNum As String '16x
        Dim UsrIde As String '10x
        Dim AmxCrd As String '15x
        Dim StcBil As String '10x
        Dim SecIde As String '8x
        Dim CusNam As String '35x
        'CusCid=14
        Dim CidDoc As String '2x
        Dim CidNat As String '2x
        Dim CidVal As String '10x
        Dim CusTyp As String '2x
        'ChnFnd=17
        Dim IbkInd As String '1x
        Dim IvrInd As String '1x
        Dim TelNum As String '25x
        'AccOffDat=13
        Dim OffCde As String '3x
        Dim OffUid As String '3x
        Dim TelNumCix As String '1x
        Dim TelNumSMS As String '1x
        Dim TelNumAlt As String '1x
        Dim RetCusExt As String '1x
        Dim TelNumFmt As String '3x
        Dim Rsv1 As String   '80x
    End Structure

    Public Structure ChnGrpItm_Struct
        Dim CusNumSec As String   '6n 
        Dim CusTyp As String   '2x 
        Dim CusPrfLng As String '  1x 
        Dim CusStaCde As String  ' 1x 
        Dim CusLevCde As String   '1x 
        Dim CidDoc As String   '2x 
        Dim CidNat As String   '2x 
        Dim CidVal As String   '10x 
        Dim CusNamEng As String  ' 35x 
        Dim CusNamAra As String  ' 35x 
        Dim CusSeg As String   '3x 
        Dim Rsv3 As String   '32x 
    End Structure

    Public Structure PrfDat_Struct
        Dim UseScp As String  '1x
        Dim UsePatEnq As String  '1x
        Dim UsePatReq As String  '1x
        Dim UsePatExe As String  '1x
        Dim UsePatSar As String  '1x
        Dim UsePatSwf As String  '1x
        Dim UseSta As String  '1x
        Dim UseVelDay As String  '8n
        Dim UseVelMth As String  '8n
        Dim UseCntDay As String  '4n
        Dim UseCntMth As String  '4n
        Dim UseMaxTrn As String  '8n
        Dim UseLimExp As String  '8n
        Dim UsePrfNam As String  '8x
        Dim LimPrfCde As String  '2x
        Dim CcfTacAcc As String  '1x
        Dim Rsv1 As String  '15x
        Dim UseSwfOur As String  '1x
        Dim Rsv2 As String  '32x
        Dim Emp2Emp As String  '1x
        Dim Ext2Emp As String  '1x
        Dim Rsv3 As String  '148x
        Public Function PackTable() As String
            Dim st As String
            st = AppInstance.PackString(UseScp, 1)
            st &= AppInstance.PackString(UsePatEnq, 1)
            st &= AppInstance.PackString(UsePatReq, 1)
            st &= AppInstance.PackString(UsePatExe, 1)
            st &= AppInstance.PackString(UsePatSar, 1)
            st &= AppInstance.PackString(UsePatSwf, 1)
            st &= AppInstance.PackString(UseSta, 1)
            st &= AppInstance.PackString(UseVelDay, 8)
            st &= AppInstance.PackString(UseVelMth, 8)
            st &= AppInstance.PackString(UseCntDay, 4)
            st &= AppInstance.PackString(UseCntMth, 4)
            st &= AppInstance.PackString(UseMaxTrn, 8)
            st &= AppInstance.PackString(UseLimExp, 8)
            st &= AppInstance.PackString(UsePrfNam, 8)
            st &= AppInstance.PackString(LimPrfCde, 2)
            st &= AppInstance.PackString(CcfTacAcc, 1)
            st &= AppInstance.PackString(Rsv1, 15)
            st &= AppInstance.PackString(UseSwfOur, 1)
            st &= AppInstance.PackString(Rsv2, 32)
            st &= AppInstance.PackString(Emp2Emp, 1)
            st &= AppInstance.PackString(Ext2Emp, 1)
            st &= AppInstance.PackString(Rsv3, 148)
            Return st
        End Function
    End Structure

    Public Structure CoreSys_EnrInf

        Public Structure ClpDat_Struct
            Dim ClpAct As String '1x
            Dim ClpNum() As String '25x
        End Structure

        Public Structure AutLst_Struct
            Dim AutCdeVal As String '4n
            Dim AutCdeSta As String '1x
            Dim AutCdeStp As String '16x
        End Structure

        Dim TabRowVer As String '12n
        'Dim CusKey As String '9
        Dim CusNum As String '6n
        Dim UsrSeq As String '3n
        Dim CorKey As String '10x
        Dim LocIde As String '10x
        Dim DepIde As String '10x
        Dim UsrKey As String '10x
        Dim IBKEnrNam As String '35x
        Dim CusTyp As String '2x
        Dim CusSeg As String '1x
        Dim SndStp As String '8n6n
        Dim SndUsrIde As String '10x
        Dim SndMsgSeq As String '12n
        Dim RcvStp As String '8n6n
        Dim RcvUsrIde As String '10x
        Dim RcvMsgSeq As String '12n
        'Dim RcvRspCde As String '10
        Dim RcvResVal As String '3n
        Dim RcvActCde As String '2n
        'Dim RcvRsv1 As String '5x
        Dim CrdCls As String '2x
        Dim CrdArc As String  '1x
        Dim LimPrfCde As String  '2x
        Dim AppStp As String '8n6n
        Dim AppUsrIde As String '10x
        Dim AppRef As String '12x
        Dim AppSrc As String '4x
        Dim SndToAdd As String '4x
        Dim AppSmtp As String '50x
        Dim AppTelMob As String '25x
        Dim UseScp As String '1x
        Dim UsePatEnq As String '1x
        Dim UsePatReq As String '1x
        Dim UsePatExe As String '1x
        Dim UsePatSar As String '1x
        Dim UsePatSwf As String '1x
        Dim UseSta As String '1x
        Dim UseVelDay As String '8n
        Dim UseVelMth As String '8n
        Dim UseCntDay As String '4n
        Dim UseCntMth As String '4n
        Dim UseMaxTrn As String '8n
        Dim UseLimExp As String '8n
        Dim UsePrfNam As String '8x
        Dim UseStp As String '8n6n
        Dim UseUsrIde As String '10x
        Dim CrdNum As String '16n
        Dim AccNum As String '13n
        Dim EnrReq As String '3x
        Dim EnrStp As String '8n6n
        Dim EnrAtm As String '4n
        Dim EnrCnt As String '4n
        Dim IBKUseIde As String '10x
        Dim IBKPwdPac As String '8x
        Dim IBKTrxPac As String '8x
        Dim IBKLngCde As String '1x
        Dim UseSwfOur As String '1x
        Dim IBKEngNam As String '35x
        Dim IBKArbNam As String '35x
        Dim ClpDat As ClpDat_Struct '76
        'Dim AutDat As String '29
        Dim AutAct As String '1x
        Dim AutLstSer As String '4n
        Dim AutSrcCre As String '4x
        Dim AutDstCre As String '4x
        Dim AutStpCre As String '16x
        Dim AutLst() As AutLst_Struct '315
        'Dim SMSEnrDat As String '46
        Dim SMSEnr As String '1x
        Dim SMSEnrStp As String '8n6n
        Dim SMSEnrSta As String '1x
        Dim SMSEnrCnt As String '4n
        Dim SMSTelMob As String '25x
        Dim SMSLngCde As String '1x
        Dim RsvDat2 As String '15x
        'Dim SecDevDat As String '32
        Dim SecDevFlg As String '1x
        Dim SecDevAct As String '1x
        Dim SecDevIde As String '8x
        Dim SecDevVnd As String '3x
        Dim RsvDat21 As String '19x
        Dim EnrSgnCnt As String '6n
        Dim SndTryCnt As String '2n
        Dim SndTryStp As String '8n6n
        Dim SndTryPro As String '6x
        Dim SndPrfNam As String '8x
        Dim LocEmp2Emp As String '1x
        Dim LocExt2Emp As String '1x
        'Dim NomNatIde As String  '16
        Dim NomNatCde As String  '2x
        Dim NomDocTyp As String  '2x
        Dim NomDocNum As String  '12x
        Dim NomKeySet As String  '8x
        Dim NomEncPwd As String  '8x
        Dim NomBusDte As String  '8x
        Dim NomPwdStp As String  '8n6n
        Dim NomPwdSnd As String  '8n6n
        Dim NomUseSnd As String  '10x
        Dim NomBusTim As String  '6x
        Dim NomPwdCnt As String  '4n
        Dim NomPwdTak As String  '4n
        Dim NomPwdCon As String  '4x
        Dim RsvDat22 As String '4x
        Dim CcfTacAcc As String  '1x
        Dim CcfHowEnr As String  '1x
        Dim Ccf1stEnr As String   '1x
        Dim CcfTrxPwd As String   '1x
        Dim RsvCcf1 As String  '8
        Dim RsvDat3 As String '342


        Public Sub Initialize()
            ReDim AutLst(14) '15 elements: 0 to 14
            ReDim ClpDat.ClpNum(2) '3 Elements
        End Sub
    End Structure

    Public Structure TelItm_Struct
        Dim NumFmt As String '1x	Number format:”K”=Standard KSA, ”I”=Standard International “U”=Non-standard format, Space = item not present
        Dim NumSrc As String '3x	Number source:“CIX” = Extended customer info.“SMS” = SMS banking, “ALT” = SMS Alerting
        Dim NumTyp As String '1x	Number type:“M” = Mobile number, “L” = Land line
        Dim TelNum As String '25x	Telephone number
    End Structure

    Public Structure IceCusItm_Struct
        Dim CusNum As String '6x
        Dim CusTyp As String '2x
        Dim CusNam As String '35x
        Dim CusCID As String '14x
        Dim IbkCrpIde As String '10x
        Dim IbkUsrIde As String '10x
        Dim IvrCrpIde As String '10x
        Dim IvrUsrIde As String '10x
        Dim AccOff As String     '3x
        Dim AccOffUid As String '10x
        Dim AccMgrUid As String '10x
        Dim TxtUsrIde As String '8x
        Dim TxtSep1 As String   '1x
        Dim TxtOffCde As String '3x
        Dim TxtSep2 As String   '1x
        Dim TxtOffNam As String '22x
        Dim CusMnm As String    '9x
        Dim CusDefBrn As String '4x
        Dim CusStaCde As String '1x
        Dim CusGrp As String    '6x
        Dim IBKRetCnt As String '2n
        Dim IBKCavCnt As String '2n
        Dim IBKCorCnt As String '2n
        Dim CidExpDte As String '8x
        Dim CusSnsLev As String '1x
        Dim CusLngCde As String '2x	Preferred language “AR”=Arabic, “EN”=English (GFPF.GFLNM)
        Dim Rsv1 As String      '8x
        Dim TelItm() As TelItm_Struct
        Dim Rsv200 As String '55x	Reserved, space filled
        Dim CusNamAlt As String '35x	Customer name (Arabic) always from field GFCUNA
    End Structure

    Public Structure EnumCusDtls_ACC
        Dim ItmTyp As String  '3x
        Dim ObjCcy As String  '3x
        Dim ObjAccTyp As String  '2x
        Dim ObjStaCde As String  '1x
        Dim ObjKey As String  '13x
        Dim ObjOpnDte As String  '8n
        Dim ObjStmPrv As String  '8n
        Dim ObjStmNxt As String  '8n
        Dim ObjBalDat As String  '81x
        Dim ObjAccSec As String  '8x
        Dim ObjAccOff As String  '22x
    End Structure

    Public Structure EnumCusDtls_TDA
        Dim ItmTyp As String  '3x
        Dim ObjCcy As String  '3x
        Dim ObjTypCde As String  '3x
        Dim ObjStaCde As String  '1x
        Dim ObjKey As String  '20x
        Dim ObjOpnDte As String  '8n
        Dim ObjMatDte As String  '8n
        Dim Rsv1 As String  '8x
        Dim ObjComRte As String  '5n7n
        Dim ObjPrnAmt As String  '14n
        Dim ObjComAmt As String  '14n
        Dim ObjRelObj As String  '13x
        Dim Rsv2 As String  '28x
        Dim ObjAccOff As String  '22x
        Dim XtrFndAcc As String  '13x   -- Extra
    End Structure

    Public Structure EnumCusDtls_LAA
        Dim ItmTyp As String  '3x
        Dim ObjCcy As String  '3x
        Dim ObjTypCde As String  '3x
        Dim ObjStaCde As String  '1x
        Dim ObjKey As String  '20x
        Dim ObjOpnDte As String  '8n
        Dim ObjClsDte As String  '8n
        Dim ObjPayDte As String  '8n
        Dim ObjComRte As String  '5n7n
        Dim ObjPrnAmt As String  '14n
        Dim ObjDueAmt As String  '14n
        Dim ObjRelObj As String  '13x
        Dim ObjRstAmt As String  '14n
        Dim ObjOvrDue As String  '14n
        Dim ObjAccOff As String  '22x
        Dim XtrFndAcc As String  '13x   -- Extra
    End Structure

    Public Structure EnumCusDtls_IVR
        Dim ItmTyp As String  '3x
        Dim CorKey As String  '10x
        Dim LocIde As String  '10x
        Dim DepIde As String  '10x
        Dim UsrKey As String  '10x
        Dim UseScp As String  '1x
        Dim UsePatEnq As String  '1x
        Dim UsePatReq As String  '1x
        Dim UsePatExe As String  '1x
        Dim Rsv11 As String  '25x
        Dim ClpAct As String  '1x
        Dim ClpNum As String  '1n
        Dim ClpVal1 As String  '25x
        Dim ClpVal2 As String  '25x
        Dim ClpVal3 As String  '25x
        Dim AutAct As String  '1x
        Dim Rsv10 As String  '8x
        Dim XtrFndAcc As String  '13x   -- Extra
    End Structure

    Public Structure EnumCusDtls_IBK
        Dim ItmTyp As String  '3x
        Dim CorKey As String  '10x
        Dim LocIde As String  '10x
        Dim DepIde As String  '10x
        Dim UsrKey As String  '10x
        Dim UseScp As String  '1x
        Dim UsePatEnq As String  '1x
        Dim UsePatReq As String  '1x
        Dim UsePatExe As String  '1x
        Dim Rsv10 As String  '110
        Dim XtrFndAcc As String  '13x   -- Extra
    End Structure

    Public Structure ExEnumCusDtls_RNK
        Dim ItmTyp As String '3x
        Dim AutRnkDat As AutRnkDat_Struct '168x
        Dim ManRnkDat As ManRnkDat_Struct '26x
        Dim Rsv2 As String '103x
        Public Sub ReadTable(ByRef MsgStr As String)
            ItmTyp = AppInstance.strip(MsgStr, 3)
            ManRnkDat.ReadTable(MsgStr)
            ManRnkDat.ReadTable(MsgStr)
            Rsv2 = AppInstance.strip(MsgStr, 103)
        End Sub
        Public Function PackTable() As String
            Dim st As String
            st &= AppInstance.PackString(ItmTyp, 3)
            st &= AutRnkDat.PackTable()
            st &= ManRnkDat.PackTable()
            st &= AppInstance.PackString(Rsv2, 103)
            Return st
        End Function
    End Structure

    Public Structure ExEnumCusDtls_ACC
        Dim ItmTyp As String  '3x
        Dim ObjCcy As String  '3x
        Dim ObjAccTyp As String  '2x
        Dim ObjStaCde As String  '1x
        Dim ObjKey As String  '13x
        Dim ObjOpnDte As String  '8n
        Dim ObjStmPrv As String  '8n
        Dim ObjStmNxt As String  '8n
        Dim ObjBalDat As BalDat_Struct  '81x
        Dim ObjAccSec As String  '8x
        Dim ObjAccOff As String  '22x
        Dim TabRowVer As String '12
        'ChnSrv[3]   3*16
        Dim ChgSee1 As String '1x
        Dim CanSee1 As String '1x
        Dim ChgTrx1 As String '1x
        Dim CanTrx1 As String '1x
        Dim Rsv23_1 As String '12x
        Dim DepPatEnq1 As String '1x
        Dim DepPatReq1 As String '1x
        Dim DepPatExe1 As String '1x
        Dim DepAccDeb1 As String '1x
        Dim DepAccCrd1 As String '1x
        Dim DepAccDea1 As String '1x

        Dim ChgSee2 As String '1x
        Dim CanSee2 As String '1x
        Dim ChgTrx2 As String '1x
        Dim CanTrx2 As String '1x
        Dim Rsv23_2 As String '12x
        Dim DepPatEnq2 As String '1x
        Dim DepPatReq2 As String '1x
        Dim DepPatExe2 As String '1x
        Dim DepAccDeb2 As String '1x
        Dim DepAccCrd2 As String '1x
        Dim DepAccDea2 As String '1x

        Dim ChgSee3 As String '1x
        Dim CanSee3 As String '1x
        Dim ChgTrx3 As String '1x
        Dim CanTrx3 As String '1x
        Dim Rsv23_3 As String '12x
        Dim DepPatEnq3 As String '1x
        Dim DepPatReq3 As String '1x
        Dim DepPatExe3 As String '1x
        Dim DepAccDeb3 As String '1x
        Dim DepAccCrd3 As String '1x
        Dim DepAccDea3 As String '1x

        Dim CrpDepIde As String '10x
        Dim SibCanSee As String '1x
        Dim SibCanCre As String '1x
        Dim SibCanDeb As String '1x
        Dim HijOpnDte As String 'as string '8n
        Dim HijStmPrv As String '8n
        Dim HijStmNxt As String '8n
        Dim ClsReaCde As String '2x
        Dim FlgDecLiq As String '1x
        Dim IbnPfx As String '8x
        Dim StmSupFlg As String '1x
        Dim AccStmFrq As String '2x
        Dim StmSupRea As String '2x
        Dim Rsv24 As String '30x


        'Cached Data
        Dim AtmDatEx As AtmDatEx_Struct
        Dim AtmTrx() As On2TrxDat_Struct

        'Dim LoaDet() As ExEnumCusDtls_LAI
        Dim LoaDet() As ExEnumCusDtls_LAX       ' Y600KHDA - Loan Closure
    End Structure

    Public Structure ExEnumCusDtls_TDA
        Dim ItmTyp As String  '3x
        Dim ObjCcy As String  '3x
        Dim ObjTypCde As String  '3x
        Dim ObjStaCde As String  '1x
        Dim ObjKey As String  '20x
        Dim ObjOpnDte As String  '8n
        Dim ObjMatDte As String  '8n
        Dim Rsv1 As String  '8x
        Dim ObjComRte As String  '5n7n
        Dim ObjPrnAmt As String  '14n
        Dim ObjComAmt As String  '14n
        Dim ObjRelObj As String  '13x
        Dim Rsv2 As String  '28x
        Dim ObjAccOff As String  '22x
        Dim XtrFndAcc As String  '13x   -- Extra
        Dim Rsv11 As String '143
    End Structure

    '''Y600KHDA: Loan Closure Update

    Public Structure ExEnumCusDtls_LAA
        Dim ItmTyp As String  '3x
        Dim ObjCcy As String  '3x
        Dim ObjTypCde As String  '3x
        Dim ObjStaCde As String  '1x
        Dim ObjKey As String  '20x
        Dim ObjOpnDte As String  '8n
        Dim ObjClsDte As String  '8n
        Dim ObjPayDte As String  '8n
        Dim ObjComRte As String  '5n7n
        Dim ObjPrnAmt As String  '14n
        Dim ObjDueAmt As String  '14n
        Dim ObjRelObj As String  '13x
        Dim ObjRstAmt As String  '14n
        Dim ObjOvrDue As String  '14n
        Dim ObjAccOff As String  '22x
        Dim XtrFndAcc As String  '13x   -- Extra
        '----------------RspExt------------
        Dim HijOpnDte As String  '8n
        Dim HijMatDte As String  '8n
        Dim HijPayDte As String  '8n
        Dim PrnAmtRem As String  '14n
        Dim ComAmtAcc As String  '14n
        Dim ComRatPct As String  '2n7n
        Dim ComDayGon As String  '2n

        'LAX Strcuture - Equation Application Code
        Dim EqnAppCde As String  '2x
        '''Y600KHDA [28/02/2010]: Loan Performance 
        Dim PrfCurSta As String  '2x
        Dim PrfCurDte As String  '8x
        Dim PrfManFlg As String  '1x
        Dim LoaApr As String     '2n5n	Loan annual percentage rate (APR)
        Dim Rsv24 As String      '60x
    End Structure

    Public Structure ExEnumCusDtls_IVR
        Dim ItmTyp As String  '3x
        Dim CorKey As String  '10x
        Dim LocIde As String  '10x
        Dim DepIde As String  '10x
        Dim UsrKey As String  '10x
        Dim UseScp As String  '1x
        Dim UsePatEnq As String  '1x
        Dim UsePatReq As String  '1x
        Dim UsePatExe As String  '1x
        Dim Rsv11 As String  '25x
        Dim ClpAct As String  '1x
        Dim ClpNum As String  '1n
        Dim ClpVal1 As String  '25x
        Dim ClpVal2 As String  '25x
        Dim ClpVal3 As String  '25x
        Dim AutAct As String  '1x
        Dim Rsv10 As String  '8x
        Dim XtrFndAcc As String  '13x   -- Extra
        Dim Rsv1 As String '143
    End Structure

    Public Structure ExEnumCusDtls_IBK
        Dim ItmTyp As String  '3x
        Dim CorKey As String  '10x
        Dim LocIde As String  '10x
        Dim DepIde As String  '10x
        Dim UsrKey As String  '10x
        Dim UseScp As String  '1x
        Dim UsePatEnq As String  '1x
        Dim UsePatReq As String  '1x
        Dim UsePatExe As String  '1x
        Dim Rsv10 As String  '110
        Dim XtrFndAcc As String  '13x   -- Extra
        Dim Rsv1 As String '143
    End Structure

    Public Structure ExEnumCusDtls_SMS
        Dim ItmTyp As String  '3x
        Dim TabRowVer As String  '12n
        Dim CusNum As String  '6n
        Dim SmsTelNum As String  '25x
        Dim SmsLng As String  '2x
        Dim SmsAccNum As String  '13x
        Dim SmsRegAct As String  '1x
        Dim SmsPatDat As String  '6x
        Dim Rsv01 As String  '15x
        Dim UsrStpDat As String  '30x
        Dim Rsv10 As String  '44x
    End Structure

    Public Structure ExEnumCusDtls_ALT
        Dim ItmTyp As String        ' 3x Type of item in this slot: ALT = SMS alerting registration details
        'Dat708031                  144 Structure is the same as that in message 708031
        Dim TabRowVer As String     ' 12n	•	Table row version
        Dim CusNum As String        ' 6n	•	Customer number
        Dim AltTelNum As String     ' 25x	•	Mobile phone number
        Dim AltMobFlg As String     ' 1x	•	Flag (Y/N) alerts to be sent to the mobile
        Dim AltEmlAdd As String     ' 50x	•	E-mail address (or spaces)
        Dim AltEmlFlg As String     ' 1x	•	Flag (Y/N) alerts to be sent to the e-mail address
        Dim AltPatDat As String     ' 6x	•	Usage pattern (see ChnPatDat structure)
        Dim AltLngFlg As String     ' 2x	•	Language code (AR=Arabic, EN=English)
        Dim AltRegFlg As String     ' 1x	•	Flag (Y/N) indicating whether registered
        Dim Rsv02 As String         ' 20x	•	Reserved, space filled
        Dim UsrStpDat As String     ' 30x	•	User date and time stamp
        Dim Rsv10 As String         ' 5x	Reserved (space filled)
        'IfjRspCde                  5x	IFJ tracking data (or spaces if not filled)
        Dim IfjResVal As String ' 3n	•	Reason code
        Dim IfjActCde As String ' 2n	•	Action code
    End Structure

    Public Structure ExEnumCusDtls_GRP
        Dim ItmTyp As String  '3x
        Dim GrpTyp As String  '8x
        Dim CusPrmSec As String  '6n
        Dim CusNumPrm As String  '6n
        Dim CusCnt As String  '2n
        Dim CusNumSec() As String  '30*6n
        Dim Rsv1 As String  '95x
        Public Sub Reset()
            ItmTyp = "" '3x
            GrpTyp = "" '8x
            CusPrmSec = "" '6n
            CusNumPrm = "" '6n
            CusCnt = "" '2n
            Erase CusNumSec '30*6n
            Rsv1 = "" '95x
        End Sub
    End Structure

    Public Structure MobTel_IBK_Struct
        Dim Tel As String '25x
        Dim Typ As String '1x
    End Structure

    Public Structure EmlAdr_IBK_Struct
        Dim Eml As String '50x
        Dim Typ As String '1x
    End Structure

    Public Structure ExEnumCusDtls_CSX
        Dim ItmTyp As String '3x
        Dim EmlCnt As String '1n
        Dim MobCnt As String '1n
        Dim MobTel() As MobTel_IBK_Struct
        Dim EmlAdr() As EmlAdr_IBK_Struct
        Dim Rsv1 As String '115x
        Public Sub Reset()
            Dim i As Integer
            ItmTyp = "" '3x
            EmlCnt = "" '1n
            MobCnt = "" '1n
            ReDim MobTel(2) '3 items
            For i = 0 To 2
                MobTel(i).Tel = ""
                MobTel(i).Typ = ""
            Next
            ReDim EmlAdr(1) '2 items
            For i = 0 To 1
                EmlAdr(i).Eml = ""
                EmlAdr(i).Typ = ""
            Next
            Rsv1 = "" '115x
        End Sub
    End Structure

    Public Structure CmpAccDat_Struct
        Dim ClsTxtLng As String  '2x
        Dim ClsTxtLen As String  '3n
        Dim ClsTxt As String  '250x
        Dim RsvCmp01 As String  '2745x
    End Structure

    Public Structure AccDtlEx_Struct
        Dim CusNum As String
        Dim CidDoc As String '2x
        Dim CidNat As String '2x
        Dim CidVal As String '10x
        Dim ACC As ExEnumCusDtls_ACC '300x
        Dim InvPrdTyp As String '3x
        Dim InvMgnPct As String '3n
        Dim InvPolFlg As String '1x
        Dim NamFlgEng As String '1x
        Dim NamFlgAra As String '1x
        Dim NamShtEng As String '25x
        Dim NamShtAra As String '25x
        Dim NadFlgEng As String '1x
        Dim NadFlgAra As String '1x
        Dim NamAddEng1 As String '35x
        Dim NamAddEng2 As String '35x
        Dim NamAddEng3 As String '35x
        Dim NamAddEng4 As String '35x
        Dim NamAddAra1 As String '35x
        Dim NamAddAra2 As String '35x
        Dim NamAddAra3 As String '35x
        Dim NamAddAra4 As String '35x
        Dim CmpAccDat As CmpAccDat_Struct
        Dim CusSeg As String '3x
        Dim CusRetRnk As String '1x
        Dim CusLngCde As String ' 2x Preferred language “AR”=Arabic, “EN”=English)
        Dim Rsv1 As String '91x

        Public Sub ReadTable(ByRef MsgDat As String)
            CusNum = AppInstance.strip(MsgDat, 6)
            'CusCid 14
            CidDoc = AppInstance.strip(MsgDat, 2)
            CidNat = AppInstance.strip(MsgDat, 2)
            CidVal = AppInstance.strip(MsgDat, 10)

            'AccExtItm 300
            ACC.ItmTyp = AppInstance.strip(MsgDat, 3) '3x
            ACC.ObjCcy = AppInstance.strip(MsgDat, 3) '3x
            ACC.ObjAccTyp = AppInstance.strip(MsgDat, 2) '2x
            ACC.ObjStaCde = AppInstance.strip(MsgDat, 1) '1x
            ACC.ObjKey = AppInstance.strip(MsgDat, 13) '13x
            ACC.ObjOpnDte = AppInstance.strip(MsgDat, 8) '8n
            ACC.ObjStmPrv = AppInstance.strip(MsgDat, 8) '8n
            ACC.ObjStmNxt = AppInstance.strip(MsgDat, 8) '8n
            With ACC.ObjBalDat 'AppInstance.strip(MsgDat, 81) 'BalDat
                .BalAvl = AppInstance.strip(MsgDat, 15)
                .BalHld = AppInstance.strip(MsgDat, 14)
                .BalClr = AppInstance.strip(MsgDat, 15)
                .BalLdg = AppInstance.strip(MsgDat, 15)
                .OvdLim = AppInstance.strip(MsgDat, 14)
                .OvdExp = AppInstance.strip(MsgDat, 8)
            End With

            ACC.ObjAccSec = AppInstance.strip(MsgDat, 8) '8x
            ACC.ObjAccOff = AppInstance.strip(MsgDat, 22) '22x
            ACC.TabRowVer = AppInstance.strip(MsgDat, 12)

            ACC.ChgSee1 = AppInstance.strip(MsgDat, 1)
            ACC.CanSee1 = AppInstance.strip(MsgDat, 1)
            ACC.ChgTrx1 = AppInstance.strip(MsgDat, 1)
            ACC.CanTrx1 = AppInstance.strip(MsgDat, 1)
            ACC.Rsv23_1 = AppInstance.strip(MsgDat, 6)
            ACC.DepPatEnq1 = AppInstance.strip(MsgDat, 1)
            ACC.DepPatReq1 = AppInstance.strip(MsgDat, 1)
            ACC.DepPatExe1 = AppInstance.strip(MsgDat, 1)
            ACC.DepAccDeb1 = AppInstance.strip(MsgDat, 1)
            ACC.DepAccCrd1 = AppInstance.strip(MsgDat, 1)
            ACC.DepAccDea1 = AppInstance.strip(MsgDat, 1)

            ACC.ChgSee2 = AppInstance.strip(MsgDat, 1)
            ACC.CanSee2 = AppInstance.strip(MsgDat, 1)
            ACC.ChgTrx2 = AppInstance.strip(MsgDat, 1)
            ACC.CanTrx2 = AppInstance.strip(MsgDat, 1)
            ACC.Rsv23_2 = AppInstance.strip(MsgDat, 6)
            ACC.DepPatEnq2 = AppInstance.strip(MsgDat, 1)
            ACC.DepPatReq2 = AppInstance.strip(MsgDat, 1)
            ACC.DepPatExe2 = AppInstance.strip(MsgDat, 1)
            ACC.DepAccDeb2 = AppInstance.strip(MsgDat, 1)
            ACC.DepAccCrd2 = AppInstance.strip(MsgDat, 1)
            ACC.DepAccDea2 = AppInstance.strip(MsgDat, 1)

            ACC.ChgSee3 = AppInstance.strip(MsgDat, 1)
            ACC.CanSee3 = AppInstance.strip(MsgDat, 1)
            ACC.ChgTrx3 = AppInstance.strip(MsgDat, 1)
            ACC.CanTrx3 = AppInstance.strip(MsgDat, 1)
            ACC.Rsv23_3 = AppInstance.strip(MsgDat, 6)
            ACC.DepPatEnq3 = AppInstance.strip(MsgDat, 1)
            ACC.DepPatReq3 = AppInstance.strip(MsgDat, 1)
            ACC.DepPatExe3 = AppInstance.strip(MsgDat, 1)
            ACC.DepAccDeb3 = AppInstance.strip(MsgDat, 1)
            ACC.DepAccCrd3 = AppInstance.strip(MsgDat, 1)
            ACC.DepAccDea3 = AppInstance.strip(MsgDat, 1)

            ACC.CrpDepIde = AppInstance.strip(MsgDat, 10)
            ACC.SibCanSee = AppInstance.strip(MsgDat, 1)
            ACC.SibCanCre = AppInstance.strip(MsgDat, 1)
            ACC.SibCanDeb = AppInstance.strip(MsgDat, 1)
            ACC.HijOpnDte = AppInstance.strip(MsgDat, 8)
            ACC.HijStmPrv = AppInstance.strip(MsgDat, 8)
            ACC.HijStmNxt = AppInstance.strip(MsgDat, 8)
            ACC.ClsReaCde = AppInstance.strip(MsgDat, 2)
            ACC.FlgDecLiq = AppInstance.strip(MsgDat, 1)
            ACC.IbnPfx = AppInstance.strip(MsgDat, 8)
            ACC.StmSupFlg = AppInstance.strip(MsgDat, 1)
            ACC.AccStmFrq = AppInstance.strip(MsgDat, 2)
            ACC.StmSupRea = AppInstance.strip(MsgDat, 2)
            ACC.Rsv24 = AppInstance.strip(MsgDat, 30)

            InvPrdTyp = AppInstance.strip(MsgDat, 3)
            InvMgnPct = AppInstance.strip(MsgDat, 3)
            InvPolFlg = AppInstance.strip(MsgDat, 1)
            NamFlgEng = AppInstance.strip(MsgDat, 1)
            NamFlgAra = AppInstance.strip(MsgDat, 1)
            NamShtEng = AppInstance.strip(MsgDat, 25)
            NamShtAra = AppInstance.strip(MsgDat, 25)
            NadFlgEng = AppInstance.strip(MsgDat, 1)
            NadFlgAra = AppInstance.strip(MsgDat, 1)
            NamAddEng1 = AppInstance.strip(MsgDat, 35)
            NamAddEng2 = AppInstance.strip(MsgDat, 35)
            NamAddEng3 = AppInstance.strip(MsgDat, 35)
            NamAddEng4 = AppInstance.strip(MsgDat, 35)
            NamAddAra1 = AppInstance.strip(MsgDat, 35)
            NamAddAra2 = AppInstance.strip(MsgDat, 35)
            NamAddAra3 = AppInstance.strip(MsgDat, 35)
            NamAddAra4 = AppInstance.strip(MsgDat, 35)
            CusSeg = AppInstance.strip(MsgDat, 3)
            CusRetRnk = AppInstance.strip(MsgDat, 1)
            CusLngCde = AppInstance.strip(MsgDat, 2)
            Rsv1 = AppInstance.strip(MsgDat, 91)

            CmpAccDat.ClsTxtLng = AppInstance.strip(MsgDat, 2)
            CmpAccDat.ClsTxtLen = AppInstance.strip(MsgDat, 3)
            CmpAccDat.ClsTxt = AppInstance.strip(MsgDat, 250)
            CmpAccDat.RsvCmp01 = AppInstance.strip(MsgDat, 2745)
        End Sub
    End Structure


    Public Structure AccItm_Struct
        Dim AccNum As String '	13x	The account number
        Dim AccCcy As String '	3x	Account currency code (ISO alpha code)
        Dim AccTyp As String '2x	Account type
        Dim AccStaCde As String '1x	Account status (O = Open & active, B = Blocked, C = Closed)
        Dim AccOpnDte As String '8n	Account opening date (YYYYMMDD)
        Dim AccBalAvl As String '14ns	Account available balance
        Dim AccBalLdg As String '14ns	Account ledger balance
        Dim NamShtEng As String '25x	Equation (account) short name (English)
        Dim NamShtAra As String '25x	Equation (account) short name (Arabic)
        Dim AccSndCde As String '2x	Account sundry analysis code
        Dim Rsv1 As String '41x	Reserved (space filled)


    End Structure


    Public Structure AccIntDtl_Struct
        Dim AccNum As String '13x	Account number
        Dim Rsv1 As String 'Rsv1	55x	Reserved (space filled)
        Dim ItmCnt As Integer '2n	The number of account items returned
        Dim ACC() As AccItm_Struct '300x


        Public Sub ReadTable(ByRef MsgDat As String)
            Dim cnt As Integer

            AccNum = AppInstance.strip(MsgDat, 13)
            Rsv1 = AppInstance.strip(MsgDat, 55)
            ItmCnt = AppInstance.ExInt(AppInstance.strip(MsgDat, 2))
            cnt = ItmCnt
            If cnt > 0 Then

                ReDim ACC(cnt - 1)
                For i As Integer = 0 To cnt - 1
                    ACC(i).AccNum = AppInstance.strip(MsgDat, 13) '3x
                    ACC(i).AccCcy = AppInstance.strip(MsgDat, 3) '3x
                    ACC(i).AccTyp = AppInstance.strip(MsgDat, 2) '3x
                    ACC(i).AccStaCde = AppInstance.strip(MsgDat, 1) '3x
                    ACC(i).AccOpnDte = AppInstance.strip(MsgDat, 8) '3x
                    ACC(i).AccBalAvl = AppInstance.strip(MsgDat, 15) '3x
                    ACC(i).AccBalLdg = AppInstance.strip(MsgDat, 15) '3x
                    ACC(i).NamShtEng = AppInstance.strip(MsgDat, 25) '3x
                    ACC(i).NamShtAra = AppInstance.strip(MsgDat, 25) '3x
                    ACC(i).AccSndCde = AppInstance.strip(MsgDat, 2) '3x
                    ACC(i).Rsv1 = AppInstance.strip(MsgDat, 41) '3x

                Next
            End If



        End Sub
    End Structure

    Public Class SysCfgDat_Class
        Public ScdFlg(7) As String '8*1x	Flags (Y/N) indicating a feature to be active (Y) or suppressed (N).
        ' ScdRsv 24x	Feature string
        '   ScdSecDev 16	Security device data (or spaces if not present)
        Public SsdDevFlg As String '1x	•	[SecDevFlg] Flag (Y/N) to indicate token issued
        Public SsdDevAct As String '1x	•	[SecDevAct] Flag (Y/N) to indicate if a security token is active
        Public SsdDevIde As String '8x	•	[SecDevIde] Security device identity (serial)
        Public SsdDevVnd As String '3x	•	[SecDevVnd] Security device vendor: RSA=RSA (hardware token), VSC=Vasco (hardware token),2BK= Mobile OTP (eSafe),	2MS=Mobile OTP (SMS), Spaces = No authentication device
        Public SsdDevUse As String '1x	•	[SecDevUse] Security device usage code
        Public SsdRsv100 As String '2x	•	Reserved, space filled
        Public ScdRsv200 As String '8x	Reserved, space filled

        Public Sub ReadTable(ByRef Resp As String)
            For i As Integer = 0 To 7
                ScdFlg(i) = AppInstance.strip(Resp, 1)
            Next
            'ScdRsv	24x
            ' ScdSecDev 16
            SsdDevFlg = AppInstance.strip(Resp, 1)
            SsdDevAct = AppInstance.strip(Resp, 1)
            SsdDevIde = AppInstance.strip(Resp, 8)
            SsdDevVnd = AppInstance.strip(Resp, 3)
            SsdDevUse = AppInstance.strip(Resp, 1)
            SsdRsv100 = AppInstance.strip(Resp, 2)
            ScdRsv200 = AppInstance.strip(Resp, 8)
        End Sub
    End Class

    Public Structure CusInf_Struct
        Dim CusNum As String
        Dim CusNumCnt As String
        Dim CusPrfLng As String
        Dim CusStaCde As String
        Dim CusLevCde As String
        Dim CusMchFlg As String
        Dim CusNamEng1 As String
        Dim CusNamEng2 As String
        Dim CusNamEng3 As String
        Dim CusNamEng4 As String
        Dim CusNamAra1 As String
        Dim CusNamAra2 As String
        Dim CusNamAra3 As String
        Dim CusNamAra4 As String
    End Structure

    Public Structure ExCusInf_Struct
        Dim CusNum As String
        Dim CusNumCnt As String
        Dim CusPrfLng As String
        Dim CusStaCde As String
        Dim CusLevCde As String
        Dim CusMchFlg As String
        Dim CusNamEng1 As String
        Dim CusNamEng2 As String
        Dim CusNamEng3 As String
        Dim CusNamEng4 As String
        Dim CusNamAra1 As String
        Dim CusNamAra2 As String
        Dim CusNamAra3 As String
        Dim CusNamAra4 As String
        Dim CusWveIst As String
        Dim CusSeg As String
        Dim CusCanTrd As String
        Dim DefCanTrd As String
        Dim CusWveOn2 As String '1x	Flag (Y/N) ON2 charges waived	
        Dim SmsWveMbk As String '1x
        Dim SmsWveAlt As String '1x
        Dim EmlWveAlt As String '1x
        Dim CusUseSer As String '1x
        Dim CusCanIpo As String '1x
        Dim CusDebAcc As String '1x
        Dim CusDebSar As String '1x
        Dim CusCanSms As String '1x
        Dim CusCanAlt As String '1x
        Dim CusYeeFlg As String '1x
        Dim YeeIde As String '4x
        Dim YeeNetSrc As String '4x
        Dim YeeNetIde As String '10x
        Dim YeeIntEml As String '1x
        Dim YeeExtEml As String '1x

        Dim CusRegSms As String '1x
        Dim CusRegAlt As String '1x
        Dim ChnAltAct As String '1x
        Dim ChnAltDiv As String '2x
        Dim CusSnsLev As String '1x Customer sensitivity level (space indicating “0”, or “0” to “3”)
        Dim CusRetRnk As String '1x	Customer (Retail) rank
        'PrfEqnDat	23	Equation loan performance data structure
        Dim PrfEqnFlg As String '	1x	Flag (Y/N or space) indicating Equation loan status data is present
        Dim PrfCurSta As String '	2x	Equation loan (performance) current status (H3BF) or spaces
        Dim PrfCurDte As String '	8x	Date current status was established (YYYYMMDD) or spaces.
        Dim PrfPrvSta As String '	2x	Equation loan (performance) previous status (H3BF) or spaces
        Dim PrfMaxDte As String '	8x	Date worst status was established (YYYYMMDD) or spaces.
        Dim PrfMaxSta As String '	2x	Equation loan (performance) worsts status (H3BF) or spaces

        Dim CusRskCde As String '	3x	(Retail) High risk individual code (or spaces)
        Dim CusPEPCde As String '	3x	(Retail) Politically exposed or related code (or spaces)
        Dim CusOpics As String  '   1x	Flag (Y/N) indicates that this is an OPICS customer

        Dim CusAnaCde As String '   2x	Analysis code
        Dim CusSndCde As String '   2x	Sundry analysis code
        Dim CusCanPyr As String '   1x	Flag (Y/N or space) Customer can have payrolls
        Dim CusCanSeg As String '   3x	Customer may use systems as though he were in the segments named:"RET" = Retail,"COR" = Corporate,"UNC" = Unclassified,"RAC" = Retail and Corporate,Spaces = as stated in CusSeg only

        Dim CusClk2Trd As String '  1x Flag (Y/N) indicating customer has accepted Click-2-Trade agreement

        Dim Rsv4 As String '	33x	Reserved (space filled)

        Dim SagAllCnt As String '3n
        Dim SagOpnCnt As String '3n
        Dim SagBnkTak As String '1x


        Dim CidExpDte As String '8x
        Dim SysCfgDat As SysCfgDat_Class '32x
        Dim AmcAccFlg As String '1x
        Dim AmcAccStp As String '14x
        Dim CidDoc As String '2x
        Dim CidNat As String '2x
        Dim CidVal As String '10x
        Dim BrcAccFlg As String '1x
        Dim BrcAccStp As String '14x
        Dim CidErrCde As String '3x	Error code associated with customer identity or spaces
        Dim StmSupFlg As String '1X	Flag (Y/N) indicating statement printing suppression state (space = N)
        Dim RifLnkDwn As String '1x Flag (Y/N) indicating if the RIF link is down (space = N)
        Dim StmSupRea As String '2x Statement suppression reason code (see StmSupRea AP1234)
        Dim Rsv5 As String '3x Reserved, space filled

        Public Sub Reset()
            CusNum = ""
            CusNumCnt = ""
            CusPrfLng = ""
            CusStaCde = ""
            CusLevCde = ""
            CusMchFlg = ""
            CusNamEng1 = ""
            CusNamEng2 = ""
            CusNamEng3 = ""
            CusNamEng4 = ""
            CusNamAra1 = ""
            CusNamAra2 = ""
            CusNamAra3 = ""
            CusNamAra4 = ""
            CusWveIst = ""
            CusSeg = ""
            CusCanTrd = ""
            DefCanTrd = ""
            CusWveOn2 = ""
            SmsWveMbk = ""
            SmsWveAlt = ""
            EmlWveAlt = ""
            CusUseSer = ""
            CusCanIpo = ""
            CusDebAcc = ""
            CusDebSar = ""
            CusCanSms = ""
            CusCanAlt = ""
            CusYeeFlg = ""
            YeeIde = ""
            YeeNetSrc = ""
            YeeNetIde = ""
            YeeIntEml = ""
            YeeExtEml = ""
            CusRegSms = ""
            CusRegAlt = ""
            ChnAltAct = ""
            ChnAltDiv = ""
            CusSnsLev = ""
            CusOpics = ""
            CusAnaCde = ""
            CusSndCde = ""
            CusCanPyr = ""
            CusCanSeg = ""
            CusClk2Trd = ""
            Rsv4 = ""
            SagAllCnt = ""
            SagOpnCnt = ""
            SagBnkTak = ""
            CidExpDte = ""
            SysCfgDat = Nothing
            AmcAccFlg = ""
            AmcAccStp = ""
            CidDoc = ""
            CidNat = ""
            CidVal = ""
            BrcAccFlg = ""
            BrcAccStp = ""
            CidErrCde = ""
            StmSupFlg = ""
            RifLnkDwn = ""
            StmSupRea = ""
            Rsv5 = ""
        End Sub
    End Structure

    'Public Structure EnumCusDtlsXXXXX
    '    Dim CusInf As CusInf_Struct
    '    Dim ACC() As EnumCusDtls_ACC
    '    Dim TDA() As EnumCusDtls_TDA
    '    Dim LAA() As EnumCusDtls_LAA
    '    Dim IVR() As EnumCusDtls_IVR
    '    Dim IBK() As EnumCusDtls_IBK
    'End Structure

    Public Structure EnumCusDtls_Ex
        Dim CusInf As ExCusInf_Struct
        Dim GRP As ExEnumCusDtls_GRP
        Dim RNK As ExEnumCusDtls_RNK
        Dim CSX As ExEnumCusDtls_CSX
        Dim ALT As ExEnumCusDtls_ALT
        Dim ACC() As ExEnumCusDtls_ACC
        Dim TDA() As ExEnumCusDtls_TDA
        Dim LAA() As ExEnumCusDtls_LAA
        Dim IVR() As ExEnumCusDtls_IVR
        Dim SMS() As ExEnumCusDtls_SMS
        Dim IBK() As ExEnumCusDtls_IBK
        Dim DEP() As Corp_DepAccDat_ItmDat_Struct
        Public Sub Reset()
            Erase ACC
            Erase TDA
            Erase LAA
            Erase IVR
            Erase IBK
            Erase DEP
            GRP.Reset()
            CSX.Reset()
            CusInf.Reset()
        End Sub
    End Structure

    Public Structure On2TrxDat_Struct
        Dim P7TrxDte As String '8n
        Dim P7TrxTme As String '6n
        Dim P13LocDte As String '8n
        Dim P12LocTme As String '6n
        Dim On2TrxCde As String '4n
        Dim P39RspCde As String '3n
        Dim P49Ccy As String '3n
        Dim P4Amt As String '14n
        Dim On2AcqCde As String '4x
        Dim On2AcqTyp As String '3x
        Dim P32Acq As String '11x
        Dim P41TrmIde As String '16n
        Dim P47RetIde As String '12n
        Dim P5Amt As String '14n 
        Dim On2Rsv1 As String '8x
    End Structure

    Public Structure Funds_Struct
        Dim FndCde As String  '3x
        'FndInf 124
        Dim FndNam1 As String  '25x
        Dim FndDsc1 As String  '99x
        Dim FndNam2 As String  '25x
        Dim FndDsc2 As String  '99x
        Dim FndCcy As String  '3x
        Dim FndTyp As String  '1x
        Dim SubNonKsa As String  '1x
        Dim FndRecStp As String  '14x
        Dim FndIntAcc As String  '13x
        Dim AlcPrcMde As String  '1x
        Dim FndRevFrq As String  '3x
        Dim RedSetPer As String  '2n
        Dim SubDayCut As String  '2n
        Dim SubTodCut As String  '4n
        Dim RedDayCut As String  '2n
        Dim RedTodCut As String  '4n
        Dim SubAmtMin As String  '8n
        Dim SubAmtInc As String  '8n
        Dim RedAmtMin As String  '8n
        Dim MinBalAmt As String  '8n
        Dim MaxHldPct As String  '3n2n
        Dim FndUntCnt As String  '10n4n
        Dim PrcNav1st As String  '5n4n
        Dim FndUntPrc As String  '5n4n
        Dim FndCusCnt As String  '6n
        Dim DteNav1st As String  '8x
        Dim DteNavPrv As String  '8x
        Dim DteNavNow As String  '8x
        Dim DteNavNxt As String  '8x
        Dim NavNow As String  '12n
        Dim Prf1st As String  '3n6n
        Dim PrfYtd As String  '3n6n
        Dim PrfM12 As String  '3n6n
        Dim Rsv3 As String  '53x
    End Structure

    Public Structure CusFunds_Struct
        'HldKey	11
        Dim CusNum As String  '6n
        Dim WltNum As String  '2n
        Dim FndCde As String  '3x
        Dim WltNam1 As String '	35x
        Dim WltNam2 As String '	35x
        Dim WltRedFlg As String '	1x
        Dim WltSubFlg As String '	1x
        Dim Rsv31 As String   '6x
        Dim FndCcy As String  '3x
        Dim CusAccNum As String '	13x
        Dim UntQty As String  '10n4n
        Dim UntPrc As String  '5n4n
        Dim AmtBal As String  '12n
        Dim PctFnd1 As String  '3n2n
        Dim PndRedQty As String  '10n4n
        Dim PndRedAmt As String  '12n
        Dim PndSubQty As String  '10n4n
        Dim PndSubAmt As String  '12n
        Dim PrjUntQty As String  '10n4n
        Dim PrjAmtBal As String  '12n
        Dim PctFnd2 As String  '3n2n
        Dim AveCstPrc As String '	5n4n
        Dim PrfAmt As String  '13ns
        Dim PrfPct As String  '4n2ns
        Dim Rsv32 As String  '39x
        Dim SeeCcy As String '	3x
    End Structure

    Public Structure ExEnumCusDtls_LAI
        Dim ItmTyp As String  '3x
        Dim ObjCcy As String  '3x
        Dim ObjTypCde As String  '3x
        Dim ObjStaCde As String  '1x
        Dim ObjKey As String  '20x
        Dim ObjGrgOpnDte As String  '8n
        Dim ObjHgrOpnDte As String  '8n
        Dim ObjGrgClsDte As String  '8n
        Dim ObjHgrClsDte As String  '8n
        Dim ObjGrgPayDte As String  '8n
        Dim ObjHgrPayDte As String  '8n


        Dim ObjComRte As String  '5n7n
        Dim ObjPrnAmt As String  '14n
        Dim ObjDueAmt As String  '14n
        Dim ObjRelObj As String  '13x
        Dim ObjRstAmt As String  '14n
        Dim ObjOvrDue As String  '14n
        Dim ObjAccOff As String  '22x
        Dim Rsv19 As String '19x

        'Extra
        Dim LoaSchDat() As LoaSchDatEx_Stuct
        Dim XtrFndAcc As String  '13x   
    End Structure

    Public Structure ExEnumCusDtls_LAX
        Dim LAIdat As ExEnumCusDtls_LAI
        'LAX

        Dim PrnAmtRem As String  '14n
        Dim ComAmtAcc As String  '14n
        Dim ComDayGon As String  '2n
        Dim PenRatPct As String  '2n7n
        Dim PenFeeAmt As String  '14n
        Dim PenpayOff As String  '14n
        Dim PenOvdCom As String  '14n
        Dim PenOvdPrn As String  '14n
        Dim AmtOvdCom As String  '14n
        Dim AmtOvdPrn As String  '14n
        Dim FinTotCal As String  '14n
        Dim Rsv20 As String '163x

        'Extra
        Dim LoaSchDat() As LoaSchDatEx_Stuct
        Dim XtrFndAcc As String  '13x   
    End Structure


    Public Structure LoaSchDat_Stuct '64
        Dim SchTyp As String  '1x
        Dim SchNum As String  '4n
        Dim DueDte As String  '8n
        Dim PayDte As String  '8n
        Dim DueAmt As String  '14n
        Dim PayAmt As String  '14n
        Dim RstAmt As String  '14n
        Dim Rsv1 As String   '1x
    End Structure

    Public Structure LoaSchDatEx_Stuct '100
        Dim SchTyp As String  '1x
        Dim SchNum As String  '4n
        Dim DueGrgDte As String  '8n
        Dim DueHgrDte As String  '8n
        Dim PayGrgDte As String  '8n
        Dim PayHgrDte As String  '8n
        Dim DueAmt As String  '14n
        Dim PayAmt As String  '14n
        Dim RstAmt As String  '14n
        Dim Rsv1 As String   '21x
    End Structure

#End Region

    Private GetMsgDone As Integer
    Private ReturnString As String
    'Public ADO As AdoAccess
    Private m_SyncObj As New Object

    Public AbortGetMessage As Integer

    Public CalCnvTab As CalCnvTab_Struct
    Public CidDocTable() As CoreSys_CidDocTyp
    Public CusPtyTable() As CoreSys_CusPtyTyp
    Public SerAutTable() As CmaAutPrs_Struct
    Public SerPrdTable() As CapPrdInf_Struct
    Public CstVerTable() As CoreSys_VerItm
    Public CusTypTable() As CoreSys_CusTyp
    Public LndCdeTable() As CoreSys_LndCde
    Public SarBnkTable() As CoreSys_SarBnk
    Public ActCdeTable() As CoreSys_ActCde
    Public ResCdeTable() As CoreSys_ResCde
    Public TrxCdeTable() As CoreSys_TrxCde
    Public CcyCdeTable() As CoreSys_CcyCde
    Public DeaTypTable() As CoreSys_DeaTyp
    Public ChnWrdTable() As CoreSys_ChnWrd
    Public AccTypTable() As CoreSys_AccTyp
    Public BrnTabTable() As ICEI0100.CoreSys_BrnTab
    Public BrnCfgTable() As CoreSys_BrnCfg
    Public EnrPrmTable() As CoreSys_EnrPrm
    Public LimPrmTable() As CoreSys_LimPrm
    Public IceAutTable() As CoreSys_IceAut
    Public ON2CdeTable() As CoreSys_ON2Cde
    Public LoaPrfCdeTable() As CoreSys_LoaPrf
    Public AccOffTable() As CoreSys_AccOff
    Public PrcCdeTable() As CoreSys_PrcCde
    Public SpcConTable() As CoreSys_SpcCon
    Public SalCdeTable() As CoreSys_SalCde
    Public AltPreTable() As CoreSys_AltPreDef
    Public JrnDscTable() As JrnDscTab_Struct
    Public On2ResTable() As On2ResCdeTab_Struct
    Public SmaCdeTable() As SmaCdeTab_Struct
    Public IceUserAut As ICEI0100.IceAutRol_Struct

    Public CorTrxItmTable() As CoreSys_CorTrxItm
    Public MnuItmDatTable() As CoreSys_MnuItmDat
    Public LimSchDatTable() As CoreSys_LimSchDat
    Public RolDatTable() As CoreSys_RolDat
    Public TabMnuPrfTable() As CoreSys_TabMnuPrf
    Public CorFupTypTable As FileUploadTypes_Struct 'gets its data from "FupTypTab"

    Public CshTrxNamTable() As CoreSys_CshTrxNam
    Public CshMsgTypTable() As CoreSys_CshMsgTyp
    Public CshReaCdeTable() As CoreSys_CshReaCde


    Public ClsReaCdeTable() As CoreSys_AccClsRea
    Public CasSysCdeTable() As CoreSys_CasSysCde

    Public On2PrdTable As Enumerate_ON2_Product_Codes_Rsp_Struct
    Public IceCfgData As IceCfgData_Struct
    Public ManRnkReaTable() As CoreSys_ManRnkRea

    Public LoaPrfTable As Enumerate_Loan_Prf_Rsp_Struct

    Public MoiCdeTable() As Enumerate_SADAD_MOI_Codes_Item_Struct
    Public ResultCodesTable() As ExtendedEnumerateInterfaceResultCodes_ReaStrVar_Struct

    ' IH statement suppression reason codes
    Public StmSupReaTable() As CoreSys_StmSupRea

    Public ReadOnly Property IceEqnBrn() As String
        Get
            Return IceUserAut.IceEqnBrn
        End Get
    End Property

    Public ReadOnly Property IceEqnRol() As String
        Get
            Return IceUserAut.IceEqnRol
        End Get
    End Property

    Public ReadOnly Property IceEqnTit() As String
        Get
            Return IceUserAut.IceEqnTit
        End Get
    End Property

    Public Structure CoreSys_ManRnkRea
        Dim TabRowVer As String
        Dim ManRnkRea As String
        Dim ManRnkEngDsc As String
        Dim ManRnkAraDsc As String
        Public Sub ReadTable(ByRef DataStream As String)
            TabRowVer = Trim(AppInstance.strip(DataStream, 12))
            ManRnkRea = Trim(AppInstance.strip(DataStream, 2))
            ManRnkEngDsc = Trim(AppInstance.strip(DataStream, 35))
            ManRnkEngDsc = Trim(AppInstance.strip(DataStream, 35))
        End Sub
    End Structure

    Structure CoreSys_TabMnuPrf
        Dim TabRowver As String '	12n
        Dim ChgStp As String '	14x
        Dim ChgUid As String '	10x
        Dim MnuPrfIde As String '	8x
        Dim MnuPrfDsc As String '	25x

        Public Sub ReadTable(ByRef DataStream As String)
            TabRowver = Trim(AppInstance.strip(DataStream, 12))
            ChgStp = Trim(AppInstance.strip(DataStream, 14))
            ChgUid = Trim(AppInstance.strip(DataStream, 10))
            MnuPrfIde = Trim(AppInstance.strip(DataStream, 8))
            MnuPrfDsc = Trim(AppInstance.strip(DataStream, 25))
        End Sub

        'Public Function LocateProfile(ByVal ProfId As String) As Integer
        '    Dim i As Integer
        '    If ProfId = "" Then Return -1
        '    If (TabMnuPrfTable Is Nothing) Then Return -1
        '    For i = 0 To TabMnuPrfTable.Length - 1
        '        If (TabMnuPrfTable(i).MnuPrfIde = ProfId) Then Return i
        '    Next
        '    Return -1

        'End Function
    End Structure

    Structure CoreSys_RolDat
        Dim RolIde As String   '	10x
        Dim RolAct As String   '	1x
        Dim HiaNum As String   '	2n
        Dim RolNam As String   '	25x

        Public Sub ReadTable(ByRef DataStream As String)
            RolIde = Trim(AppInstance.strip(DataStream, 10))
            RolAct = Trim(AppInstance.strip(DataStream, 1))
            HiaNum = Trim(AppInstance.strip(DataStream, 2))
            RolNam = Trim(AppInstance.strip(DataStream, 25))
        End Sub

    End Structure

    Public Structure CoreSys_MnuItmDat
        Dim MnuItmIde As String  '10x
        Dim MnuItmDsc As String  '70x
        Dim MnuItmAll As String  '1x
        Dim MnuItmCsa As String  '1x
        Dim MnuItmSee As String '1x
        Dim MnuItmEnt As String '1x
        Dim MnuItmAut As String '1x

        Public Sub ReadTable(ByRef DataStream As String)
            MnuItmIde = Pack.Strip(DataStream, 10).Trim
            MnuItmDsc = Pack.Strip(DataStream, 70).Trim
            MnuItmAll = Pack.Strip(DataStream, 1)
            MnuItmCsa = Pack.Strip(DataStream, 1)
            MnuItmSee = Pack.Strip(DataStream, 1)
            MnuItmEnt = Pack.Strip(DataStream, 1)
            MnuItmAut = Pack.Strip(DataStream, 1)
        End Sub

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= AppInstance.PackString(MnuItmIde, 10)
            st &= AppInstance.PackString(MnuItmDsc, 70)
            st &= AppInstance.PackString(MnuItmAll, 1)
            st &= AppInstance.PackString(MnuItmCsa, 1)
            st &= AppInstance.PackString(MnuItmSee, 1)
            st &= AppInstance.PackString(MnuItmEnt, 1)
            st &= AppInstance.PackString(MnuItmAut, 1)
            Return st
        End Function

    End Structure

    Public Structure CoreSys_CorTrxItm
        Dim CorTrxIde As String  '10x
        Dim CorTrxAut As String  '1x
        Dim CorTrxDsc As String '30x

        Public Sub ReadTable(ByRef DataStream As String)
            CorTrxIde = Pack.Strip(DataStream, 10)
            CorTrxAut = Pack.Strip(DataStream, 1)
            CorTrxDsc = Pack.Strip(DataStream, 30)
        End Sub

        Public Sub Clear()
            CorTrxIde = String.Empty
            CorTrxAut = String.Empty
            CorTrxDsc = String.Empty
        End Sub
    End Structure

    Structure CoreSys_LimSchDat
        Dim TabRowVer As String  '12n
        Dim ChgStp As String  '14x
        Dim ChgUid As String  '10x
        'LimSchDat 61
        Dim LimSchIde As String  '	10x
        Dim LimSchAct As String '	1x
        Dim LimDlyCnt As String '	5n
        Dim LimDlyAmt As String '	10n
        Dim LimMthCnt As String '	5n
        Dim LimMthAmt As String '	10n
        Dim LimSngTrx As String '	10n

        Public Sub ReadTable(ByRef DataStream As String)
            TabRowVer = Trim(AppInstance.strip(DataStream, 12))
            ChgStp = Trim(AppInstance.strip(DataStream, 14))
            ChgUid = Trim(AppInstance.strip(DataStream, 10))
            LimSchIde = Trim(AppInstance.strip(DataStream, 10))
            LimSchAct = Trim(AppInstance.strip(DataStream, 1))
            LimDlyCnt = Trim(AppInstance.strip(DataStream, 5))
            LimDlyAmt = Trim(AppInstance.strip(DataStream, 10))
            LimMthCnt = Trim(AppInstance.strip(DataStream, 5))
            LimMthAmt = Trim(AppInstance.strip(DataStream, 10))
            LimSngTrx = Trim(AppInstance.strip(DataStream, 10))
        End Sub

    End Structure

    Public Function Initialize() As Boolean
        Return True
    End Function

    Public Function FormatHostError(ByVal ResCde As String, ByVal ActCde As String) As String
        Dim st, ResStr As String
        Dim idx As Integer = LocateActCde(ActCde)
        If idx < 0 Then
            Return "The host returned error code [" & ActCde & "." & ResCde & "]."
        Else
            st = ActCdeTable(idx).IntActEng
            idx = LocateResCde(ResCde)
            If idx < 0 Then
                Return "The host returned error code [" & ActCde & "." & ResCde & "]."
            Else
                ResStr = ResCdeTable(idx).IntResEng
            End If
            st = st.Replace("<TXT>", ResStr)
            st = st.Replace("<VAL>", ResCde)
            st = st.Replace("<SYS>", "ICS")
            st = st.Replace("<ORG>", "responsible party")
        End If
        Return st
    End Function

    Public Sub ShowHostError_Core(ByVal MsgCde As String, ByVal MsgID As String, ByVal ResCde As String, ByVal ActCde As String)
        Dim idx As Integer
        Dim st As String
        Dim bUnknownError As Boolean = False
        gfrmError = New frmError
        ActCde = AppInstance.strip(ActCde, 2)
        'gfrmError.lblErrCde.Text = ErrCde
        gfrmError.lblErrCdeDsc.Text = "Host system detected error [" & ActCde & "." & ResCde & "] in message type [" & MsgCde & "]. Local message identification data [" & MsgID & "]"
        gfrmError.lblErrAct.Text = ActCde
        idx = LocateActCde(ActCde)
        If idx < 0 Then
            gfrmError.lblErrActDsc.Text = ActCde
            bUnknownError = True
        Else
            gfrmError.lblErrActDsc.Text = ActCdeTable(idx).IntActEng
        End If
        gfrmError.lblErrRes.Text = ResCde
        idx = LocateResCde(ResCde)
        If idx < 0 Then
            gfrmError.lblErrResDsc.Text = ResCde
            bUnknownError = True
        Else
            gfrmError.lblErrResDsc.Text = ResCdeTable(idx).IntResEng
        End If
        st = gfrmError.lblErrActDsc.Text
        st = st.Replace("<TXT>", gfrmError.lblErrResDsc.Text)
        st = st.Replace("<VAL>", ResCde)
        st = st.Replace("<SYS>", "ICS")
        st = st.Replace("<ORG>", "resopnsible party")
        gfrmError.lblErrActDsc.Text = st
        If bUnknownError Then
            ModalMessageBox("An unknown host error occurred while processing message [" & MsgCde & "]." & vbCrLf & _
                               "The host returned error code [" & ActCde & "." & ResCde & "].", , , MessageBoxIcon.Error, "Host Exception Details")
            '''ModalMsgBox("An unknown host error occurred while processing message [" & MsgCde & "]." & vbCrLf & _
            '''                   "The host returned error code [" & ActCde & "." & ResCde & "].", MsgBoxStyle.Critical, "Host Exception Details")
        Else
            ModalMessageBox(gfrmError.lblErrCdeDsc.Text & vbCrLf & vbCrLf & _
            "Reason (" & gfrmError.lblErrRes.Text & "): " & gfrmError.lblErrResDsc.Text & vbCrLf & vbCrLf & _
            "Action (" & gfrmError.lblErrAct.Text & "): " & gfrmError.lblErrActDsc.Text, , , _
             MessageBoxIcon.Error, "Host Exception Details")
            '''ModalMsgBox(gfrmError.lblErrCdeDsc.Text & vbCrLf & vbCrLf & _
            '''"Reason (" & gfrmError.lblErrRes.Text & "): " & gfrmError.lblErrResDsc.Text & vbCrLf & vbCrLf & _
            '''"Action (" & gfrmError.lblErrAct.Text & "): " & gfrmError.lblErrActDsc.Text, _
            '''    MsgBoxStyle.Critical, "Host Exception Details")

            'gfrmError.ShowDialog()
        End If
        gfrmError.Dispose()
    End Sub

    Public Function ExtractCusNumFromAcc(ByVal AccNum As String) As String
        Dim CusNum As String = ""
        If AccNum Is Nothing Then Return CusNum
        If Trim(AccNum) = "" Then Return CusNum
        If Trim(AccNum).Length <> 13 Then Return CusNum
        CusNum = AccNum.Substring(4, 6)
        Return CusNum
    End Function

    Public Function CheckUserAuthority_Core(ByVal BitNum As Integer) As Boolean
        Return IceUserAut.IceAutLst(BitNum)
    End Function

    Public Function IsValidMid(ByVal MsgID As String) As Boolean
        If MsgID Is Nothing Then Return False
        If MsgID.Trim = "" Then Return False
        If MsgID.Length <> 12 Then Return False
        Return True
    End Function

#Region "SendMessage_..."
    Public Function SendMessage_Echo(ByVal MsgStr As String) As String
        Dim TxtSndTime As String
        Dim TxtRcvTime As String
        Dim MsgData As String

        '* Build the message body
        TxtSndTime = Format(Now, "YYYYMMDDHHNNSS") & Format(VB.Timer - Int(VB.Timer), ".000")
        TxtRcvTime = Format(Now, "YYYYMMDDHHNNSS") & Format(VB.Timer - Int(VB.Timer), ".000")
        TxtSndTime = Replace(TxtSndTime, ".", "")
        TxtRcvTime = Replace(TxtRcvTime, ".", "")
        MsgData = "0000000000" & TxtSndTime & TxtRcvTime & MsgStr
        Return AppInstance.SendMessageVisuallyEx("900000", MsgData, "GEN", "", "", "")
    End Function

    Public Function SendMessage_GetBrnCfg() As String
        Return AppInstance.SendMessageVisuallyEx("901080", "*   ", "GEN", "", "", "")
    End Function

    Public Function SendMessage_GetCmaAutPrs() As String
        Return AppInstance.SendMessageVisuallyEx("910170", AppInstance.PackString(" ", 16), "GEN", "", "", "")
    End Function

    Public Function SendMessage_GetCapPrdInf(ByVal CapMnm As String, ByVal CapCusNum As String) As String
        Dim MsgData As String
        MsgData = AppInstance.PackString(CapMnm, 4)
        MsgData &= AppInstance.PackString(CapCusNum, 6)
        MsgData &= AppInstance.PackString(" ", 6)
        Return AppInstance.SendMessageVisuallyEx("910180", MsgData, "GEN", "", "", "")
    End Function

    Public Function SendMessage_SetCusRank(ByVal CusNum As String, ByVal RnkTyp As String, ByVal CusRnk As String, ByVal ManRnkRea As String) As String
        Dim MsgData As String
        MsgData = AppInstance.PackString(CusNum, 6)
        MsgData &= AppInstance.PackString(RnkTyp, 4)
        MsgData &= AppInstance.PackString(CusRnk, 1)
        MsgData &= AppInstance.PackString(ManRnkRea, 3)
        MsgData &= AppInstance.PackString(" ", 114)
        Return AppInstance.SendMessageVisuallyEx("770070", MsgData, "CUS", CusNum, "", "")
    End Function


    Public Function SendMessage_TrxReverse(ByVal IceTrxRef As String, ByVal OrgHdr As String, ByRef IceBrnJrn As ICED0100.IceTrxJrn_Struct, _
                                           ByRef RvdBrnJrn As ICED0100.IceTrxJrn_Struct, ByVal AutUsrIde As String, ByVal AutPacVal As String, _
                                           ByVal MsgID As String) As String
        Dim MsgDat, MsgDump As String
        MsgDat = OrgHdr
        MsgID = AppInstance.PrepareMQMessage(MsgID, "400020", MsgDat, "ACC", ExtractCusNumFromAcc(RvdBrnJrn.DebAccNum), RvdBrnJrn.DebAccNum, "", "N", AutUsrIde, AutPacVal, MsgDump)
        If Not (IsValidMid(MsgID)) Then
            Return Nothing
        Else
            If Not LogIntoBrnDatabase(MsgDump, ICED0100.Globals.LogBrnType.Request) Then
                HandleError(&H81000050, "Could not reverese transaction", "ICE Branch Database")
                Return Nothing
            End If
            With RvdBrnJrn
                .RvgMsgMid = MsgID
                .RvgTrxRef = IceTrxRef
            End With
            If Not (UpdateIceBrnJournal(RvdBrnJrn, ICED0100.Globals.LogBrnType.Other)) Then
                HandleError(&H81000051, "Could not update reversed transaction journal (Transaction Reversal)", "ICE Branch Database")
                Return Nothing
            End If
            With IceBrnJrn
                .RvdTrxRef = RvdBrnJrn.IceTrxRef
                .RvdMsgMid = RvdBrnJrn.MsgMid
                .IceTrxRef = IceTrxRef
                .AutUsrIde = AutUsrIde
                .MsgMid = MsgID
                .MsgProCde = "400020"
                .AppCde = RvdBrnJrn.AppCde
                .TrxCls = "REV"
                .TrxRmk = RvdBrnJrn.TrxRmk
                .TrxSts = "INF"
                .CmpCde = "UNK"
                .MsgResCde = "00000"
                .IntErrCde = "00000"
                .CanRevFlg = "N"
                .TrxRevFlg = "N"
                .IceBrnNum = IceUserAut.IceEqnBrn
                .DebTrxAmt = RvdBrnJrn.CreTrxAmt
                .DebTrxCcy = RvdBrnJrn.CreTrxCcy
                .DebAccNum = RvdBrnJrn.CreAccNum
                .CreTrxAmt = RvdBrnJrn.DebTrxAmt
                .CreTrxCcy = RvdBrnJrn.DebTrxCcy
                .CreAccNum = RvdBrnJrn.DebAccNum
                .ReqWst = AppInstance.Workstation.ToUpper
                .ReqUsr = AppInstance.LoggedUser
                If (RvdBrnJrn.DrwFlw = "CSHINW") Then
                    .DrwFlw = "CSHOUT"
                ElseIf (RvdBrnJrn.DrwFlw = "CSHOUT") Then
                    .DrwFlw = "CSHINW"
                Else
                    .DrwFlw = ""
                End If
            End With
            If Not (UpdateIceBrnJournal(IceBrnJrn, ICED0100.Globals.LogBrnType.Request)) Then
                HandleError(&H81000051, "Could not create transaction journal (Transaction Reversal)", "ICE Branch Database")
                Return Nothing
            End If
        End If
        Return AppInstance.SendMessagePreparedVisually(MsgID, "400020", MsgDump)
    End Function

    Public Function SendMessage_FundsXfr(ByVal AppCde As String, ByRef fxd As ICED0100.FundsXfr_Struct, ByRef IceBrnJrn As ICED0100.IceTrxJrn_Struct) As String
        Return SendMessage_FundsXfrEx(AppCde, fxd, IceBrnJrn, "N", "", "", "")
    End Function

    Public Function SendMessage_FundsXfrEx(ByVal AppCde As String, ByRef fxd As ICED0100.FundsXfr_Struct, ByRef IceBrnJrn As ICED0100.IceTrxJrn_Struct, _
                                         ByVal IceTryFin As String, ByVal AutUsrIde As String, ByVal AutPacVal As String, ByVal MsgID As String) As String
        Dim MsgDat, MsgDump As String
        MsgDat = fxd.PackTable
        MsgID = AppInstance.PrepareMQMessage(MsgID, "500010", MsgDat, "ACC", ExtractCusNumFromAcc(fxd.AccNum), fxd.AccNum, "", IceTryFin, AutUsrIde, AutPacVal, MsgDump)
        If Not IsValidMid(MsgID) Then
            Return Nothing
        End If

        With IceBrnJrn
            .IceTrxRef = fxd.FinBwyDat.BwyTrxRef
            .MsgMid = MsgID
            .MsgProCde = "500010"
            .AppCde = AppCde
            .TrxCls = fxd.PayMth
            .DrwFlw = CStr(IIf(.TrxCls = "CSH", "CSHINW", ""))
            .TrxRmk = CStr(IIf(.TrxCls = "CSH", "SER Cash Transfer", "SER Account Transfer")) ''fxd.CapMnm & "-" & fxd.CapPrdMnm
            .TrxSts = "INF"
            .CmpCde = "UNK"
            .MsgResCde = "00000"
            .IntErrCde = "00000"
            .CanRevFlg = "N"
            .TrxRevFlg = "N"
            .IceBrnNum = IceUserAut.IceEqnBrn
            .DebTrxAmt = fxd.FinBwyDat.AmtSel
            .DebTrxCcy = fxd.FinBwyDat.CcySel
            '''If fxd.PayMth <> "CSH" Then
            .CreTrxAmt = fxd.FinBwyDat.AmtBuy
            .CreTrxCcy = fxd.FinBwyDat.CcyBuy
            '''End If
            .ReqWst = AppInstance.Workstation.ToUpper
            .ReqUsr = AppInstance.LoggedUser
            .AutUsrIde = AutUsrIde
            .TrxDat1 = fxd.PayDetTxt1
            .TrxDat2 = "Transfer for " & fxd.CapMnm & "-" & fxd.CapPrdMnm 'fxd.PayDetTxt2

        End With
        If (IceTryFin = "N") Then
            'If Not LogIntoBrnDatabase(MsgDump, ICED0100.Globals.LogBrnType.Request) Then
            '    HandleError(&H81000026, "Could not log transaction (Capital Transfer)", "ICE Branch Database")
            '    Return Nothing
            'End If
            'If Not (UpdateIceBrnJournal(IceBrnJrn, ICED0100.Globals.LogBrnType.Request)) Then
            '    HandleError(&H81000027, "Could not create transaction journal (Capital Transfer)", "ICE Branch Database")
            '    Return Nothing
            'End If
            If Not UpdateBranchDatabase(MsgDump, IceBrnJrn, ICED0100.Globals.LogBrnType.Request) Then
                HandleError(&H81000026, "Could not update branch database (Capital Transfer)", "ICE Branch Database")
                Return Nothing
            End If
        End If
        Return AppInstance.SendMessagePreparedVisually(MsgID, "500010", MsgDump)
    End Function

    Public Function SendMessage_StopATMCard(ByRef CusDat As frmCustomer.CusDta_Struct, ByVal AccIdx As Integer, ByVal CardIdx As Integer, ByVal ReqRep As Boolean, ByVal ReqRea As String) As String
        Dim MsgData As String
        Dim i As Integer
        Try
            With CusDat.CusDtl.ACC(AccIdx).AtmDatEx
                MsgData = AppInstance.PackString(.CusNum, 6)
                MsgData += AppInstance.PackString(CStr(IIf(ReqRep, "Y", "N")), 1)
                MsgData += AppInstance.PackString(ReqRea, 1)
                MsgData += AppInstance.PackString(.CrdItmEx(CardIdx).CrdAccNum, 13)
                MsgData += AppInstance.PackString(.CrdItmEx(CardIdx).CrdPan.Replace("*", "0"), 18)
                'MsgData += AppInstance.PackString(.CrdItmEx(CardIdx).CrdTkn, 18)
            End With
        Catch ex As Exception
            Return Nothing
        End Try
        Return AppInstance.SendMessageVisuallyEx("550060", MsgData, "CRD", CusDat.CusDtl.ACC(AccIdx).AtmDatEx.CusNum, _
                                                    CusDat.CusDtl.ACC(AccIdx).AtmDatEx.CrdItmEx(CardIdx).CrdAccNum, _
                                                    CusDat.CusDtl.ACC(AccIdx).AtmDatEx.CrdItmEx(CardIdx).CrdPan)
    End Function

    Public Function SendMessage_RegisterCustomerTemplate(ByVal ReqTyp As String, ByRef Tmp As TmpDat_Struct) As String
        Dim MsgData As String
        Dim i As Integer
        Try
            MsgData = Pack.PackString(ReqTyp, 3)
            MsgData &= Tmp.PackTable()
        Catch ex As Exception
            Return Nothing
        End Try
        Return AppInstance.SendMessageVisuallyEx("550090", MsgData, "CUS", Tmp.CusNum, "", "")
    End Function

    Public Function SendMessage_ActivateATMCard(ByRef CusDat As frmCustomer.CusDta_Struct, ByVal AccIdx As Integer, ByVal CardIdx As Integer) As String
        Dim MsgData As String
        Dim i As Integer
        Try
            With CusDat.CusDtl.ACC(AccIdx).AtmDatEx
                MsgData = AppInstance.PackString(.CusNum, 6)
                MsgData += " " 'AppInstance.PackString(CStr(IIf(ReqRep, "Y", "N")), 1)
                MsgData += " " 'AppInstance.PackString(ReqRea, 1)
                MsgData += AppInstance.PackString(.CrdItmEx(CardIdx).CrdAccNum, 13)
                MsgData += AppInstance.PackString(.CrdItmEx(CardIdx).CrdPan.Replace("*", "0"), 18)
                'MsgData += AppInstance.PackString(.CrdItmEx(CardIdx).CrdTkn, 18)
            End With
        Catch ex As Exception
            Return Nothing
        End Try
        Return AppInstance.SendMessageVisuallyEx("550130", MsgData, "CRD", CusDat.CusDtl.ACC(AccIdx).AtmDatEx.CusNum, _
                                                    CusDat.CusDtl.ACC(AccIdx).AtmDatEx.CrdItmEx(CardIdx).CrdAccNum, _
                                                    CusDat.CusDtl.ACC(AccIdx).AtmDatEx.CrdItmEx(CardIdx).CrdPan)
    End Function

    Public Function SendMessage_ReactivateATMCard(ByRef CusDat As frmCustomer.CusDta_Struct, ByVal AccIdx As Integer, ByVal CardIdx As Integer) As String
        Dim MsgData As String
        Dim i As Integer
        Try
            With CusDat.CusDtl.ACC(AccIdx).AtmDatEx
                MsgData = AppInstance.PackString(.CusNum, 6)
                MsgData += " " 'AppInstance.PackString(CStr(IIf(ReqRep, "Y", "N")), 1)
                MsgData += " " 'AppInstance.PackString(ReqRea, 1)
                MsgData += AppInstance.PackString(.CrdItmEx(CardIdx).CrdAccNum, 13)
                '  MsgData += AppInstance.PackString(.CrdItmEx(CardIdx).CrdPan, 18)
                MsgData += AppInstance.PackString(.CrdItmEx(CardIdx).CrdTkn, 18)
            End With
        Catch ex As Exception
            Return Nothing
        End Try
        Return AppInstance.SendMessageVisuallyEx("550190", MsgData, "CRD", CusDat.CusDtl.ACC(AccIdx).AtmDatEx.CusNum, _
                                                    CusDat.CusDtl.ACC(AccIdx).AtmDatEx.CrdItmEx(CardIdx).CrdAccNum, _
                                                    CusDat.CusDtl.ACC(AccIdx).AtmDatEx.CrdItmEx(CardIdx).CrdPan)
    End Function

    Public Function SendMessage_SetIceRol(ByVal AutRol As ICEI0100.IceAutRol_Struct) As String
        Dim MsgData As String
        Dim i As Integer
        Try
            With AutRol
                MsgData = AppInstance.PackString(.TabRowVer, 12)
                MsgData += AppInstance.PackString(.IceEqnRol, 10)
                MsgData += AppInstance.PackString(.IceChgUsr, 10)
                MsgData += AppInstance.PackString(.IceChgStp, 14)
                MsgData += Space(30)
                For i = 1 To 512
                    MsgData += AppInstance.PackString(CStr(IIf(.IceAutLst(i), "Y", "N")), 1)
                Next
                MsgData += Space(180)
            End With
        Catch ex As Exception
            Return Nothing
        End Try
        Return AppInstance.SendMessageVisuallyEx("610000", MsgData, "GEN", "", "", "")
    End Function

    Public Function SendMessage_SetIceAutDsc(ByVal TabRow As String) As String
        '610010:SetIceAutDsc
        Dim i As Integer
        Dim MsgData As String
        Dim cnt As Integer = IceAutTable.Length
        MsgData = AppInstance.PackString(TabRow, 12)
        MsgData += AppInstance.PackString(Format(cnt, "#000"), 3)
        For i = 0 To cnt - 1
            MsgData += AppInstance.PackString(IceAutTable(i).IceAutSer, 3)
            MsgData += AppInstance.PackString(IceAutTable(i).IceAutCde, 10)
            MsgData += AppInstance.PackString(IceAutTable(i).IceAutNam, 50)
        Next
        Return AppInstance.SendMessageVisuallyEx("610010", MsgData, "GEN", "", "", "")
    End Function

    Public Function SendMessage_RegisterCLIP(ByVal EnrInf As CoreSys_EnrInf) As String
        '612000:RegisterCLIP
        Dim i, cnt As Integer
        Dim MsgData As String = ""
        cnt = 0
        With EnrInf
            For i = 0 To 2
                If .ClpDat.ClpNum(i) <> "" Then cnt += 1
                MsgData += AppInstance.PackString(.ClpDat.ClpNum(i), 25)
            Next
            MsgData = AppInstance.PackString(Trim(Str(cnt)), 1) + MsgData
            MsgData = AppInstance.PackString(.ClpDat.ClpAct, 1) + MsgData
            MsgData = AppInstance.PackString(.TabRowVer, 12) + MsgData
            MsgData = AppInstance.PackString(.CusNum, 6) + MsgData
        End With
        Return AppInstance.SendMessageVisuallyEx("612000", MsgData, "CUS", EnrInf.CusNum, "", "")
    End Function

    Public Function SendMessage_RegisterOTAC(ByVal EnrInf As CoreSys_EnrInf) As String
        '612010:RegisterOTAC
        Dim MsgData As String = ""
        With EnrInf
            MsgData = AppInstance.PackString(.CusNum, 6)
            MsgData += AppInstance.PackString(.TabRowVer, 12)
            MsgData += AppInstance.PackString(.AutAct, 1)
            MsgData += AppInstance.PackString(CStr(IIf(.AutDstCre = "CELL", "Y", "N")), 1)
        End With
        Return AppInstance.SendMessageVisuallyEx("612010", MsgData, "CUS", EnrInf.CusNum, "", "")
    End Function

    Public Function SendMessage_UpdateLimits(ByVal EnrReq As String, ByRef EnrInf As CoreSys_EnrInf) As String
        '612020:UpdateLimits
        Dim MsgData As String = ""
        With EnrInf
            MsgData = AppInstance.PackString(EnrReq, 4)
            MsgData += AppInstance.PackString(.CusNum, 6)
            MsgData += AppInstance.PackString(.TabRowVer, 12)
            MsgData += AppInstance.PackString(.UseScp, 1)
            MsgData += AppInstance.PackString(.UsePatEnq, 1)
            MsgData += AppInstance.PackString(.UsePatReq, 1)
            MsgData += AppInstance.PackString(.UsePatExe, 1)
            MsgData += AppInstance.PackString(.UsePatSar, 1)
            MsgData += AppInstance.PackString(.UsePatSwf, 1)
            MsgData += AppInstance.PackString(.UseSta, 1)
            MsgData += AppInstance.PackNSString(.UseVelDay, 8, False)
            MsgData += AppInstance.PackNSString(.UseVelMth, 8, False)
            MsgData += AppInstance.PackNSString(.UseCntDay, 4, False)
            MsgData += AppInstance.PackNSString(.UseCntMth, 4, False)
            MsgData += AppInstance.PackNSString(.UseMaxTrn, 8, False)
            MsgData += AppInstance.PackString(.UseLimExp, 8)
            MsgData += AppInstance.PackString(.UsePrfNam, 8)
            'MsgData += AppInstance.PackString("IFJAPP03", 8)
            MsgData += AppInstance.PackString(.LimPrfCde, 2)
            MsgData += AppInstance.PackString(Space(16), 16)
            MsgData += AppInstance.PackString(.UseSwfOur, 1)
            MsgData += AppInstance.PackString(.RsvDat2, 32)
            MsgData += AppInstance.PackString(.LocEmp2Emp, 1)
            MsgData += AppInstance.PackString(.LocExt2Emp, 1)
            MsgData += Space(148)
        End With
        Return AppInstance.SendMessageVisuallyEx("612020", MsgData, "CUS", EnrInf.CusNum, "", "")
    End Function

    Public Function SendMessage_EnrolRetail(ByVal CusNum As String, ByVal AccNum As String, ByRef PrfDat As PrfDat_Struct) As String
        '612120:UpdateLimits
        Dim MsgData As String = ""
        MsgData = AppInstance.PackString("RETOWN", 6)
        MsgData &= AppInstance.PackString(CusNum, 6)
        MsgData &= AppInstance.PackString(AccNum, 13)
        MsgData &= AppInstance.PackString(Space(39), 39)
        MsgData &= PrfDat.PackTable()
        Return AppInstance.SendMessageVisuallyEx("612120", MsgData, "CUS", CusNum, AccNum, "")
    End Function

    Public Function SendMessage_EnrolRetail(ByVal EnrReq As String, ByVal AccNum As String, ByRef EnrInf As CoreSys_EnrInf) As String
        '612120:UpdateLimits
        Dim MsgData As String = ""
        With EnrInf
            MsgData = AppInstance.PackString("RETOWN", 6)
            MsgData += AppInstance.PackString(.CusNum, 6)
            MsgData += AppInstance.PackString(AccNum, 13)
            MsgData += AppInstance.PackString(Space(39), 39)

            MsgData += AppInstance.PackString(.UseScp, 1)
            MsgData += AppInstance.PackString(.UsePatEnq, 1)
            MsgData += AppInstance.PackString(.UsePatReq, 1)
            MsgData += AppInstance.PackString(.UsePatExe, 1)
            MsgData += AppInstance.PackString(.UsePatSar, 1)
            MsgData += AppInstance.PackString(.UsePatSwf, 1)
            MsgData += AppInstance.PackString(.UseSta, 1)
            MsgData += AppInstance.PackNSString(.UseVelDay, 8, False)
            MsgData += AppInstance.PackNSString(.UseVelMth, 8, False)
            MsgData += AppInstance.PackNSString(.UseCntDay, 4, False)
            MsgData += AppInstance.PackNSString(.UseCntMth, 4, False)
            MsgData += AppInstance.PackNSString(.UseMaxTrn, 8, False)
            MsgData += AppInstance.PackString(.UseLimExp, 8)
            MsgData += AppInstance.PackString(.UsePrfNam, 8)
            'MsgData += AppInstance.PackString("IFJAPP03", 8)
            MsgData += AppInstance.PackString(.LimPrfCde, 2)
            MsgData += AppInstance.PackString(Space(16), 16)
            MsgData += AppInstance.PackString(.UseSwfOur, 1)
            MsgData += AppInstance.PackString(.RsvDat2, 32)
            MsgData += AppInstance.PackString(.LocEmp2Emp, 1)
            MsgData += AppInstance.PackString(.LocExt2Emp, 1)
            MsgData += Space(148)
        End With
        Return AppInstance.SendMessageVisuallyEx("612120", MsgData, "CUS", EnrInf.CusNum, AccNum, "")
    End Function

    Public Function SendMessage_SetChequeBookRule(ByVal AccNum As String, ByVal Rule As String) As String
        '612040:SetChequeBookRule
        Dim MsgData As String = ""
        MsgData = AppInstance.PackString(AccNum, 13)
        MsgData += AppInstance.PackString(Rule, 1)
        Return AppInstance.SendMessageVisuallyEx("612040", MsgData, "ACC", ExtractCusNumFromAcc(AccNum), AccNum, "")
    End Function

    Public Function SendMessage_ChangeCusIstWaiver(ByVal CusNum As String, ByVal WveIst As String) As String
        '612210:ChangeCustomerWaiver
        Dim MsgData As String = ""
        MsgData = AppInstance.PackString(CusNum, 6)
        MsgData += AppInstance.PackString(WveIst, 1)
        MsgData += Space(5)
        Return AppInstance.SendMessageVisuallyEx("612210", MsgData, "CUS", CusNum, "", "")
    End Function

    Public Function SendMessage_GetCusClk2Trd(ByVal CusNum As String, ByVal CorIde As String, ByVal UsrIde As String) As String
        Dim MsgData As String = ""
        MsgData = AppInstance.PackString(CusNum, 6)
        MsgData += AppInstance.PackString(CorIde, 10)
        MsgData += AppInstance.PackString(UsrIde, 10)
        MsgData += Space(38)
        Return AppInstance.SendMessageVisuallyEx("612220", MsgData, "CUS", CusNum, "", "")
    End Function

    Public Function SendMessage_ChangeCusWaiver(ByVal CusNum As String, ByVal WveOn2 As String, ByVal SmsWveMbk As String, ByVal SmsWveAlt As String, ByVal EmlWveAlt As String) As String
        '612260:ChangeCustomerWaiver
        Dim MsgData As String = ""
        MsgData = AppInstance.PackString(CusNum, 6)
        MsgData += AppInstance.PackString(" ", 1)
        MsgData += AppInstance.PackString(" ", 1)
        MsgData += AppInstance.PackString(WveOn2, 1)
        MsgData += AppInstance.PackString(SmsWveMbk, 1)
        MsgData += AppInstance.PackString(SmsWveAlt, 1)
        MsgData += AppInstance.PackString(EmlWveAlt, 1)
        MsgData += Space(2)
        Return AppInstance.SendMessageVisuallyEx("612260", MsgData, "CUS", CusNum, "", "")
    End Function

    Public Function SendMessage_ChangeCusCanTrade(ByVal CusNum As String, ByVal CusCanTrd As String) As String
        '612240:ChangeCustomerCanTrade on IST
        Dim MsgData As String = ""
        MsgData = AppInstance.PackString(CusNum, 6)
        MsgData += AppInstance.PackString(CusCanTrd, 1)
        MsgData += Space(5)
        Return AppInstance.SendMessageVisuallyEx("612240", MsgData, "CUS", CusNum, "", "")
    End Function

    Public Function SendMessage_UpdateAccPrt(ByVal AccPrt As AccPrtInChn_Struct) As String
        '612250:Update account participation in channels
        Dim MsgData As String = ""
        MsgData = AppInstance.PackString(AccPrt.AccNum, 13)
        MsgData &= AppInstance.PackString(AccPrt.TabRowVer, 12)
        For i As Integer = 0 To 2 '3 predefined channels, so far     'AccPrt.ChnSrvFlg.Length - 1
            MsgData &= AppInstance.PackString(AccPrt.ChnSrvFlg(i).ChgSee, 1)
            MsgData &= AppInstance.PackString(AccPrt.ChnSrvFlg(i).CanSee, 1)
            MsgData &= AppInstance.PackString(AccPrt.ChnSrvFlg(i).ChgTrx, 1)
            MsgData &= AppInstance.PackString(AccPrt.ChnSrvFlg(i).CanTrx, 1)
            MsgData &= AppInstance.PackString(AccPrt.ChnSrvFlg(i).Rsv23, 12)
        Next
        MsgData += Space(44)
        Return AppInstance.SendMessageVisuallyEx("612250", MsgData, "ACC", ExtractCusNumFromAcc(AccPrt.AccNum), AccPrt.AccNum, "")
    End Function

    Public Function SendMessage_GetChnPrf(ByVal CusNum As String, ByVal ChnNam As String) As String
        Dim tmpStr As String

        tmpStr = AppInstance.PackString(CusNum, 6)
        tmpStr &= AppInstance.PackString(ChnNam, 4)
        tmpStr &= Space(22)

        Return AppInstance.SendMessageVisuallyEx("614210", tmpStr, "CUS", CusNum, "", "")
    End Function

    Public Function SendMessage_SetChnPrf(ByVal CusNum As String, ByRef MsgChnPrf As MsgChnPrf_Struct) As String
        Dim MsgData As String = ""
        MsgData &= AppInstance.PackString(CusNum, 6)
        MsgData &= Space(26) 'Rsv01
        MsgData &= MsgChnPrf.PackTable()

        Return AppInstance.SendMessageVisuallyEx("614220", MsgData, "CUS", CusNum, "", "")
    End Function

    Public Function SendMessage_GetAltPreDef() As String 'Enumerate Special Conditions
        Return AppInstance.SendMessageVisuallyEx("701010", "", "GEN", "", "", "")
    End Function


    Public Function SendMessage_RegisterSMS(ByVal EnrInf As CoreSys_EnrInf) As String
        '710900:RegisterSMS
        Dim MsgData As String = ""
        With EnrInf
            MsgData = AppInstance.PackString(.CusNum, 6)
            MsgData += AppInstance.PackString(.TabRowVer, 12)
            MsgData += AppInstance.PackString(.SMSTelMob, 25)
            MsgData += AppInstance.PackString(.SMSLngCde, 1)
        End With
        Return AppInstance.SendMessageVisuallyEx("710900", MsgData, "CUS", EnrInf.CusNum, "", "")
    End Function

    Public Function SendMessage_DeRegisterSMS(ByVal EnrInf As CoreSys_EnrInf) As String
        '710910:DeRegisterSMS
        Dim MsgData As String = ""
        With EnrInf
            MsgData = AppInstance.PackString(.CusNum, 6)
            MsgData += AppInstance.PackString(.TabRowVer, 12)
        End With
        Return AppInstance.SendMessageVisuallyEx("710910", MsgData, "CUS", EnrInf.CusNum, "", "")
    End Function

    ' IH statement suppression reason codes
    Public Function SendMessage_ChangeStatementPrintingState(ByVal AccPfx As String, ByVal CusNum As String, ByVal AccSfx As String, ByVal SupFlg As String, ByVal SupRea As String) As String
        Dim MsgData As String = ""
        MsgData = AppInstance.PackString(AccPfx, 4)
        MsgData += AppInstance.PackString(CusNum, 6)
        MsgData += AppInstance.PackString(AccSfx, 3)
        MsgData += AppInstance.PackString(SupFlg, 1)
        MsgData += AppInstance.PackString(SupRea, 2)
        MsgData += AppInstance.PackString("", 28) 'Rsv30
        Return AppInstance.SendMessageVisuallyEx("773080", MsgData, "CUS", CusNum, AccPfx & CusNum & AccSfx, "")
    End Function

    Public Function SendMessage_GetIceUsrAut(ByVal UsrID As String) As String
        Return AppInstance.SendMessageVisuallyEx("901000", AppInstance.PackString(UsrID, 10), "GEN", "", "", "")
    End Function

    Public Function SendMessage_GetCstVerDta() As String
        Return AppInstance.SendMessageVisuallyEx("901010", "", "GEN", "", "", "")
    End Function

    Public Function SendMessage_GetIcsCfgDta() As String
        Return AppInstance.SendMessageVisuallyEx("990000", Space(64), "GEN", "", "", "")
    End Function

    Public Function SendMessage_GetEnrInf(ByVal CusNum As String) As String
        Return AppInstance.SendMessageVisuallyEx("901020", AppInstance.PackString(CusNum, 6), "CUS", CusNum, "", "")
    End Function

    Public Function SendMessage_GetCstEnrPrm() As String
        Return AppInstance.SendMessageVisuallyEx("901030", "", "GEN", "", "", "")
    End Function

    Public Function SendMessage_GetCstLmtPrm() As String
        Return AppInstance.SendMessageVisuallyEx("901040", "", "GEN", "", "", "")
    End Function

    Public Function SendMessage_GetIceRol(ByVal IceRole As String) As String
        Return AppInstance.SendMessageVisuallyEx("901050", AppInstance.PackString(IceRole, 10), "GEN", "", "", "")
    End Function

    Public Function SendMessage_GetIceAutDsc() As String
        Return AppInstance.SendMessageVisuallyEx("901060", "", "GEN", "", "", "")
    End Function

    Public Function SendMessage_GetBrnTab() As String
        Return AppInstance.SendMessageVisuallyEx("910010", "", "GEN", "", "", "")
    End Function

    Public Function SendMessage_GetAccTyp() As String
        Return AppInstance.SendMessageVisuallyEx("910020", "", "GEN", "", "", "")
    End Function

    Public Function SendMessage_GetCusTyp() As String
        Return AppInstance.SendMessageVisuallyEx("910030", "", "GEN", "", "", "")
    End Function

    Public Function SendMessage_GetTrxCde() As String
        Return AppInstance.SendMessageVisuallyEx("910040", "", "GEN", "", "", "")
    End Function

    Public Function SendMessage_GetCcyCde() As String
        Return AppInstance.SendMessageVisuallyEx("910050", "", "GEN", "", "", "")
    End Function

    Public Function SendMessage_GetLndCde() As String
        Return AppInstance.SendMessageVisuallyEx("910060", "", "GEN", "", "", "")
    End Function

    Public Function SendMessage_GetSarBnk() As String
        Return AppInstance.SendMessageVisuallyEx("910070", "", "GEN", "", "", "")
    End Function

    Public Function SendMessage_GetResCde() As String
        Return AppInstance.SendMessageVisuallyEx("910080", "", "GEN", "", "", "")
    End Function

    Public Function SendMessage_GetActCde() As String
        Return AppInstance.SendMessageVisuallyEx("910090", "", "GEN", "", "", "")
    End Function

    Public Function SendMessage_GetHgrCal() As String
        Return AppInstance.SendMessageVisuallyEx("910100", "", "GEN", "", "", "")
    End Function

    Public Function SendMessage_GetDeaTyp() As String
        Return AppInstance.SendMessageVisuallyEx("910130", "", "GEN", "", "", "")
    End Function

    Public Function SendMessage_GetAccOff() As String
        Return AppInstance.SendMessageVisuallyEx("910110", "", "GEN", "", "", "")
    End Function

    ' IH statement suppression reason codes
    Public Function SendMessage_GetStmSupRea() As String
        Return AppInstance.SendMessageVisuallyEx("910440", "", "GEN", "", "", "")
    End Function

    'Creator: Y093SAHU
    Public Function SendMessage_EnumerateCorpTrx() As String
        Return AppInstance.SendMessageVisuallyEx("202350", "", "GEN", "", "", "")
    End Function

    'Creator: Y093SAHU
    Public Function SendMessage_EnumerateCorpMenuItems() As String
        Return AppInstance.SendMessageVisuallyEx("202300", "", "GEN", "", "", "")
    End Function

    'Creator: Y093SAHU
    Public Function SendMessage_EnumerateCorpLimSch(ByVal p_type As String) As String
        Return AppInstance.SendMessageVisuallyEx("200100", p_type, "GEN", "", "", "")
    End Function

    'Creator: Y093SAHU
    Public Function SendMessage_EnumerateCorpRole() As String
        Return AppInstance.SendMessageVisuallyEx("200150", "", "GEN", "", "", "")
    End Function

    'Creator: Y093SAHU
    Public Function SendMessage_TabMnuPrf(All As String) As String
        Dim tmpStr As String
        tmpStr = AppInstance.PackString(All, 1)
        tmpStr += AppInstance.PackString("", 31)
        'Return AppInstance.SendMessageVisuallyEx("202320", "", "GEN", "", "", "")
        Return AppInstance.SendMessageVisuallyEx("202320", tmpStr, "GEN", "", "", "")
    End Function

    Public Function SendMessage_LocCusInf(ByRef LocInf As structLocCusInf, Optional ByVal bUseExtMsg As Boolean = False) As String
        LocInf.TelNumCix = "Y"
        LocInf.TelNumSMS = "Y"
        LocInf.TelNumAlt = "Y"
        LocInf.RetCusExt = CStr(IIf(bUseExtMsg, "Y", "N"))

        Dim tmpStr As String
        tmpStr = AppInstance.PackString(LocInf.CusNum, 6)
        tmpStr += AppInstance.PackString(LocInf.AccNum, 13)
        tmpStr += AppInstance.PackString(LocInf.CrdNum, 16)
        tmpStr += AppInstance.PackString(LocInf.UsrIde, 10)
        tmpStr += AppInstance.PackString(LocInf.AmxCrd, 15)
        tmpStr += AppInstance.PackString(LocInf.StcBil, 10)
        tmpStr += AppInstance.PackString(LocInf.SecIde, 8)
        tmpStr += AppInstance.PackString(LocInf.CusNam, 35)
        tmpStr += AppInstance.PackString(LocInf.CidDoc, 2)
        tmpStr += AppInstance.PackString(LocInf.CidNat, 2)
        tmpStr += AppInstance.PackString(LocInf.CidVal, 10)
        tmpStr += AppInstance.PackString(LocInf.CusTyp, 2)
        tmpStr += AppInstance.PackString(LocInf.IbkInd, 1)
        tmpStr += AppInstance.PackString(LocInf.IvrInd, 1)
        tmpStr += AppInstance.PackString(LocInf.TelNum, 25)
        tmpStr += AppInstance.PackString(LocInf.OffCde, 3)
        tmpStr += AppInstance.PackString(LocInf.OffUid, 10)
        tmpStr += AppInstance.PackString(LocInf.TelNumCix, 1)
        tmpStr += AppInstance.PackString(LocInf.TelNumSMS, 1)
        tmpStr += AppInstance.PackString(LocInf.TelNumAlt, 1)
        tmpStr += AppInstance.PackString(LocInf.RetCusExt, 1)
        tmpStr += AppInstance.PackString(LocInf.TelNumFmt, 3)
        tmpStr += AppInstance.PackString(LocInf.Rsv1, 80)

        Return AppInstance.SendMessageVisuallyEx("901100", tmpStr, "CUS", LocInf.CusNum, LocInf.AccNum, LocInf.CrdNum)
    End Function

    Public Function SendMessage_EnumPrcCde() As String
        Return AppInstance.SendMessageVisuallyEx("910160", "", "GEN", "", "", "")
    End Function

    Public Function SendMessage_GetCidDocTyp() As String 'Enumerate Special Conditions
        Return AppInstance.SendMessageVisuallyEx("910210", "", "GEN", "", "", "")
    End Function

    Public Function SendMessage_GetCusPtyTyp() As String 'Enumerate Special Conditions
        Return AppInstance.SendMessageVisuallyEx("910220", "", "GEN", "", "", "")
    End Function


    Public Function SendMessage_GetSpcCon() As String 'Enumerate Special Conditions
        Return AppInstance.SendMessageVisuallyEx("910230", "", "GEN", "", "", "")
    End Function

    Public Function SendMessage_GetSalCde() As String 'Enumerate Salutation Codes
        Return AppInstance.SendMessageVisuallyEx("910240", "", "GEN", "", "", "")
    End Function

    Public Function SendMessage_EnumCusAccs(ByVal CusNum As String) As String
        Return AppInstance.SendMessageVisuallyEx("990120", AppInstance.PackString(CusNum, 6), "CUS", CusNum, "", "")
    End Function

    Public Function SendMessage_EnumTrxInf(ByVal AccNum As String, ByVal DteBeg As String, ByVal DteEnd As String, _
                                            ByVal AmtBot As String, ByVal AmtTop As String, ByVal RecLim As String, _
                                            ByVal RecSrt As String) As String
        Dim tmpStr As String
        tmpStr = AppInstance.PackString(AccNum, 13)
        tmpStr += AppInstance.PackString(DteBeg, 8)
        tmpStr += AppInstance.PackString(DteEnd, 8)
        tmpStr += AppInstance.PackString(AmtBot, 15)
        tmpStr += AppInstance.PackString(AmtTop, 15)
        tmpStr += AppInstance.PackString(RecLim, 4)
        tmpStr += AppInstance.PackString(RecSrt, 1)
        Return AppInstance.SendMessageVisuallyEx("930100", tmpStr, "ACC", ExtractCusNumFromAcc(AccNum), AccNum, "")
    End Function

    Public Function SendMessage_EnumTrxInfEx(ByVal AccNum As String, ByVal DteBeg As String, ByVal DteEnd As String, _
                                            ByVal AmtBot As String, ByVal AmtTop As String, ByVal RecLim As String, _
                                            ByVal RecSrt As String) As String
        Dim tmpStr As String
        tmpStr = AppInstance.PackString(AccNum, 13)
        tmpStr += AppInstance.PackString(DteBeg, 8)
        tmpStr += AppInstance.PackString(DteEnd, 8)
        tmpStr += AppInstance.PackString(AmtBot, 15)
        tmpStr += AppInstance.PackString(AmtTop, 15)
        tmpStr += AppInstance.PackString(RecLim, 4)
        tmpStr += AppInstance.PackString(RecSrt, 1)
        tmpStr += Space(192)
        Return AppInstance.SendMessageVisuallyEx("930110", tmpStr, "ACC", ExtractCusNumFromAcc(AccNum), AccNum, "")
    End Function

    Public Function SendMessage_EnumIntAccTrx(ByVal AccNum As String, ByVal DteBeg As String, ByVal DteEnd As String, _
                                             ByVal RecLim As String, _
                                            ByVal RecSrt As String) As String
        Dim tmpStr As String
        tmpStr = AppInstance.PackString(AccNum, 13)
        tmpStr += AppInstance.PackString(DteBeg, 8)
        tmpStr += AppInstance.PackString(DteEnd, 8)
        tmpStr += AppInstance.PackString(RecLim, 4)
        tmpStr += AppInstance.PackString(RecSrt, 1)
        tmpStr += AppInstance.PackString("", 3)
        tmpStr += AppInstance.PackString("", 26)
        tmpStr += Space(192)
        Return AppInstance.SendMessageVisuallyEx("930120", tmpStr, "ACC", ExtractCusNumFromAcc(AccNum), AccNum, "")
    End Function

    Public Function SendMessage_EnumOn2Trx(ByVal CusNum As String, ByVal CrdNum As String, ByVal CrdExp As String) As String
        Dim tmpStr As String
        tmpStr = AppInstance.PackString(CusNum, 6)
        tmpStr += AppInstance.PackString(CrdNum, 18)
        tmpStr += AppInstance.PackString(CrdExp, 8)
        tmpStr += Space(32)
        Return AppInstance.SendMessageVisuallyEx("932000", tmpStr, "CRD", CusNum, "", CrdNum)
    End Function

    Public Function SendMessage_EnumFunds(ByVal CusNum As String, ByVal Flg As String, ByVal FndCde As String) As String
        Dim tmpStr As String
        tmpStr = AppInstance.PackString(Flg, 1)
        tmpStr += AppInstance.PackString(FndCde, 3)
        tmpStr += Space(18)
        Return AppInstance.SendMessageVisuallyEx("960000", tmpStr, "CUS", CusNum, "", "")
    End Function

    Public Function SendMessage_EnumCusFunds(ByVal CusNum As String, ByVal Flg As String, ByVal SeeCCy As String) As String
        Dim tmpStr As String
        tmpStr = AppInstance.PackString(CusNum, 6)
        tmpStr += AppInstance.PackString(Flg, 1)
        tmpStr += AppInstance.PackString(SeeCCy, 3)
        tmpStr += Space(12)
        Return AppInstance.SendMessageVisuallyEx("960010", tmpStr, "CUS", CusNum, "", "")
    End Function

    Public Function SendMessage_EnumLoaSch(ByVal CusNum As String, ByVal DeaNum As String, ByVal DteBeg As String, ByVal DteEnd As String) As String
        Dim tmpStr As String
        tmpStr = AppInstance.PackString(CusNum, 6)
        tmpStr += AppInstance.PackString(DeaNum, 20)
        tmpStr += AppInstance.PackString(DteBeg, 8)
        tmpStr += AppInstance.PackString(DteEnd, 8)
        Return AppInstance.SendMessageVisuallyEx("970710", tmpStr, "CUS", CusNum, "", "")
    End Function

    Public Function SendMessage_SngRteEnq(ByVal FinTrxTyp As String, ByVal FinBwy As ICED0100.FinBwyDat_Struct) As String
        Dim tmpStr As String
        tmpStr = AppInstance.PackString(FinTrxTyp, 6)
        tmpStr += AppInstance.PackString(FinBwy.PackTable, 128)
        Return AppInstance.SendMessageVisuallyEx("970720", tmpStr, "GEN", "", "", "")
    End Function

    ''' Y600KHDA : Change the Structure to LAX
    Public Function SendMessage_EnumLoaSchEx(ByVal CusNum As String, ByVal DeaNum As String, ByVal DteBeg As String, ByVal DteEnd As String, ByVal ReqLoaDet As String) As String
        Dim tmpStr As String
        tmpStr = AppInstance.PackString(CusNum, 6)
        tmpStr += AppInstance.PackString(DeaNum, 20)
        tmpStr += AppInstance.PackString(DteBeg, 8)
        tmpStr += AppInstance.PackString(DteEnd, 8)
        If ReqLoaDet = "LAX" Then
            tmpStr += AppInstance.PackString(ReqLoaDet, 3)
            tmpStr += AppInstance.PackString(Space(47), 47)
        End If
        Return AppInstance.SendMessageVisuallyEx("970730", tmpStr, "CUS", CusNum, "", "")
    End Function

    ''' Y600KHDA : Add Fucntion to Send Loan Closure Message
    Public Function SendMessage_LoanClosure(ByVal CusNum As String, ByVal DeaNum As String, ByVal LoaCcyCde As String, _
                                            ByVal LoaAmtCls As String, ByVal PenFeeAmt As String, ByVal DebAccNum As String, _
                                            ByVal AutUsrIde As String, ByVal AutPacVal As String, ByVal MsgID As String) As String
        Dim tmpStr, MsgDump As String

        tmpStr = AppInstance.PackString(CusNum, 6)
        tmpStr += AppInstance.PackString(DeaNum, 20)
        tmpStr += AppInstance.PackString(Space(4), 4)
        tmpStr += AppInstance.PackString(LoaCcyCde, 3)
        tmpStr += AppInstance.PackString(LoaAmtCls, 14)
        tmpStr += AppInstance.PackString(Space(9), 9)
        tmpStr += AppInstance.PackString(PenFeeAmt, 14)
        tmpStr += AppInstance.PackString(DebAccNum, 13)
        tmpStr += AppInstance.PackString(Space(62), 62)

        MsgID = AppInstance.PrepareMQMessage(MsgID, "550210", tmpStr, "CUS", CusNum, "", "", "N", AutUsrIde, AutPacVal, MsgDump)
        If Not IsValidMid(MsgID) Then
            Return Nothing
        End If

        '''If (IceTryFin = "N") Then
        '''    If Not UpdateBranchDatabase(MsgDump, IceBrnJrn, ICED0100.Globals.LogBrnType.Request) Then
        '''        HandleError(&H81000026, "Could not update branch database (Capital Transfer)", "ICE Branch Database")
        '''        Return Nothing
        '''    End If
        '''End If

        Return AppInstance.SendMessagePreparedVisually(MsgID, "550210", MsgDump)
        '''Return AppInstance.SendMessageVisuallyEx("550210", tmpStr, "CUS", CusNum, "", "")
    End Function

    Public Function SendMessage_EnumAtmCrds(ByRef lAtmDat As AtmDat_Struct) As String
        Dim tmpStr As String
        With lAtmDat
            tmpStr = AppInstance.PackString(.CusNum, 6)
            tmpStr += AppInstance.PackString(.AccFlg, 1)
            tmpStr += AppInstance.PackString(.AccNum, 13)
            tmpStr += AppInstance.PackString(.CrdFlg, 1)
            tmpStr += AppInstance.PackString(.CrdNum, 18)
            tmpStr += AppInstance.PackString(.CrdSta, 5)
        End With
        Return AppInstance.SendMessageVisuallyEx("990130", tmpStr, "CUS", lAtmDat.CusNum, lAtmDat.AccNum, lAtmDat.CrdNum)
    End Function

    Public Function SendMessage_GetAccDtlEx(ByVal AccNum As String, ByVal ExtAcc As String, ByVal IntAcc As String, ByVal PalAcc As String, Optional ByVal IncCmpDat As String = "N") As String
        Dim MsgData As String
        Dim i As Integer
        Try
            MsgData = AppInstance.PackString(AccNum, 13)
            MsgData += AppInstance.PackString(" ", 19)
            MsgData += AppInstance.PackString(ExtAcc, 1)
            MsgData += AppInstance.PackString(IntAcc, 1)
            MsgData += AppInstance.PackString(PalAcc, 1)
            MsgData += AppInstance.PackString(IncCmpDat, 1)
            MsgData += AppInstance.PackString(" ", 1)
            MsgData += AppInstance.PackString("Y", 1) 'StmSupFlg
            MsgData += AppInstance.PackString(" ", 58)
        Catch ex As Exception
            Return Nothing
        End Try
        Return AppInstance.SendMessageVisuallyEx("990200", MsgData, "ACC", ExtractCusNumFromAcc(AccNum), AccNum, "")
    End Function

    Public Function SendMessage_GetInternalAccDtl(ByVal AccNum As String, ByVal AccMnm As String, ByVal AccCcy As String) As String
        Dim MsgData As String
        Dim i As Integer
        Try
            MsgData = AppInstance.PackString(AccNum, 13)
            MsgData += AppInstance.PackString(AccMnm, 6)
            MsgData += AppInstance.PackString(AccCcy, 3)
            MsgData += AppInstance.PackString(" ", 84)
        Catch ex As Exception
            Return Nothing
        End Try
        Return AppInstance.SendMessageVisuallyEx("990600", MsgData, "ACC", "", AccNum, "")
    End Function

    Public Function SendMessage_EnumAtmCrdsEx(ByRef lAtmDatEx As AtmDatEx_Struct) As String
        Dim tmpStr As String
        With lAtmDatEx
            Dim sCardExpiry As String
            sCardExpiry = lAtmDatEx.getCardExpiry(.CrdExp)

            tmpStr = AppInstance.PackString(.CusNum, 6)
            tmpStr += AppInstance.PackString(.AccFlg, 1)
            tmpStr += AppInstance.PackString(.AccNum, 13)
            tmpStr += AppInstance.PackString(.CrdFlg, 1)
            tmpStr += AppInstance.PackString(.CrdNum, 18).Replace("******", "000000")
            tmpStr += AppInstance.PackString(.CrdSta, 5)
            tmpStr += sCardExpiry
            tmpStr += AppInstance.PackString(" ", 56)
        End With
        Return AppInstance.SendMessageVisuallyEx("990330", tmpStr, "CRD", lAtmDatEx.CusNum, lAtmDatEx.AccNum, lAtmDatEx.CrdNum)
    End Function

    Public Function SendMessage_EnumTemplates(ByVal CusNum As String, ByRef TmpSearch As TmpSearch_Struct) As String
        Dim tmpStr As String
        With TmpSearch
            tmpStr = AppInstance.PackString(CusNum, 6)
            tmpStr += AppInstance.PackString(.TrgTyp, 6)
            tmpStr += AppInstance.PackString(.TmpIdeNum, 3)
            tmpStr += AppInstance.PackString(.TmpIdeNam, 20)
            tmpStr += AppInstance.PackString(.IVRWavFle, 64)
            tmpStr += AppInstance.PackString(.TmpSta, 1)
            tmpStr += AppInstance.PackString(.TmpCreSys, 3)
        End With
        Return AppInstance.SendMessageVisuallyEx("990260", tmpStr, "CUS", CusNum, "", "")
    End Function

    'Public Function SendMessage_EnumCusDtls(ByVal CusNum As String) As String
    '    Dim tmpStr As String

    '    tmpStr = AppInstance.PackString(CusNum, 6)
    '    tmpStr += AppInstance.PackString(" ", 4)
    '    Return AppInstance.SendMessageVisuallyEx("990150", tmpStr, "CUS", CusNum, "", "")
    'End Function

    Public Function SendMessage_EnumChnGrp(ByVal CusNum As String) As String
        Dim tmpStr As String
        tmpStr = AppInstance.PackString(CusNum, 6)
        Return AppInstance.SendMessageVisuallyEx("990210", tmpStr, "CUS", CusNum, "", "")
    End Function

    Public Function SendMessage_EnumCusDtlsEx(ByVal CusNum As String, ByVal RetrieveClosedLoans As Boolean) As String
        Dim tmpStr As String
        Dim ClosedLoans As String = "N"
        If RetrieveClosedLoans Then ClosedLoans = "Y"

        tmpStr = AppInstance.PackString(CusNum, 6)
        tmpStr &= AppInstance.PackString(" ", 59)
        tmpStr &= AppInstance.PackString("Y   Y   Y   N   N   N   N   ", 28)
        tmpStr &= AppInstance.PackString(" ", 35)
        'tmpStr &= AppInstance.PackString("NYNNNNYYNNYYYYYY", 16)
        tmpStr &= AppInstance.PackString("NYNYYYYYNYYYYYYY", 16)

        tmpStr &= AppInstance.PackString("   " & ClosedLoans & "  ", 6)
        tmpStr &= AppInstance.PackString(" ", 74)
        Return AppInstance.SendMessageVisuallyEx("990250", tmpStr, "CUS", CusNum, "", "")






        'Dim tmpStr As String

        'tmpStr = AppInstance.PackString(CusNum, 6)
        'tmpStr &= AppInstance.PackString(" ", 59)
        'tmpStr &= AppInstance.PackString("Y   Y   Y   N   N   N   N   ", 28)
        'tmpStr &= AppInstance.PackString(" ", 35)
        'tmpStr &= AppInstance.PackString("NYNYYYYYNYYYYYYY", 16)
        'tmpStr &= AppInstance.PackString(" ", 80)
        'Return AppInstance.SendMessageVisuallyEx("990250", tmpStr, "CUS", CusNum, "", "")
    End Function

    Public Function SendMessage_GetON2Cde() As String
        Return AppInstance.SendMessageVisuallyEx("990270", "", "GEN", "", "", "")
    End Function


    Public Function SendMessage_ResolveDoubtful(ByVal OrgProCde As String, ByVal OrgMid As String, ByVal OrgUsrIde As String) As String
        Dim MsgDump As String
        Dim MsgDat As String = ""
        MsgDat &= AppInstance.PackString(OrgProCde, 6)
        MsgDat &= AppInstance.PackString(OrgMid, 12)
        MsgDat &= AppInstance.PackString(OrgUsrIde, 32)
        MsgDat &= AppInstance.PackString("", 44)
        Dim MsgID As String
        MsgID = AppInstance.PrepareMQMessage("", "990280", MsgDat, "GEN", "", "", "", "N", "", "", MsgDump)
        If Not (IsValidMid(MsgID)) Then
            Return Nothing
        Else
            If Not LogIntoBrnDatabase(MsgDump, ICED0100.Globals.LogBrnType.Request) Then
                HandleError(&H81000050, "Could not Resolve transaction", "ICE Branch Database")
                Return Nothing
            End If
        End If
        Return AppInstance.SendMessagePreparedVisually(MsgID, "990280", MsgDump)
    End Function

    Public Function SendMessage_EnumerateJrnMsg() As String
        Return AppInstance.SendMessageVisuallyEx("990290", "", "GEN", "", "", "")
    End Function

    Public Function SendMessage_GetCshTrxNam() As String
        Return AppInstance.SendMessageVisuallyEx("990390", "", "GEN", "", "", "")
    End Function

    Public Function SendMessage_GetCshMsgTyp() As String
        Return AppInstance.SendMessageVisuallyEx("990450", "", "GEN", "", "", "")
    End Function

    Public Function SendMessage_GetCshReaCde() As String
        Return AppInstance.SendMessageVisuallyEx("990460", "", "GEN", "", "", "")
    End Function


#End Region

#Region "GetMessage_..."

    '
    ' ----------------------------------------------------------------------
    '

    Public Function GetMessage_Common(ByVal MsgCde As String, ByVal MsgNam As String, ByVal MsgID As String, ByVal ErrNum As Integer, ByRef resp As String, _
                                      Optional ByVal bShowAlert As Boolean = True, Optional ByVal BypassError As Boolean = False) As Boolean
        Dim RetryCount As Integer = AppInstance.MQS.GetRetries
        If MsgNam = "" Then
            MsgNam = SIBL0100.Util.Debug.getStackFrame(New StackTrace(True).GetFrame(1))
        End If
        'Try to retrieve the message for 3 times
        Do
            resp = AppInstance.MQGetMessage(MsgID, BypassError)
            RetryCount -= 1
        Loop While (RetryCount > 0) AndAlso (AppInstance.MQS.ErrNum = 2033)

        If AppInstance.MQS.ErrNum <> 0 Then
            AppInstance.FormatMQSError(MsgNam, AppInstance.MQS.ErrNum, AppInstance.MQS.ErrDsc)
            resp = "MQ" & AppInstance.MQS.ErrNum
            Return False
        ElseIf resp.Length = 10 Then
            Dim ActCde As String
            Dim ResCde As String
            ResCde = AppInstance.strip(resp, 3).Trim
            ActCde = resp.Trim
            resp = (ResCde & ActCde).Trim
            HandleError(&H80002003, "Message " & MsgCde & ":Rejected, Result Code:" & ResCde & ",  Action Code:" & ActCde)

            'Special Filter
            If ActCde = "39" AndAlso ResCde = "593" AndAlso bShowAlert Then
                ModalMessageBox("You cannot remove a customer from the group as there are departments referencing accounts under that customer." & vbCrLf & _
                                        "Please modify the department lists first, then remove the customer.", MessageBoxButtons.OK, MessageBoxDefaultButton.Button1, MessageBoxIcon.Error, "ICE Error", gfrmMain)
            Else
                If bShowAlert Then AppInstance.ShowHostError(MsgCde, MsgID, ResCde, ActCde)
            End If
            Return False
        ElseIf resp.Substring(0, 7) = "*ERROR*" Then
            'There is an error, but the caller requested the message to be handed back
            resp = resp.Substring(7)
            Return False
        End If

        'Check if CstVerTab has changed, if it did, then resync the host tables
        'but do not do that if the message is itself obtaining the latest table (990000) or if it is instructed to ignore
        If MsgCde <> "990000" AndAlso ICEDataBase.CstVerTab_Version <> "#IGNOREMENOW" Then
            Dim p_CstVerTab As String
            p_CstVerTab = AppInstance.SafeSubString(resp, 180, 12)
            If p_CstVerTab > ICEDataBase.CstVerTab_Version Then
                AppInstance.Logger.LogInfo(0, "Updated CstVerTab detected in message header. Old version [" & _
                                        ICEDataBase.CstVerTab_Version & "]. New version [" & p_CstVerTab & "].")
                ICEDataBase.SyncTables()
            End If
        End If
        'AppInstance.Logger.LogInfo(&H80000000, "Response: " & resp)
        Return True
    End Function

    Public Function GetMessage_Echo(ByVal MsgId As String, ByRef MsgStr As String) As Boolean
        Dim resp As String = String.Empty
        If Not (GetMessage_Common("900000", "", MsgId, &H80002003, resp)) Then Return False
        AppInstance.strip(resp, 256)
        AppInstance.strip(resp, 44)
        MsgStr = resp
        Return True
    End Function

    Public Function GetMessage_EnumerateJrnMsg(ByVal MsgId As String, ByRef JrnDsc() As JrnDscTab_Struct) As Boolean
        '990290
        Dim resp As String = String.Empty
        Dim tmpStr As String
        Dim i, count As Integer
        Dim verRec As CoreSys_VerItm

        If Not (GetMessage_Common("990290", "", MsgId, &H80011011, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            count = CType(AppInstance.strip(resp, 3), Integer)
            If count <= 0 Then
                Erase JrnDsc
                Return False
            End If
            ReDim JrnDsc(count - 1)
            For i = 0 To JrnDsc.Length - 1
                tmpStr = AppInstance.strip(resp, 80)
                With JrnDsc(i)
                    .MsgSrc = Trim(AppInstance.strip(tmpStr, 4))
                    .ProCde = Trim(AppInstance.strip(tmpStr, 6))
                    .MsgCls = Trim(AppInstance.strip(tmpStr, 3))
                    .TrxCatCde = Trim(AppInstance.strip(tmpStr, 3))
                    .TrxAutCtl = Trim(AppInstance.strip(tmpStr, 5))
                    .TrxRvuCtl = Trim(AppInstance.strip(tmpStr, 5))
                    .ProCdeDsc = Trim(AppInstance.strip(tmpStr, 35))
                    .RSV1 = Trim(AppInstance.strip(tmpStr, 19))
                End With
            Next
        Catch ex As Exception
            HandleError(&H80011012, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_TrxReverse(ByVal MsgID As String, ByRef frp As ICED0100.FinRspDat_Struct, ByRef frd As ICED0100.FinRevDat_Struct, _
                                            ByRef IceBrnJrn As ICED0100.IceTrxJrn_Struct, ByRef RvdBrnJrn As ICED0100.IceTrxJrn_Struct, ByRef ErrNum As String, _
                                            Optional ByVal SrcStr As String = Nothing) As Boolean
        'Message:400020
        Dim resp As String = String.Empty
        If SrcStr Is Nothing Then
            resp = AppInstance.MQGetMessage(MsgID)
        Else
            resp = SrcStr
        End If
        If AppInstance.MQS.ErrNum <> 0 Then
            With IceBrnJrn
                .TrxSts = "INF"
                .CmpCde = "ERR"
                .MsgResCde = ""
                .IntErrCde = AppInstance.MQS.ErrNum.ToString
            End With
            If (SrcStr Is Nothing) Then
                UpdateIceBrnJournal(IceBrnJrn, ICED0100.Globals.LogBrnType.Response)
            End If
            If AppInstance.MQS.ErrNum = 2033 Then 'No message received from host
                HandleError(&H80002001, "GetMessage_TrxReverse:" & AppInstance.MQS.ErrNum & ":" & AppInstance.MQS.ErrDsc)
                MessageBox.Show("The host did not reply in a timely manner." & vbCrLf & _
                                "The result for the transaction is doubtful." & vbCrLf & vbCrLf & _
                                "Please try to resolve the transaction in the" & vbCrLf & _
                                "Transaction Resolution panel before" & vbCrLf & _
                                "performingthe transaction again.", "No Response From Host", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            Else
                AppInstance.FormatMQSError("GetMessage_TrxReverse", AppInstance.MQS.ErrNum, AppInstance.MQS.ErrDsc)
            End If
            Return False
        ElseIf resp.Length = 10 Then
            Dim ActCde As String
            Dim ResCde As String
            ErrNum = resp.Trim
            ResCde = AppInstance.strip(resp, 3)
            ActCde = resp.Trim
            HandleError(&H81000052, "Message 400020:Rejected, Result Code:" & ResCde & ", Action Code:" & ActCde)
            'Update the journal on the branch database
            With IceBrnJrn
                .TrxSts = "CMP"
                .CmpCde = "ERR"
                .MsgResCde = ResCde & ActCde
                .IntErrCde = "00001" 'Message rejected by host
                .RspUsr = AppInstance.LoggedUser
                .RspWst = AppInstance.Workstation.ToUpper
            End With
            If (SrcStr Is Nothing) Then
                UpdateIceBrnJournal(IceBrnJrn, ICED0100.Globals.LogBrnType.Response)
            End If
            If ActCde.Trim = "16" Then
                Dim ReaTxt As String
                Dim idx As Integer = LocateResCde(ResCde)
                If idx < 0 Then
                    ReaTxt = ResCde
                Else
                    ReaTxt = ResCde & ": " & ResCdeTable(idx).IntResEng.Trim
                End If

                MessageBox.Show("This transaction needs authorization by a supervisor." & vbCrLf & vbCrLf & _
                                "The reason for authorization is:" & vbCrLf & _
                                "[" & ReaTxt & "]" & vbCrLf & vbCrLf & _
                                "Press the Supervisor button for authorization.", "Supervisor Authority Needed", _
                                MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            Else
                AppInstance.ShowHostError("400020", MsgID, ResCde, ActCde)
            End If
            Return False
        End If
        If (SrcStr Is Nothing) Then
            RvdBrnJrn.TrxRevFlg = "Y"
            RvdBrnJrn.CanRevFlg = "N"
            If Not (UpdateIceBrnJournal(RvdBrnJrn, ICED0100.Globals.LogBrnType.Other)) Then
                HandleError(&H81000051, "Could not update reversed transaction journal (Transaction Reversal)", "ICE Branch Database")
                'Return Nothing
            End If

            If Not LogIntoBrnDatabase(resp, ICED0100.Globals.LogBrnType.Response) Then
                HandleError(&H81000056, "Could not log transaction (Reverse Transaction)", "ICE Branch Database")
            End If
        End If

        AppInstance.strip(resp, 256)
        AppInstance.strip(resp, 256)
        AppInstance.strip(resp, 128)
        frp.ReadTable(resp)
        frd.ReadTable(resp)
        If (SrcStr Is Nothing) Then
            With IceBrnJrn
                .TrxSts = "CMP"
                .CmpCde = "OK"
                .MsgResCde = "00000"
                .IntErrCde = "00000"
                .HstTrxRef = frd.RevRef
                .CanRevFlg = "N"
                .TrxRevFlg = "N"
                .RspUsr = AppInstance.LoggedUser
                .RspWst = AppInstance.Workstation.ToUpper
            End With
            If Not UpdateIceBrnJournal(IceBrnJrn, ICED0100.Globals.LogBrnType.Response) Then
                HandleError(&H81000053, "Could not log transaction (Reverse Transaction)", "ICE Branch Database")
            End If
        End If
        Return True
    End Function

    Public Function GetMessage_FundsXfr(ByVal MsgID As String, ByRef fxr As ICED0100.FndXfrRsp_Struct, ByRef IceBrnJrn As ICED0100.IceTrxJrn_Struct, _
                                        Optional ByVal SrcStr As String = Nothing) As Boolean
        Return GetMessage_FundsXfrEx(MsgID, fxr, IceBrnJrn, "", "N", SrcStr)
    End Function


    Public Function GetMessage_FundsXfrEx(ByVal MsgID As String, ByRef fxr As ICED0100.FndXfrRsp_Struct, ByRef IceBrnJrn As ICED0100.IceTrxJrn_Struct, _
                                        ByRef ErrNum As String, ByVal IceTryFin As String, Optional ByVal SrcStr As String = Nothing, _
                                        Optional ByRef SupOvrStr As String = Nothing, Optional ByVal SupressSupervisorMessage As Boolean = False) As Boolean
        'Message:500010
        Dim resp, MsgDump As String
        'Read from the provided stream if provided, otherwise, read from MQ using the supplied MsgID
        If SrcStr Is Nothing Then
            'resp = AppInstance.MQGetMessage(MsgID)
            'Try to retrieve the message for 3 times
            Dim RetryCount As Integer = AppInstance.MQS.GetRetries
            Do
                resp = AppInstance.MQGetMessage(MsgID)
                RetryCount -= 1
            Loop While (RetryCount > 0) AndAlso (AppInstance.MQS.ErrNum = 2033)
        Else
            resp = SrcStr
        End If
        MsgDump = resp
        If AppInstance.MQS.ErrNum <> 0 Then
            With IceBrnJrn
                .TrxSts = "INF"
                .CmpCde = "ERR"
                .MsgResCde = ""
                .IntErrCde = AppInstance.MQS.ErrNum.ToString
            End With
            If (SrcStr Is Nothing) And (IceTryFin = "N") Then
                UpdateIceBrnJournal(IceBrnJrn, ICED0100.Globals.LogBrnType.Response)
                If AppInstance.MQS.ErrNum = 2033 Then 'No message received from host
                    HandleError(&H80002001, "GetMessage_TrxReverse:" & AppInstance.MQS.ErrNum & ":" & AppInstance.MQS.ErrDsc)
                    MessageBox.Show("The host did not reply in a timely manner." & vbCrLf & _
                                    "The result for the transaction is doubtful." & vbCrLf & vbCrLf & _
                                        "Please try to resolve the transaction in the" & vbCrLf & _
                                        "Transaction Resolution panel before" & vbCrLf & _
                                        "performing the transaction again.", "No Response From Host", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                Else
                    AppInstance.FormatMQSError("GetMessage_FundxXfr", AppInstance.MQS.ErrNum, AppInstance.MQS.ErrDsc)
                End If
            End If
            Return False
        ElseIf resp.Length = 10 Then
            Dim ActCde As String
            Dim ResCde As String
            Dim MsgResInd As String
            ErrNum = resp.Trim
            ResCde = AppInstance.strip(resp, 3)
            ActCde = AppInstance.strip(resp, 2)
            AppInstance.strip(resp, 3)
            AppInstance.strip(resp, 1)
            MsgResInd = AppInstance.strip(resp, 1)
            HandleError(&H81000017, "Message 500010:Rejected, Result Code:" & ResCde & ", Action Code:" & ActCde)
            'Update the journal on the branch database
            With IceBrnJrn
                .TrxSts = "CMP"
                .CmpCde = "ERR"
                .MsgResCde = ResCde & ActCde
                .IntErrCde = "00001" 'Message rejected by host
                .RspUsr = AppInstance.LoggedUser
                .RspWst = AppInstance.Workstation.ToUpper
            End With
            'UpdateIceBrnJournal(IceBrnJrn, ICED0100.Globals.LogBrnType.Response)
            If (SrcStr Is Nothing) And (IceTryFin = "N") Then
                If Not UpdateBranchDatabase(MsgDump, IceBrnJrn, ICED0100.Globals.LogBrnType.Response) Then
                    HandleError(&H81000033, "Could not update branch database (Capital Transfer)", "ICE Branch Database")
                End If
            End If

            Dim ErrCde(9) As String
            Dim MQError_Item As ICEI0100.AppInstanceClass.MQError_Item_struct
            If MsgResInd = "S" Then
                MQError_Item = CType(AppInstance.MQErrors.Item(MsgID), ICEI0100.AppInstanceClass.MQError_Item_struct)
            End If
            Dim st As String
            If (ActCde.Trim = "16") AndAlso (MsgResInd = "S") AndAlso (Not MQError_Item.ErrStr Is Nothing) AndAlso (MQError_Item.ErrStr <> "") Then
                st = MQError_Item.ErrStr
                Dim idx As Integer

                strip(st, 5) 'ErrBlkMrk	5x	Constant “<ERR>” Error block marker
                strip(st, 3) 'ErrBlkTyp	3x	Constant “<S>” Error block type
                'ErrTxtStd	Varies	Minimum 128, maximum 1728, typical 428
                'ErrChn001	31x	Channel dependent data
                For idx = 0 To 9  'RefReaCde[10]	10*3x	•	Reason codes or spaces
                    ErrCde(idx) = strip(st, 3)
                Next
                If strip(st, 1) = "+" Then 'RefReaOvf	1x	•	Overflow flag set to “+” if more than 10 reasons, otherwise space
                    st = "There are more than 10 overridable conditions returned for this transaction." & vbCrLf & _
                        "The first 10 conditions are listed below:" & vbCrLf & vbCrLf
                Else
                    st = "The following overridable conditions were returned for this transaction:" & vbCrLf & vbCrLf
                End If
                'ErrTxtLng	2x	Language of the error text (“EN” = English, “AR”=Arabic)
                'ErrTxtStp	14x	Date and time generated (YYYYMMDDhhmmss)
                'Rsv2	76x	Reserved, space filled
                'ErrChrSet	1x	Flag (Y/N) if the error text contains any Arabic characters
                'ErrtxtItm	Varies	Error text item
                'ErrTxtLen	4n	•	Number of data bytes in the following text (max 1600)
                'ErrTxtDat	Varies	•	Error text (may contain embedded newlines)
                For idx = 0 To 9
                    If ErrCde(idx).Trim = "" Then Exit For
                    Dim CdeIdx As Integer = LocateResCde(ErrCde(idx))
                    If CdeIdx < 0 Then
                        st &= "* " & ErrCde(idx) & vbCrLf & vbCrLf
                    Else
                        st &= "* " & ErrCde(idx) & ": " & vbCrLf & ResCdeTable(CdeIdx).IntResEng.Trim & vbCrLf & vbCrLf
                    End If
                Next
                If Not (SupOvrStr Is Nothing) Then SupOvrStr = st
                If Not SupressSupervisorMessage Then
                    st &= vbCrLf & "Press on the Supervisor button for authorization."
                    ModalMessageBox(st, MessageBoxButtons.OK, , MessageBoxIcon.Exclamation, "Supervisor Authority Needed")
                End If
            ElseIf ActCde.Trim = "16" Then
                Dim ReaTxt As String
                Dim idx As Integer = LocateResCde(ResCde)
                If idx < 0 Then
                    ReaTxt = ResCde
                Else
                    ReaTxt = ResCde & ": " & ResCdeTable(idx).IntResEng.Trim
                End If

                st = "This transaction needs authorization by a supervisor." & vbCrLf & vbCrLf & _
                                "The reason for authorization is:" & vbCrLf & "*" & ReaTxt & vbCrLf & vbCrLf
                If Not (SupOvrStr Is Nothing) Then SupOvrStr = st
                If Not SupressSupervisorMessage Then
                    st &= vbCrLf & "Press on the Supervisor button for authorization."
                    MessageBox.Show(st, "Supervisor Authority Needed", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                End If
            Else
                AppInstance.ShowHostError("500010", MsgID, ResCde, ActCde)
            End If
            Return False
        End If
        AppInstance.strip(resp, 256)
        fxr.ReadTable(resp)
        If (SrcStr Is Nothing) Then
            With IceBrnJrn
                .TrxSts = "CMP"
                .CmpCde = "OK"
                .MsgResCde = "00000"
                .IntErrCde = "00000"
                .RspUsr = AppInstance.LoggedUser
                .RspWst = AppInstance.Workstation.ToUpper
                .HstTrxRef = fxr.FinRspDat.DebRef
                .CanRevFlg = fxr.FinRspDat.ChnCanRev

                '''If .TrxCls <> "CSH" Then
                .CreTrxAmt = fxr.FinRspDat.Fin400Dat.AmtBuy
                .CreTrxCcy = fxr.FinRspDat.Fin400Dat.CcyBuy
                .DebTrxAmt = fxr.FinRspDat.AmtTot
                .DebTrxCcy = fxr.FinRspDat.Fin400Dat.CcySel
                '''End If
            End With
            If (IceTryFin = "N") Then
                If Not UpdateBranchDatabase(MsgDump, IceBrnJrn, ICED0100.Globals.LogBrnType.Response) Then
                    HandleError(&H81000033, "Could not update branch database (Capital Transfer)", "ICE Branch Database")
                End If
            End If
        End If
        Return True
    End Function

    Public Function GetMessage_StopATMCard(ByVal MsgId As String) As Boolean
        'Message:550060
        Dim resp As String = String.Empty
        If Not (GetMessage_Common("550060", "", MsgId, &H80002004, resp)) Then Return False
        AppInstance.strip(resp, 256)
        AppInstance.strip(resp, 6)
        AppInstance.strip(resp, 1)
        AppInstance.strip(resp, 1)
        AppInstance.strip(resp, 13)
        Dim count As Integer
        count = CType(AppInstance.strip(resp, 4), Integer)
        If count <= 0 Then
            HandleError(&H80002005, "", "Stop ATM Card")
            Return False
        End If
        'AppInstance.strip(resp, 219)
        Return True
    End Function

    Public Function GetMessage_RegisterCustomerTemplate(ByVal MsgId As String, ByRef TmpDat As TmpDat_Struct) As Boolean
        '550090
        Dim resp As String = String.Empty
        Dim tmpStr, ItmTyp As String
        Dim i, count, ln As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow


        If Not (GetMessage_Common("550090", "", MsgId, &H80002070, resp)) Then Return False

        Try
            AppInstance.strip(resp, 256) 'Header
            AppInstance.strip(resp, 3) 'TmpIdeNum
            With TmpDat
                .CusNum = AppInstance.strip(resp, 6) '6n
                .IBKCrpIde = AppInstance.strip(resp, 10) '10x
                .IBKUsrIde = AppInstance.strip(resp, 10) '10x
                .TrgTyp = AppInstance.strip(resp, 6) '6x
                'TmpIde(87)
                .TmpIdeNum = AppInstance.strip(resp, 3) '3n
                .TmpIdeNam = AppInstance.strip(resp, 20) '20x
                '.IVRWavFle = AppInstance.strip(resp, 64) '64x
                .AprTmpUsr = AppInstance.strip(resp, 10) '2x
                .AprTmpStp = AppInstance.strip(resp, 14) '2x
                .BenRlt = AppInstance.strip(resp, 2) '2x
                .CusKSAKng = AppInstance.strip(resp, 1) '2x
                .BenNmeMsk = AppInstance.strip(resp, 35) '2x
                .Rsv05 = AppInstance.strip(resp, 2) '2x
               
                .BenRlt = AppInstance.strip(resp, 2) '2x

                .TmpSta = AppInstance.strip(resp, 1) '1x
                .TmpSysCre = AppInstance.strip(resp, 3) '3x
                .TmpStpCre = AppInstance.strip(resp, 14) '14x
                .TmpUsrCre = AppInstance.strip(resp, 10) '10x
                .TmpStpMod = AppInstance.strip(resp, 14) '14x
                .TmpUsrMod = AppInstance.strip(resp, 10) '10x
                .TmpStpUse = AppInstance.strip(resp, 14) '14x
                .TmpUsrUse = AppInstance.strip(resp, 10) '10x
                .DebAccFlg = AppInstance.strip(resp, 1) '1x
                .DebAccNum = AppInstance.strip(resp, 13) '13n
                .PayAmtFlg = AppInstance.strip(resp, 1) '1x
                .PayAmt = AppInstance.strip(resp, 14) '14n
                .PayCcy = AppInstance.strip(resp, 3) '3x
                'AwiGrp(182)
                .AwiBicCde = AppInstance.strip(resp, 11) '11x
                'AwiNat(25)
                .AwiNatCde = AppInstance.strip(resp, 2) '2x
                .AwiNatVal = AppInstance.strip(resp, 15) '15x
                .AwiBicKey = AppInstance.strip(resp, 8) '8x
                .AwiChpCde = AppInstance.strip(resp, 6) '6x
                .AwiNamAdd1 = AppInstance.strip(resp, 35) '4*35x
                .AwiNamAdd2 = AppInstance.strip(resp, 35)
                .AwiNamAdd3 = AppInstance.strip(resp, 35)
                .AwiNamAdd4 = AppInstance.strip(resp, 35)
                .BenAccNum = AppInstance.strip(resp, 34) '34x
                .BenNamAdd1 = AppInstance.strip(resp, 35) '4*35x
                .BenNamAdd2 = AppInstance.strip(resp, 35)
                .BenNamAdd3 = AppInstance.strip(resp, 35)
                .BenNamAdd4 = AppInstance.strip(resp, 35)
                .PayDetFlg = AppInstance.strip(resp, 1) '1x
                .PayDet1 = AppInstance.strip(resp, 35) '2*35x
                .PayDet2 = AppInstance.strip(resp, 35)
                .TelBen = AppInstance.strip(resp, 1) '1x
                .TelBenNum = AppInstance.strip(resp, 25) '25x
                .PaySamCde = AppInstance.strip(resp, 2) '2x
                .RskMgtDat = AppInstance.strip(resp, 60) '60x
                .SecCcyCde = AppInstance.strip(resp, 3) '3x
                .DebAccCcy = AppInstance.strip(resp, 3) '3x
                .TmpAppDat = AppInstance.strip(resp, 20) '20x
            End With
        Catch ex As Exception
            HandleError(&H80002071, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_ActivateATMCard(ByVal MsgId As String) As Boolean
        'Message:550130
        Dim resp As String = String.Empty
        If Not (GetMessage_Common("550130", "", MsgId, &H80002098, resp)) Then Return False
        AppInstance.strip(resp, 256)
        AppInstance.strip(resp, 6)
        AppInstance.strip(resp, 1)
        AppInstance.strip(resp, 1)
        AppInstance.strip(resp, 13)
        Dim count As Integer
        count = CType(AppInstance.strip(resp, 4), Integer)
        If count <= 0 Then
            HandleError(&H80002099, SIBL0100.Util.Debug.getStackFrame(New StackTrace(True).GetFrame(0)) & ": No ATM Cards could be Activated", "Activate ATM Card")
            Return False
        End If
        'AppInstance.strip(resp, 219)
        Return True
    End Function

    Public Function GetMessage_ReactivateATMCard(ByVal MsgId As String) As Boolean
        'Message:550190
        Dim resp As String = String.Empty
        If Not (GetMessage_Common("550190", "", MsgId, &H81000162, resp)) Then Return False
        AppInstance.strip(resp, 256)
        AppInstance.strip(resp, 6)
        AppInstance.strip(resp, 1)
        AppInstance.strip(resp, 1)
        AppInstance.strip(resp, 13)
        Dim count As Integer
        count = CType(AppInstance.strip(resp, 4), Integer)
        If count <= 0 Then
            HandleError(&H81000163, SIBL0100.Util.Debug.getStackFrame(New StackTrace(True).GetFrame(0)) & ": No ATM Cards could be Activated", "Activate ATM Card")
            Return False
        End If
        'AppInstance.strip(resp, 219)
        Return True
    End Function

    Public Function GetMessage_SetIceRol(ByVal MsgId As String) As Boolean
        'Message:610000
        Dim resp As String = String.Empty
        If Not (GetMessage_Common("610000", "", MsgId, &H80002006, resp)) Then Return False
        AppInstance.strip(resp, 256)
        'AppInstance.strip(resp, 12)
        Return True
    End Function

    Public Function GetMessage_SetIceAutDsc(ByVal MsgId As String) As Boolean
        'Message:610010
        Dim resp As String = String.Empty
        If Not (GetMessage_Common("610010", "", MsgId, &H80002007, resp)) Then Return False
        AppInstance.strip(resp, 256)
        'AppInstance.strip(resp, 12)
        Return True
    End Function

    Public Function GetMessage_RegisterCLIP(ByRef TabRowVer As String, ByVal MsgId As String) As Boolean
        '612000:RegisterCLIP
        Dim resp As String = String.Empty
        If Not (GetMessage_Common("612000", "", MsgId, &H80002008, resp)) Then Return False
        AppInstance.strip(resp, 256)
        AppInstance.strip(resp, 6)
        TabRowVer = AppInstance.strip(resp, 12)
        Return True
    End Function

    Public Function GetMessage_RegisterOTAC(ByVal MsgId As String, ByRef EnrInf As CoreSys_EnrInf) As Boolean
        '612010:RegisterOTAC
        Dim resp As String = String.Empty
        If Not (GetMessage_Common("612010", "", MsgId, &H80002009, resp)) Then Return False
        AppInstance.strip(resp, 256)
        AppInstance.strip(resp, 6)
        EnrInf.TabRowVer = AppInstance.strip(resp, 12)
        AppInstance.strip(resp, 1 + 1 + 25)
        EnrInf.AutLstSer = AppInstance.strip(resp, 4)
        'Ignore the list, call GetEnrInf again.
        Return True
    End Function

    Public Function GetMessage_UpdateLimits(ByVal MsgId As String, ByRef EnrInf As CoreSys_EnrInf) As Boolean
        '612020:UpdateLimits
        Dim resp As String = String.Empty
        If Not (GetMessage_Common("612020", "", MsgId, &H80002010, resp)) Then Return False
        AppInstance.strip(resp, 256)
        AppInstance.strip(resp, 4)
        AppInstance.strip(resp, 6)
        EnrInf.TabRowVer = AppInstance.strip(resp, 12)
        'Ignore the list, call GetEnrInf again.
        Return True
    End Function

    Public Function GetMessage_EnrolRetail(ByVal MsgId As String, ByRef CrpIde As String, ByRef UsrIde As String) As Boolean
        '612120:Enrol Retail Client
        Dim resp As String = String.Empty
        If Not (GetMessage_Common("612120", "", MsgId, &H80002110, resp)) Then Return False
        AppInstance.strip(resp, 256)
        AppInstance.strip(resp, 6)
        AppInstance.strip(resp, 6)
        AppInstance.strip(resp, 13)
        AppInstance.strip(resp, 39)
        AppInstance.strip(resp, 256)
        UsrIde = Trim(AppInstance.strip(resp, 10))
        CrpIde = Trim(AppInstance.strip(resp, 10))
        'Ignore the list, call GetEnrInf again.
        Return True
    End Function

    Public Function GetMessage_EnrolRetail(ByVal MsgId As String, ByRef AccNum As String, ByRef EnrInf As CoreSys_EnrInf, ByRef CrpIde As String, ByRef UsrIde As String) As Boolean
        '612120:Enrol Retail Client
        Dim resp As String = String.Empty
        If Not (GetMessage_Common("612120", "", MsgId, &H80002110, resp)) Then Return False
        AppInstance.strip(resp, 256)
        AppInstance.strip(resp, 6)
        AppInstance.strip(resp, 6)
        AccNum = AppInstance.strip(resp, 13)
        AppInstance.strip(resp, 39)
        AppInstance.strip(resp, 256)
        UsrIde = Trim(AppInstance.strip(resp, 10))
        CrpIde = Trim(AppInstance.strip(resp, 10))
        'Ignore the list, call GetEnrInf again.
        Return True
    End Function

    Public Function GetMessage_SetChequeBookRule(ByVal MsgId As String) As Boolean
        '612040:SetChequeBookRule
        Dim resp As String = String.Empty
        If Not (GetMessage_Common("612040", "", MsgId, &H80002011, resp)) Then Return False
        AppInstance.strip(resp, 256)
        AppInstance.strip(resp, 13)
        AppInstance.strip(resp, 1)
        Return True
    End Function

    Public Function GetMessage_ChangeCusIstWaiver(ByVal MsgId As String, ByRef WveIst As String) As Boolean
        '612210:ChangeCustomerIstWaive
        Dim resp As String = String.Empty
        If Not (GetMessage_Common("612210", "", MsgId, &H80002109, resp)) Then Return False
        AppInstance.strip(resp, 256)
        AppInstance.strip(resp, 12)
        WveIst = AppInstance.strip(resp, 1)
        AppInstance.strip(resp, 7)
        Return True
    End Function

    Public Function GetMessage_GetCusClk2Trd(ByVal MsgId As String, ByRef Clk2TrdFlg As String, ByRef Clk2TrdStp As String) As Boolean
        Dim resp As String = String.Empty
        If Not (GetMessage_Common("612220", "", MsgId, &H80002109, resp)) Then Return False
        AppInstance.strip(resp, 256)
        AppInstance.strip(resp, 64)
        Clk2TrdFlg = AppInstance.strip(resp, 1)
        Clk2TrdStp = AppInstance.strip(resp, 14)
        AppInstance.strip(resp, 49)
        Return True
    End Function

    Public Function GetMessage_ChangeCusWaiver(ByVal MsgId As String, ByRef WveOn2 As String, ByRef SmsWveMbk As String, ByRef SmsWveAlt As String, ByRef EmlWveAlt As String) As Boolean
        '612260:ChangeCustomerWaive
        Dim resp As String = String.Empty
        If Not (GetMessage_Common("612260", "", MsgId, &H80002109, resp)) Then Return False
        AppInstance.strip(resp, 256)
        AppInstance.strip(resp, 14)
        AppInstance.strip(resp, 2)
        WveOn2 = AppInstance.strip(resp, 1)
        SmsWveMbk = AppInstance.strip(resp, 1)
        SmsWveAlt = AppInstance.strip(resp, 1)
        EmlWveAlt = AppInstance.strip(resp, 1)
        AppInstance.strip(resp, 2)
        Return True
    End Function

    Public Function GetMessage_ChangeCusCanTrade(ByVal MsgId As String, ByRef CusCanTrd As String) As Boolean
        '612240:ChangeCustomerCanTrade via IST
        Dim resp As String = String.Empty
        If Not (GetMessage_Common("612240", "", MsgId, &H80002109, resp)) Then Return False
        AppInstance.strip(resp, 256)
        AppInstance.strip(resp, 12)
        CusCanTrd = AppInstance.strip(resp, 1)
        AppInstance.strip(resp, 7)
        Return True
    End Function

    Public Function GetMessage_UpdateAccPrt(ByVal MsgId As String, ByRef NewRowVer As String) As Boolean
        '612250:ChangeCustomerCanTrade via IST
        Dim resp As String = String.Empty
        If Not (GetMessage_Common("612250", "", MsgId, &H80002116, resp)) Then Return False
        AppInstance.strip(resp, 256)
        AppInstance.strip(resp, 13) 'AccNum
        AppInstance.strip(resp, 12) 'TabRowVer
        AppInstance.strip(resp, 48) 'ChnSrvSet
        AppInstance.strip(resp, 44) 'Rsv24
        NewRowVer = AppInstance.strip(resp, 12)
        Return True
    End Function

    Public Function GetMessage_GetChnPrf(ByVal MsgId As String, ByRef MsgChnPrf As MsgChnPrf_Struct) As Boolean
        '614210: Get the Channel Preferences for customer
        Dim resp As String = String.Empty
        Dim i As Integer
        If Not (GetMessage_Common("614210", "", MsgId, &H81000034, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)

            AppInstance.strip(resp, 6) 'CusNum
            AppInstance.strip(resp, 4) 'ChnNam
            AppInstance.strip(resp, 22) 'Rsv01

            MsgChnPrf.ReadTable(resp)

        Catch ex As Exception
            HandleError(&H81000035, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_SetChnPrf(ByVal MsgId As String, ByRef MsgChnPrf As MsgChnPrf_Struct) As Boolean
        '614220: Set the Channel Preferences for customer
        Dim resp As String = String.Empty
        Dim i As Integer
        If Not (GetMessage_Common("614220", "", MsgId, &H81000036, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)

            AppInstance.strip(resp, 6) 'CusNum
            AppInstance.strip(resp, 26) 'Rsv01

            MsgChnPrf.ReadTable(resp)

        Catch ex As Exception
            HandleError(&H81000037, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_GetAltPreDef(ByVal MsgId As String, ByRef mADO As AdoAccess) As Boolean
        Dim resp As String = String.Empty
        Dim verStr As String
        Dim i, count As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow

        If Not (GetMessage_Common("701010", "", MsgId, &H80002112, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            count = CType(AppInstance.strip(resp, 4), Integer)
            If count <= 0 Then
                '''HandleError(&H80002113, SIBL0100.Util.Debug.getStackFrame(New StackTrace(True).GetFrame(0)) & ": No data received", "ICE Communications")
                '''Return False
                Erase AltPreTable
                mADO.DeleteTable("AltPreDef")
                Return True
            End If
            ReDim AltPreTable(count - 1)
            mADO.DeleteTable("AltPreDef")
            For i = 0 To AltPreTable.Length - 1
                verStr = AppInstance.strip(resp, 516)
                With AltPreTable(i)
                    .PreDefcde = Trim(AppInstance.strip(verStr, 4))
                    .PreDefEng = Trim(AppInstance.strip(verStr, 256))
                    .PreDefAra = Trim(AppInstance.strip(verStr, 256))
                    'SA fix of "" issue while inserting row to SQL table
                    mADO.AddRowToTable("AltPreDef", New String() {.PreDefcde, .PreDefEng, .PreDefAra})

                    'mADO.AddRowToTable("AltPreDef", "Values (""" & .PreDefcde & " "",""" & _
                    '                                                .PreDefEng & " "",""" & _
                    '                                                .PreDefAra & " "")")
                End With
            Next
        Catch ex As Exception
            HandleError(&H80002114, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_RegisterSMS(ByVal MsgId As String, ByRef EnrInf As CoreSys_EnrInf) As Boolean
        '710900:RegisterSMS
        Dim resp As String = String.Empty
        If Not (GetMessage_Common("710900", "", MsgId, &H80002012, resp)) Then Return False
        AppInstance.strip(resp, 256)
        AppInstance.strip(resp, 6)
        EnrInf.TabRowVer = AppInstance.strip(resp, 12)
        'AppInstance.strip(resp, 1 + 1 + 25)
        'EnrInf.AutLstSer = AppInstance.strip(resp, 4)
        'Ignore the list, call GetEnrInf again.
        Return True
    End Function

    Public Function GetMessage_DeRegisterSMS(ByVal MsgId As String, ByRef EnrInf As CoreSys_EnrInf) As Boolean
        '710910:RegisterSMS
        Dim resp As String = String.Empty
        If Not (GetMessage_Common("710910", "", MsgId, &H80002013, resp)) Then Return False
        AppInstance.strip(resp, 256)
        AppInstance.strip(resp, 6)
        EnrInf.TabRowVer = AppInstance.strip(resp, 12)
        'AppInstance.strip(resp, 1 + 1 + 25)
        'EnrInf.AutLstSer = AppInstance.strip(resp, 4)
        'Ignore the list, call GetEnrInf again.
        Return True
    End Function

    ' IH statement suppression reason codes
    Public Function GetMessage_ChangeStatementPrintingState(ByVal MsgId As String, ByRef SupFlg As String) As Boolean
        '773080:Change Customer Account Statement Printing State
        Dim resp As String = String.Empty
        If Not (GetMessage_Common("773080", "", MsgId, &H80002013, resp)) Then Return False
        AppInstance.strip(resp, 256)
        AppInstance.strip(resp, 13) 'Echo AccNum
        AppInstance.strip(resp, 1)  'Echo SupFlg 
        AppInstance.strip(resp, 2) 'Echo SupRea
        AppInstance.strip(resp, 28) 'Echo Rsv
        SupFlg = AppInstance.strip(resp, 1)
        AppInstance.strip(resp, 30) 'Rsv30
        Return True
    End Function

    Public Function GetMessage_GetIceUsrAut(ByVal MsgId As String, ByRef IceAutRol As ICEI0100.IceAutRol_Struct) As Boolean
        '901000
        Dim resp As String = String.Empty
        Dim i As Integer
        Dim uID As String
        IceAutRol = Nothing
        ReDim IceAutRol.IceAutLst(512) '512 entries, 1-based
        If Not (GetMessage_Common("901000", "", MsgId, &H80002014, resp)) Then Return False
        Try
            'UsrIde	10x
            'Usr400Sta	1x
            'Usr400Nam	25x
            'UsrEqnBrn	4x
            'Rsv1	8x
            'Rsv11	60x
            'Rsv2	68x
            'IceAutRol	768x

            AppInstance.strip(resp, 256)
            uID = AppInstance.strip(resp, 10)
            AppInstance.strip(resp, 1) 'Usr400Sta	1x
            AppInstance.strip(resp, 25) 'Usr400Nam	25x

            With IceAutRol
                .IceEqnBrn = Trim(AppInstance.strip(resp, 4))
                '#If DEBUG Then
                '                If .IceEqnBrn = "" Then .IceEqnBrn = "0101"
                '#End If
                AppInstance.strip(resp, 8) 'Rsv1
                AppInstance.strip(resp, 60) 'Rsv11
                AppInstance.strip(resp, 68) 'Rsv2

                .ReadTable(resp)
                '''.TabRowVer = Trim(AppInstance.strip(resp, 12))
                '''.IceEqnRol = Trim(AppInstance.strip(resp, 10))
                '''.IceChgUsr = Trim(AppInstance.strip(resp, 10))
                '''.IceChgStp = Trim(AppInstance.strip(resp, 14))

                '''.Rsv1 = Trim(AppInstance.strip(resp, 30))
                '''.IceAutLst(0) = False
                '''For i = 1 To 512
                '''    .IceAutLst(i) = (AppInstance.strip(resp, 1) = "Y")
                '''Next
                '''.Rsv2 = Trim(AppInstance.strip(resp, 145))
                '''.IceEqnTit = Trim(AppInstance.strip(resp, 35))
            End With
        Catch ex As Exception
            HandleError(&H80002015, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    '    Public Function GetMessage_GetIceUsrAut(ByVal MsgId As String, ByRef IceAutRol As IceAutRol_Struct) As Boolean
    '        Dim resp As String = String.Empty
    '        Dim i As Integer
    '        Dim uID As String
    '        IceAutRol = Nothing
    '        ReDim IceAutRol.IceAutLst(512) '512 entries, 1-based
    '        resp = AppInstance.MQGetMessage(MsgId)
    '        If AppInstance.MQS.ErrNum <> 0 Then
    '            AppInstance.FormatMQSError("GetMessage_GetIceUsrAut", AppInstance.MQS.ErrNum, AppInstance.MQS.ErrDsc)
    '            Return False
    '        ElseIf resp.Length = 10 Then
    '            Dim ActCde As String
    '            Dim ResCde As String
    '            ResCde = AppInstance.strip(resp, 3)
    '            ActCde = resp
    '            HandleError(&H80002014, "Message 901000:Rejected, Result Code:" & ResCde & ", Action Code:" & ActCde)
    '            AppInstance.ShowHostError("901000", MsgId, ResCde, ActCde)
    '            Return False
    '        End If
    '        Try
    '            AppInstance.strip(resp, 256)
    '            uID = AppInstance.strip(resp, 10)
    '            AppInstance.strip(resp, 38) 'Rsv1
    '            AppInstance.strip(resp, 60) 'Rsv11
    '            AppInstance.strip(resp, 68) 'Rsv2
    '            With IceAutRol
    '                .TabRowVer = Trim(AppInstance.strip(resp, 12))
    '                .IceEqnRol = Trim(AppInstance.strip(resp, 10))
    '                .IceChgUsr = Trim(AppInstance.strip(resp, 10))
    '                .IceChgStp = Trim(AppInstance.strip(resp, 14))
    '                .IceEqnBrn = Trim(AppInstance.strip(resp, 4))
    '#If DEBUG Then
    '                If .IceEqnBrn = "" Then .IceEqnBrn = "0101"
    '#End If

    '                .Rsv1 = Trim(AppInstance.strip(resp, 26))
    '                .IceAutLst(0) = False
    '                For i = 1 To 512
    '                    .IceAutLst(i) = (AppInstance.strip(resp, 1) = "Y")
    '                Next
    '                .Rsv2 = Trim(AppInstance.strip(resp, 145))
    '                .IceEqnTit = Trim(AppInstance.strip(resp, 35))
    '            End With
    '        Catch ex As Exception
    '            HandleError(&H80002015, "Error:", "Error", ex)
    '            Return False
    '        End Try
    '        Return True
    '    End Function
    Public Function GetMessage_GetCstVerDta(ByVal MsgId As String) As Boolean
        Dim resp As String = String.Empty
        Dim verStr As String
        Dim i, count As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow

        If Not (GetMessage_Common("901010", "", MsgId, &H80002016, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            count = CType(AppInstance.strip(resp, 2), Integer)
            If count <= 0 Then
                HandleError(&H80002017, SIBL0100.Util.Debug.getStackFrame(New StackTrace(True).GetFrame(0)) & ": No version info received", "Version Check")
                Return False
            End If
            ReDim CstVerTable(count - 1)
            For i = 0 To count - 1
                verStr = AppInstance.strip(resp, 48)
                With CstVerTable(i)
                    .CstTabVer = AppInstance.strip(verStr, 12)  'No trimming, as version could be spaces
                    .CstTabWho = Trim(AppInstance.strip(verStr, 10))
                    .CstTabStp = Trim(AppInstance.strip(verStr, 14))
                    .CstTabNum = Trim(AppInstance.strip(verStr, 2))
                    .CstTabNam = Trim(AppInstance.strip(verStr, 10))
                    'ADO.AddRowToTable("CstVerTab", "Values ('" & .CstTabVer & "','" & _
                    '                   .CstTabWho & "','" & .CstTabStp & "','" & _
                    '                   .CstTabNum & "','" & .CstTabNam & "')")
                End With
            Next
        Catch ex As Exception
            HandleError(&H80002018, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function ReadSystemParameters(ByVal StrDat As String) As Boolean
        IceCfgData.ReadTable(StrDat)
        m_hitLimitHigh = CType(IceCfgData.AntLimHi, Integer) 'CType(AppInstance.strip(resp, 3), Integer)
        m_hitLimitLow = CType(IceCfgData.AntLimLo, Integer) 'CType(AppInstance.strip(resp, 3), Integer)
        m_MailerType = IceCfgData.ChnMlrTyp.Trim
        Return True
    End Function

    Public Function GetMessage_GetIcsCfgDta(ByVal MsgId As String, ByRef p_CstVerTab As String) As Boolean
        Dim resp As String = String.Empty
        Dim verStr As String
        Dim i, count As Integer
        Dim CfgDat As String
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow

        If Not (GetMessage_Common("990000", "", MsgId, &H80002016, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 64)
            CfgDat = AppInstance.strip(resp, 1021)
            ReadSystemParameters(CfgDat)

            'AppInstance.strip(resp, 1015)
            count = CType(AppInstance.strip(resp, 3), Integer)
            If count <= 0 Then
                HandleError(&H80002017, SIBL0100.Util.Debug.getStackFrame(New StackTrace(True).GetFrame(0)) & ": No version info received", "Version Check")
                Return False
            End If
            ReDim CstVerTable(count - 1)
            For i = 0 To count - 1
                verStr = AppInstance.strip(resp, 48)
                With CstVerTable(i)
                    .CstTabVer = AppInstance.strip(verStr, 12)  'No trimming, as version could be spaces
                    .CstTabWho = Trim(AppInstance.strip(verStr, 10))
                    .CstTabStp = Trim(AppInstance.strip(verStr, 14))
                    .CstTabNum = Trim(AppInstance.strip(verStr, 2))
                    .CstTabNam = Trim(AppInstance.strip(verStr, 10))
                    'ADO.AddRowToTable("CstVerTab", "Values ('" & .CstTabVer & "','" & _
                    '                   .CstTabWho & "','" & .CstTabStp & "','" & _
                    '                   .CstTabNum & "','" & .CstTabNam & "')")

                    'Store the version of the CstVerTab
                    If .CstTabNam.Trim = "CstVerTab" Then
                        p_CstVerTab = .CstTabVer
                    End If
                End With
            Next
        Catch ex As Exception
            HandleError(&H80002018, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_GetEnrInf(ByVal MsgId As String, ByRef EnrInfTable() As CoreSys_EnrInf) As Boolean
        Dim resp As String = String.Empty
        Dim tmpStr As String
        Dim CusNum As String
        Dim i, j, count As Integer

        If Not (GetMessage_Common("901020", "", MsgId, &H80002019, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            CusNum = AppInstance.strip(resp, 6)
            count = CType(AppInstance.strip(resp, 3), Integer)
            If count <= 0 Then
                Erase EnrInfTable
                Return True
            End If
            ReDim EnrInfTable(count - 1)
            For i = 0 To count - 1
                tmpStr = AppInstance.strip(resp, 1536)
                EnrInfTable(i).Initialize()
                With EnrInfTable(i)
                    .TabRowVer = Trim(AppInstance.strip(tmpStr, 12))
                    '/CusKey 9
                    .CusNum = Trim(AppInstance.strip(tmpStr, 6))
                    .UsrSeq = Trim(AppInstance.strip(tmpStr, 3))
                    .CorKey = Trim(AppInstance.strip(tmpStr, 10))
                    .LocIde = Trim(AppInstance.strip(tmpStr, 10))
                    .DepIde = Trim(AppInstance.strip(tmpStr, 10))
                    .UsrKey = Trim(AppInstance.strip(tmpStr, 10))
                    .IBKEnrNam = Trim(AppInstance.strip(tmpStr, 35))
                    .CusTyp = Trim(AppInstance.strip(tmpStr, 2))
                    .CusSeg = Trim(AppInstance.strip(tmpStr, 1))
                    .SndStp = Trim(AppInstance.strip(tmpStr, 14))
                    .SndUsrIde = Trim(AppInstance.strip(tmpStr, 10))
                    .SndMsgSeq = Trim(AppInstance.strip(tmpStr, 12))
                    .RcvStp = Trim(AppInstance.strip(tmpStr, 14))
                    .RcvUsrIde = Trim(AppInstance.strip(tmpStr, 10))
                    .RcvMsgSeq = Trim(AppInstance.strip(tmpStr, 12))
                    '/RcvRspCde 5
                    .RcvResVal = Trim(AppInstance.strip(tmpStr, 3))
                    .RcvActCde = Trim(AppInstance.strip(tmpStr, 2))
                    '.RcvRsv1 = Trim(AppInstance.strip(tmpStr, 5))
                    .CrdCls = Trim(AppInstance.strip(tmpStr, 2))
                    .CrdArc = Trim(AppInstance.strip(tmpStr, 1))
                    .LimPrfCde = Trim(AppInstance.strip(tmpStr, 2))
                    .AppStp = Trim(AppInstance.strip(tmpStr, 14))
                    .AppUsrIde = Trim(AppInstance.strip(tmpStr, 10))
                    .AppRef = Trim(AppInstance.strip(tmpStr, 12))
                    .AppSrc = Trim(AppInstance.strip(tmpStr, 4))
                    .SndToAdd = Trim(AppInstance.strip(tmpStr, 4))
                    .AppSmtp = Trim(AppInstance.strip(tmpStr, 50))
                    .AppTelMob = Trim(AppInstance.strip(tmpStr, 25))
                    .UseScp = Trim(AppInstance.strip(tmpStr, 1))
                    .UsePatEnq = Trim(AppInstance.strip(tmpStr, 1))
                    .UsePatReq = Trim(AppInstance.strip(tmpStr, 1))
                    .UsePatExe = Trim(AppInstance.strip(tmpStr, 1))
                    .UsePatSar = Trim(AppInstance.strip(tmpStr, 1))
                    .UsePatSwf = Trim(AppInstance.strip(tmpStr, 1))
                    .UseSta = Trim(AppInstance.strip(tmpStr, 1))
                    .UseVelDay = Trim(AppInstance.strip(tmpStr, 8))
                    .UseVelMth = Trim(AppInstance.strip(tmpStr, 8))
                    .UseCntDay = Trim(AppInstance.strip(tmpStr, 4))
                    .UseCntMth = Trim(AppInstance.strip(tmpStr, 4))
                    .UseMaxTrn = Trim(AppInstance.strip(tmpStr, 8))
                    .UseLimExp = Trim(AppInstance.strip(tmpStr, 8))
                    .UsePrfNam = Trim(AppInstance.strip(tmpStr, 8))
                    .UseStp = Trim(AppInstance.strip(tmpStr, 14))
                    .UseUsrIde = Trim(AppInstance.strip(tmpStr, 10))
                    .CrdNum = Trim(AppInstance.strip(tmpStr, 16))
                    .AccNum = Trim(AppInstance.strip(tmpStr, 13))
                    .EnrReq = Trim(AppInstance.strip(tmpStr, 3))
                    .EnrStp = Trim(AppInstance.strip(tmpStr, 14))
                    .EnrAtm = Trim(AppInstance.strip(tmpStr, 4))
                    .EnrCnt = Trim(AppInstance.strip(tmpStr, 4))
                    .IBKUseIde = Trim(AppInstance.strip(tmpStr, 10))
                    .IBKPwdPac = Trim(AppInstance.strip(tmpStr, 8))
                    .IBKTrxPac = Trim(AppInstance.strip(tmpStr, 8))
                    .IBKLngCde = Trim(AppInstance.strip(tmpStr, 1))
                    .UseSwfOur = Trim(AppInstance.strip(tmpStr, 1))
                    .IBKEngNam = Trim(AppInstance.strip(tmpStr, 35))
                    .IBKArbNam = Trim(AppInstance.strip(tmpStr, 35))
                    '/ClpDat 76
                    .ClpDat.ClpAct = Trim(AppInstance.strip(tmpStr, 1))
                    For j = 0 To 2
                        .ClpDat.ClpNum(j) = Trim(AppInstance.strip(tmpStr, 25))
                    Next j
                    '/AutDat 29
                    .AutAct = Trim(AppInstance.strip(tmpStr, 1))
                    .AutLstSer = Trim(AppInstance.strip(tmpStr, 4))
                    .AutSrcCre = Trim(AppInstance.strip(tmpStr, 4))
                    .AutDstCre = Trim(AppInstance.strip(tmpStr, 4))
                    .AutStpCre = Trim(AppInstance.strip(tmpStr, 16))
                    For j = 0 To 14 '315x
                        .AutLst(j).AutCdeVal = Trim(AppInstance.strip(tmpStr, 4))
                        .AutLst(j).AutCdeSta = Trim(AppInstance.strip(tmpStr, 1))
                        .AutLst(j).AutCdeStp = Trim(AppInstance.strip(tmpStr, 16))
                    Next j
                    '/SMSEnrDat 46
                    .SMSEnr = Trim(AppInstance.strip(tmpStr, 1))
                    .SMSEnrStp = Trim(AppInstance.strip(tmpStr, 14))
                    .SMSEnrSta = Trim(AppInstance.strip(tmpStr, 1))
                    .SMSEnrCnt = Trim(AppInstance.strip(tmpStr, 4))
                    .SMSTelMob = Trim(AppInstance.strip(tmpStr, 25))
                    .SMSLngCde = Trim(AppInstance.strip(tmpStr, 1))
                    .RsvDat2 = Trim(AppInstance.strip(tmpStr, 15))
                    '/SecDevDat 32
                    .SecDevFlg = Trim(AppInstance.strip(tmpStr, 1))
                    .SecDevAct = Trim(AppInstance.strip(tmpStr, 1))
                    .SecDevIde = Trim(AppInstance.strip(tmpStr, 8))
                    .SecDevVnd = Trim(AppInstance.strip(tmpStr, 3))
                    .RsvDat21 = Trim(AppInstance.strip(tmpStr, 19))
                    .EnrSgnCnt = Trim(AppInstance.strip(tmpStr, 6))
                    .SndTryCnt = Trim(AppInstance.strip(tmpStr, 2))
                    .SndTryStp = Trim(AppInstance.strip(tmpStr, 14))
                    .SndTryPro = Trim(AppInstance.strip(tmpStr, 6))
                    .SndPrfNam = Trim(AppInstance.strip(tmpStr, 8))
                    .LocEmp2Emp = Trim(AppInstance.strip(tmpStr, 1))
                    .LocExt2Emp = Trim(AppInstance.strip(tmpStr, 1))
                    '/NomDat	100
                    .NomNatCde = Trim(AppInstance.strip(tmpStr, 2))
                    .NomDocTyp = Trim(AppInstance.strip(tmpStr, 2))
                    .NomDocNum = Trim(AppInstance.strip(tmpStr, 12))
                    .NomKeySet = Trim(AppInstance.strip(tmpStr, 8))
                    .NomEncPwd = Trim(AppInstance.strip(tmpStr, 8))
                    .NomBusDte = Trim(AppInstance.strip(tmpStr, 8))
                    .NomPwdStp = Trim(AppInstance.strip(tmpStr, 14))
                    .NomPwdSnd = Trim(AppInstance.strip(tmpStr, 14))
                    .NomUseSnd = Trim(AppInstance.strip(tmpStr, 10))
                    .NomBusTim = Trim(AppInstance.strip(tmpStr, 6))
                    .NomPwdCnt = Trim(AppInstance.strip(tmpStr, 4))
                    .NomPwdTak = Trim(AppInstance.strip(tmpStr, 4))
                    .NomPwdCon = Trim(AppInstance.strip(tmpStr, 4))
                    .RsvDat22 = Trim(AppInstance.strip(tmpStr, 4))
                    '/RsvDat 354
                    .CcfTacAcc = Trim(AppInstance.strip(tmpStr, 1))
                    .CcfHowEnr = Trim(AppInstance.strip(tmpStr, 1))
                    .Ccf1stEnr = Trim(AppInstance.strip(tmpStr, 1))
                    .CcfTrxPwd = Trim(AppInstance.strip(tmpStr, 1))
                    .RsvCcf1 = Trim(AppInstance.strip(tmpStr, 8))
                    .RsvDat3 = Trim(AppInstance.strip(tmpStr, 342))


                End With
            Next
        Catch ex As Exception
            HandleError(&H80002020, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_GetCstEnrPrm(ByVal MsgId As String, ByRef mADO As AdoAccess) As Boolean
        Dim resp As String = String.Empty
        Dim verStr As String
        Dim i, count As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow
        Dim rowVer As String

        If Not (GetMessage_Common("901030", "", MsgId, &H80002021, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            rowVer = AppInstance.strip(resp, 12)
            count = CType(AppInstance.strip(resp, 2), Integer)
            If count <= 0 Then
                HandleError(&H80002022, "", "ICE Communications")
                Return False
            End If
            ReDim EnrPrmTable(count - 1)
            mADO.DeleteTable("ChnEnrPrm")
            For i = 0 To EnrPrmTable.Length - 1
                verStr = AppInstance.strip(resp, 80)
                With EnrPrmTable(i)
                    .ChnNam = Trim(AppInstance.strip(verStr, 4))
                    .EnrPrfNam = Trim(AppInstance.strip(verStr, 10))
                    .UsePatEnq = Trim(AppInstance.strip(verStr, 1))
                    .UsePatReq = Trim(AppInstance.strip(verStr, 1))
                    .UsePatExe = Trim(AppInstance.strip(verStr, 1))
                    .UsePatSar = Trim(AppInstance.strip(verStr, 1))
                    .UsePatSwf = Trim(AppInstance.strip(verStr, 1))
                    .UseLimChn = Trim(AppInstance.strip(verStr, 4))
                    .UseLimPrf = Trim(AppInstance.strip(verStr, 10))
                    .Rsv1 = Trim(AppInstance.strip(verStr, 47))

                    mADO.AddRowToTable("ChnEnrPrm", "Values (""" & .ChnNam & " "",""" & _
                                       .EnrPrfNam & " "",""" & .UsePatEnq & " "",""" & _
                                       .UsePatReq & " "",""" & .UsePatExe & " "",""" & _
                                       .UsePatSar & " "",""" & .UsePatSwf & " "",""" & _
                                       .UseLimChn & " "",""" & .UseLimPrf & " "",""" & _
                                       .Rsv1 & " "")")
                End With
            Next
        Catch ex As Exception
            HandleError(&H80002023, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_GetCstLmtPrm(ByVal MsgId As String, ByRef mADO As AdoAccess) As Boolean
        Dim resp As String = String.Empty
        Dim verStr As String
        Dim i, count As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow
        Dim rowVer As String

        If Not (GetMessage_Common("901040", "", MsgId, &H80002024, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            rowVer = AppInstance.strip(resp, 12)
            count = CType(AppInstance.strip(resp, 2), Integer)
            If count <= 0 Then
                '''HandleError(&H80002025, SIBL0100.Util.Debug.getStackFrame(New StackTrace(True).GetFrame(0)) & ": No Data received", "ICE Communications")
                '''Return False
                Erase LimPrmTable
                mADO.DeleteTable("ChnLimPrm")
                Return True
            End If
            ReDim LimPrmTable(count - 1)
            mADO.DeleteTable("ChnLimPrm")
            For i = 0 To LimPrmTable.Length - 1
                verStr = AppInstance.strip(resp, 80)
                With LimPrmTable(i)
                    .ChnNam = Trim(AppInstance.strip(verStr, 4))
                    .EnrPrfNam = Trim(AppInstance.strip(verStr, 10))
                    .UseVelDay = Trim(AppInstance.strip(verStr, 8))
                    .UseVelMth = Trim(AppInstance.strip(verStr, 8))
                    .UseCntDay = Trim(AppInstance.strip(verStr, 4))
                    .UseCntMth = Trim(AppInstance.strip(verStr, 4))
                    .UseMaxTrn = Trim(AppInstance.strip(verStr, 8))
                    .UseExpPer = Trim(AppInstance.strip(verStr, 3))
                    .Rsv1 = Trim(AppInstance.strip(verStr, 31))

                    mADO.AddRowToTable("ChnLimPrm", "Values (""" & .ChnNam & " "",""" & _
                                       .EnrPrfNam & " "",""" & .UseVelDay & " "",""" & _
                                       .UseVelMth & " "",""" & .UseCntDay & " "",""" & _
                                       .UseCntMth & " "",""" & .UseMaxTrn & " "",""" & _
                                       .UseExpPer & " "",""" & .Rsv1 & " "")")
                End With
            Next
        Catch ex As Exception
            HandleError(&H80002026, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_GetIceRol(ByVal MsgId As String, ByRef IceRol() As ICEI0100.IceAutRol_Struct) As Boolean
        Dim tmpStr As String
        Dim resp As String = String.Empty
        Dim verStr As String
        Dim i, j, count As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow

        If Not (GetMessage_Common("901050", "", MsgId, &H80002027, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            count = CType(AppInstance.strip(resp, 2), Integer)
            If count <= 0 Then
                Erase IceRol
                Return True
            End If
            ReDim IceRol(count - 1)
            For i = 0 To IceRol.Length - 1
                tmpStr = AppInstance.strip(resp, 768)
                With IceRol(i)
                    .TabRowVer = Trim(AppInstance.strip(tmpStr, 12))
                    .IceEqnRol = Trim(AppInstance.strip(tmpStr, 10))
                    .IceChgUsr = Trim(AppInstance.strip(tmpStr, 10))
                    .IceChgStp = Trim(AppInstance.strip(tmpStr, 14))
                    .Rsv1 = Trim(AppInstance.strip(tmpStr, 30))
                    ReDim .IceAutLst(512)
                    For j = 1 To 512
                        .IceAutLst(j) = (AppInstance.strip(tmpStr, 1) = "Y")
                    Next
                    .Rsv2 = Trim(AppInstance.strip(tmpStr, 145))
                    .IceEqnTit = Trim(AppInstance.strip(tmpStr, 35))
                End With
            Next
        Catch ex As Exception
            HandleError(&H80002028, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_GetIceAutDsc(ByVal MsgId As String, ByRef mADO As AdoAccess) As Boolean
        Dim resp As String = String.Empty
        Dim verStr As String
        Dim i, count As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow

        If Not (GetMessage_Common("901060", "", MsgId, &H80002029, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            count = CType(AppInstance.strip(resp, 3), Integer)
            If count <= 0 Then
                '''HandleError(&H80002030, SIBL0100.Util.Debug.getStackFrame(New StackTrace(True).GetFrame(0)) & ": No data received", "ICE Communications")
                '''Return False
                Erase IceAutTable
                mADO.DeleteTable("IceAutDsc")
                Return True
            End If
            ReDim IceAutTable(count - 1)
            mADO.DeleteTable("IceAutDsc")
            For i = 0 To IceAutTable.Length - 1
                verStr = AppInstance.strip(resp, 63)
                With IceAutTable(i)
                    .IceAutSer = Trim(AppInstance.strip(verStr, 3))
                    .IceAutCde = Trim(AppInstance.strip(verStr, 10))
                    .IceAutNam = Trim(AppInstance.strip(verStr, 50))

                    mADO.AddRowToTable("IceAutDsc", "Values (""" & .IceAutSer & " "",""" & _
                                       .IceAutCde & " "",""" & .IceAutNam & " "")")
                End With
            Next
        Catch ex As Exception
            HandleError(&H80002031, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_GetBrnTab(ByVal MsgId As String, ByRef mADO As AdoAccess) As Boolean
        Dim resp As String = String.Empty
        Dim verStr As String
        Dim i, count As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow

        If Not (GetMessage_Common("910010", "", MsgId, &H80002032, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            count = CType(AppInstance.strip(resp, 4), Integer)
            If count <= 0 Then
                '''HandleError(&H80002033, SIBL0100.Util.Debug.getStackFrame(New StackTrace(True).GetFrame(0)) & ": No data received", "ICE Communications")
                '''Return False
                Erase BrnTabTable
                mADO.DeleteTable("EqnBrnTab")
                Return True
            End If
            ReDim BrnTabTable(count - 1)
            mADO.DeleteTable("EqnBrnTab")
            For i = 0 To BrnTabTable.Length - 1
                verStr = AppInstance.strip(resp, 355)
                With BrnTabTable(i)
                    .BrnNum = Trim(AppInstance.strip(verStr, 4))
                    .BrnNmeEng = Trim(AppInstance.strip(verStr, 35))
                    .BrnAddEng1 = Trim(AppInstance.strip(verStr, 35))
                    .BrnAddEng2 = Trim(AppInstance.strip(verStr, 35))
                    .BrnAddEng3 = Trim(AppInstance.strip(verStr, 35))
                    .BrnNmeAra = Trim(AppInstance.strip(verStr, 35))
                    .BrnAddAra1 = Trim(AppInstance.strip(verStr, 35))
                    .BrnAddAra2 = Trim(AppInstance.strip(verStr, 35))
                    .BrnAddAra3 = Trim(AppInstance.strip(verStr, 35))
                    .BrnSwfBic = Trim(AppInstance.strip(verStr, 11))
                    .BrnTelNum = Trim(AppInstance.strip(verStr, 20))
                    .BrnFaxNum = Trim(AppInstance.strip(verStr, 20))
                    .BrnTlxNum = Trim(AppInstance.strip(verStr, 20))

                    mADO.AddRowToTable("EqnBrnTab", "Values (""" & .BrnNum & " "",""" & _
                                       .BrnNmeEng & " "",""" & .BrnAddEng1 & " "",""" & _
                                       .BrnAddEng2 & " "",""" & .BrnAddEng3 & " "",""" & _
                                       .BrnNmeAra & " "",""" & .BrnAddAra1 & " "",""" & _
                                       .BrnAddAra2 & " "",""" & .BrnAddAra3 & " "",""" & _
                                       .BrnSwfBic & " "",""" & .BrnTelNum & " "",""" & _
                                       .BrnFaxNum & " "",""" & .BrnTlxNum & " "")")
                End With
            Next
        Catch ex As Exception
            HandleError(&H80002034, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_GetBrnCfg(ByVal MsgId As String, ByRef mADO As AdoAccess) As Boolean
        '901080
        Dim resp As String = String.Empty
        Dim tmpStr As String
        Dim i, count As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow

        If Not (GetMessage_Common("901080", "", MsgId, &H81000006, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 4) 'BrnTab
            AppInstance.strip(resp, 12) 'TabRowVer
            count = CType(AppInstance.strip(resp, 3), Integer)
            If count <= 0 Then
                Erase BrnCfgTable
                Return False
            End If
            ReDim BrnCfgTable(count - 1)
            mADO.DeleteTable("BrnCfgTab")
            For i = 0 To BrnCfgTable.Length - 1
                tmpStr = AppInstance.strip(resp, 100)
                With BrnCfgTable(i)
                    .BrnNum = AppInstance.strip(tmpStr, 4).Trim
                    .BrnSubNet = AppInstance.strip(tmpStr, 15).Trim
                    .IceBrnSrv = AppInstance.strip(tmpStr, 10).Trim
                    .Rsv1 = AppInstance.strip(tmpStr, 71).Trim
                    mADO.AddRowToTable("BrnCfgTab", "Values (""" & .BrnNum & " "",""" & _
                                       .BrnSubNet & " "",""" & .IceBrnSrv & " "",""" & _
                                       .Rsv1 & " "")")
                End With
            Next
        Catch ex As Exception
            HandleError(&H81000007, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_GetHgrCal(ByVal MsgId As String, ByRef mADO As AdoAccess) As Boolean
        '910100
        Dim resp As String = String.Empty
        Dim tmpStr As String
        Dim i, HgrCnt, GrgCnt As Integer
        Dim iYear, iMonth As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow
        Dim sqlArr() As String

        If Not (GetMessage_Common("910100", "", MsgId, &H81000012, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            'Fill the Basic table
            mADO.DeleteTable("CalBasTab")
            tmpStr = AppInstance.strip(resp, 44)
            With CalCnvTab.CalBasTab
                .TabRowVer = AppInstance.strip(tmpStr, 12)
                .CalGrgMin = AppInstance.strip(tmpStr, 8)
                .CalGrgMax = AppInstance.strip(tmpStr, 8)
                .CalHgrMin = AppInstance.strip(tmpStr, 8)
                .CalHgrMax = AppInstance.strip(tmpStr, 8)
                mADO.AddRowToTable("CalBasTab", "Values (""" & .TabRowVer & " "",""" & _
                                   .CalGrgMin & " "",""" & .CalGrgMax & " "",""" & _
                                   .CalHgrMin & " "",""" & .CalHgrMax & " "")")
            End With

            GrgCnt = CType(AppInstance.strip(resp, 4), Integer)
            HgrCnt = CType(AppInstance.strip(resp, 4), Integer)

            'Fill the Gregorian table
            If GrgCnt <= 0 Then
                Erase CalCnvTab.CalGrgTab
            Else
                ReDim CalCnvTab.CalGrgTab(GrgCnt - 1)
                'ReDim CalCnvTab.CalGrgIdx(GrgCnt - 1)
                ReDim sqlArr(GrgCnt - 1)
                mADO.DeleteTable("CalGrgTab")
                iYear = AppInstance.ExInt(AppInstance.SafeSubString(CalCnvTab.CalBasTab.CalGrgMin, 0, 4))
                iMonth = AppInstance.ExInt(AppInstance.SafeSubString(CalCnvTab.CalBasTab.CalGrgMin, 4, 2))
                For i = 0 To CalCnvTab.CalGrgTab.Length - 1
                    tmpStr = AppInstance.strip(resp, 16)
                    With CalCnvTab.CalGrgTab(i)
                        .GrgDte = AppInstance.ExInt(SIBL0100.Util.Pack.PackNString(CStr(iYear), 4) & SIBL0100.Util.Pack.PackNString(CStr(iMonth), 2) & "01")
                        'CalCnvTab.CalGrgIdx(i) = .GrgDte
                        .GrgOrd = AppInstance.ExInt(AppInstance.strip(tmpStr, 5))
                        .GrgDim = AppInstance.ExInt(AppInstance.strip(tmpStr, 2))
                        .HgrDte = AppInstance.ExInt(AppInstance.strip(tmpStr, 8))
                        .HgrCls = AppInstance.strip(tmpStr, 1)
                        sqlArr(i) = "Values (""" & .GrgDte & " "",""" & _
                                           .GrgOrd & " "",""" & .GrgDim & " "",""" & _
                                           .HgrDte & " "",""" & .HgrCls & " "")"
                        iMonth += 1
                        If iMonth > 12 Then
                            iMonth = 1
                            iYear += 1
                        End If
                    End With
                Next
                mADO.AddRowsToTable("CalGrgTab", sqlArr)
            End If

            'Fill the Hegira table
            If HgrCnt <= 0 Then
                Erase CalCnvTab.CalHgrTab
            Else
                ReDim CalCnvTab.CalHgrTab(HgrCnt - 1)
                'ReDim CalCnvTab.CalHgrIdx(HgrCnt - 1)
                ReDim sqlArr(HgrCnt - 1)
                mADO.DeleteTable("CalHgrTab")
                iYear = AppInstance.ExInt(AppInstance.SafeSubString(CalCnvTab.CalBasTab.CalHgrMin, 0, 4))
                iMonth = AppInstance.ExInt(AppInstance.SafeSubString(CalCnvTab.CalBasTab.CalHgrMin, 4, 2))
                For i = 0 To CalCnvTab.CalHgrTab.Length - 1
                    tmpStr = AppInstance.strip(resp, 16)
                    With CalCnvTab.CalHgrTab(i)
                        .HgrDte = AppInstance.ExInt(SIBL0100.Util.Pack.PackNString(CStr(iYear), 4) & SIBL0100.Util.Pack.PackNString(CStr(iMonth), 2) & "01")
                        'CalCnvTab.CalHgrIdx(i) = .HgrDte
                        .HgrOrd = AppInstance.ExInt(AppInstance.strip(tmpStr, 5))
                        .HgrDim = AppInstance.ExInt(AppInstance.strip(tmpStr, 2))
                        .GrgDte = AppInstance.ExInt(AppInstance.strip(tmpStr, 8))
                        .HgrCls = AppInstance.strip(tmpStr, 1)
                        sqlArr(i) = "Values (""" & .HgrDte & " "",""" & _
                                           .HgrOrd & " "",""" & .HgrDim & " "",""" & _
                                           .GrgDte & " "",""" & .HgrCls & " "")"
                        iMonth += 1
                        If iMonth > 12 Then
                            iMonth = 1
                            iYear += 1
                        End If
                    End With
                Next
                mADO.AddRowsToTable("CalHgrTab", sqlArr)
            End If

        Catch ex As Exception
            HandleError(&H81000248, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_GetCmaAutPrs(ByVal MsgId As String, ByRef mADO As AdoAccess) As Boolean
        '910170
        Dim resp As String = String.Empty
        Dim tmpStr As String
        Dim i, count As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow

        If Not (GetMessage_Common("910170", "", MsgId, &H81000012, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 16) 'Rsv1
            count = CType(AppInstance.strip(resp, 3), Integer)
            If count <= 0 Then
                Erase SerAutTable
                Return False
            End If
            ReDim SerAutTable(count - 1)
            mADO.DeleteTable("CmaAutPrs")
            For i = 0 To SerAutTable.Length - 1
                tmpStr = AppInstance.strip(resp, 100)
                With SerAutTable(i)
                    .TabRowVer = AppInstance.strip(tmpStr, 12)
                    .CapMnm = AppInstance.strip(tmpStr, 4)
                    .CapCusNum = AppInstance.strip(tmpStr, 6)
                    .CapNamEng = AppInstance.strip(tmpStr, 25)
                    .CapNamAra = AppInstance.strip(tmpStr, 25)
                    .Rsv2 = AppInstance.strip(tmpStr, 28)
                    mADO.AddRowToTable("CmaAutPrs", "Values (""" & .TabRowVer & " "",""" & _
                                       .CapMnm & " "",""" & .CapCusNum & " "",""" & _
                                       .CapNamEng & " "",""" & .CapNamAra & " "",""" & _
                                       .Rsv2 & " "")")
                End With
            Next
        Catch ex As Exception
            HandleError(&H81000013, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_GetCapPrdInf(ByVal MsgId As String, ByRef mADO As AdoAccess) As Boolean
        '910180
        Dim resp As String = String.Empty
        Dim tmpStr As String
        Dim i, count As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow

        If Not (GetMessage_Common("910180", "", MsgId, &H81000015, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 16) 'Rsv1
            count = CType(AppInstance.strip(resp, 3), Integer)
            If count <= 0 Then
                Erase SerPrdTable
                Return False
            End If
            ReDim SerPrdTable(count - 1)
            mADO.DeleteTable("CapPrdInf")
            For i = 0 To SerPrdTable.Length - 1
                tmpStr = AppInstance.strip(resp, 500)
                With SerPrdTable(i)
                    .TabRowVer = AppInstance.strip(tmpStr, 12)
                    .CapMnm = AppInstance.strip(tmpStr, 4)
                    .CapPrdMnm = AppInstance.strip(tmpStr, 4)
                    .CapPfxLen = AppInstance.strip(tmpStr, 1)
                    .CapPfxVal = AppInstance.strip(tmpStr, 8)

                    .TgtMinLen = AppInstance.strip(tmpStr, 2)
                    .TgtMaxLen = AppInstance.strip(tmpStr, 2)

                    .CapAccNum = AppInstance.strip(tmpStr, 13)
                    .CapAccCcy = AppInstance.strip(tmpStr, 3)
                    .CapPrdEng = AppInstance.strip(tmpStr, 25)
                    .CapPrdAra = AppInstance.strip(tmpStr, 25)
                    .ShoPfx = AppInstance.strip(tmpStr, 1)
                    .TgtFmt = AppInstance.strip(tmpStr, 1)
                    .TgtLabEng = AppInstance.strip(tmpStr, 25)
                    .TgtLabAra = AppInstance.strip(tmpStr, 25)
                    .TgtComEng = AppInstance.strip(tmpStr, 125)
                    .TgtComAra = AppInstance.strip(tmpStr, 125)
                    .Rsv2 = AppInstance.strip(tmpStr, 99)
                    mADO.AddRowToTable("CapPrdInf", "Values (""" & .TabRowVer & " "",""" & _
                                       .CapMnm & " "",""" & .CapPrdMnm & " "",""" & _
                                       .CapPfxLen & " "",""" & .CapPfxVal & " "",""" & _
                                       .TgtMinLen & " "",""" & .TgtMaxLen & " "",""" & _
                                       .CapAccNum & " "",""" & .CapAccCcy & " "",""" & _
                                       .CapPrdEng & " "",""" & .CapPrdAra & " "",""" & _
                                       .ShoPfx & " "",""" & .TgtFmt & " "",""" & _
                                       .TgtLabEng & " "",""" & .TgtLabAra & " "",""" & _
                                       .TgtComEng & " "",""" & .TgtComAra & " "",""" & _
                                       .Rsv2 & " "")")
                End With
            Next
        Catch ex As Exception
            HandleError(&H81000016, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_SetCusRank(ByVal MsgId As String, ByRef AutRnkDat As AutRnkDat_Struct, ByRef ManRnkDat As ManRnkDat_Struct) As Boolean
        '770070
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("770070", "", MsgId, &H81000015, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 128)
            AppInstance.strip(resp, 3)
            AutRnkDat.ReadTable(resp)
            ManRnkDat.ReadTable(resp)
            AppInstance.strip(resp, 103)

        Catch ex As Exception
            HandleError(&H81000016, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_GetAccTyp(ByVal MsgId As String, ByRef mADO As AdoAccess) As Boolean
        Dim resp As String = String.Empty
        Dim verStr As String
        Dim i, count As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow

        If Not (GetMessage_Common("910020", "", MsgId, &H80002035, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            count = CType(AppInstance.strip(resp, 4), Integer)
            If count <= 0 Then
                '''HandleError(&H80002036, SIBL0100.Util.Debug.getStackFrame(New StackTrace(True).GetFrame(0)) & ": No data received", "ICE Communications")
                '''Return False
                Erase AccTypTable
                mADO.DeleteTable("EqnAccTyp")
                Return True
            End If
            ReDim AccTypTable(count - 1)
            mADO.DeleteTable("EqnAccTyp")
            For i = 0 To AccTypTable.Length - 1
                verStr = AppInstance.strip(resp, 75)
                With AccTypTable(i)
                    .AccTypCde = Trim(AppInstance.strip(verStr, 2))
                    .AccDscEng = Trim(AppInstance.strip(verStr, 35)).Replace("""", """""")
                    .AccDscAra = Trim(AppInstance.strip(verStr, 35)).Replace("""", """""")
                    .AccAppCde = Trim(AppInstance.strip(verStr, 2))
                    .AccHasInt = Trim(AppInstance.strip(verStr, 1))
                    mADO.AddRowToTable("EqnAccTyp", "Values (""" & .AccTypCde & " "",""" & _
                                       .AccDscEng & " "",""" & .AccDscAra & " "",""" & _
                                       .AccAppCde & " "",""" & .AccHasInt & " "")")
                End With
            Next
        Catch ex As Exception
            HandleError(&H80002037, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_GetCusTyp(ByVal MsgId As String, ByRef mADO As AdoAccess) As Boolean
        Dim resp As String = String.Empty
        Dim verStr As String
        Dim i, count As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow

        If Not (GetMessage_Common("910030", "", MsgId, &H80002038, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            count = CType(AppInstance.strip(resp, 4), Integer)
            If count <= 0 Then
                '''HandleError(&H80002039, SIBL0100.Util.Debug.getStackFrame(New StackTrace(True).GetFrame(0)) & ": No data received", "ICE Communications")
                '''Return False
                Erase CusTypTable
                mADO.DeleteTable("EqnCusTyp")
                Return True
            End If
            ReDim CusTypTable(count - 1)
            mADO.DeleteTable("EqnCusTyp")
            For i = 0 To CusTypTable.Length - 1
                verStr = AppInstance.strip(resp, 72)
                With CusTypTable(i)
                    .CusTypCde = Trim(AppInstance.strip(verStr, 2))
                    .CusDscEng = Trim(AppInstance.strip(verStr, 35))
                    .CusDscAra = Trim(AppInstance.strip(verStr, 35))
                    mADO.AddRowToTable("EqnCusTyp", "Values (""" & .CusTypCde & " "",""" & _
                                       .CusDscEng & " "",""" & .CusDscAra & " "")")
                End With
            Next
        Catch ex As Exception
            HandleError(&H80002040, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function
    'Creator: Y093SAHU
    Public Function GetMessage_EnumerateCorpTrx(ByVal MsgId As String, ByRef mADO As AdoAccess) As Boolean
        Dim resp As String = String.Empty
        Dim verStr As String
        Dim i, count As Integer
        Const sTable As String = "CorTrxItm"

        If Not (GetMessage_Common("202350", "", MsgId, &H81000270, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            Dim VerItm As CoreSys_VerItm
            VerItm = LocateTabSlot("CorTrxTab")
            VerItm.CstTabVer = AppInstance.strip(resp, 12)
            VerItm.CstTabStp = AppInstance.strip(resp, 14)
            VerItm.CstTabWho = AppInstance.strip(resp, 10)
            ModifyTabSlot("CorTrxTab", VerItm)
            count = CType(AppInstance.strip(resp, 3), Integer)
            If count <= 0 Then
                '''HandleError(&H81000271, SIBL0100.Util.Debug.getStackFrame(New StackTrace(True).GetFrame(0)) & ": No data received", "ICE Communications")
                '''Return False
                Erase CorTrxItmTable
                mADO.DeleteTable(sTable)
                Return True
            End If
            ReDim CorTrxItmTable(count - 1)
            mADO.DeleteTable(sTable)
            For i = 0 To CorTrxItmTable.Length - 1
                verStr = AppInstance.strip(resp, 41)
                With CorTrxItmTable(i)
                    CorTrxItmTable(i).Clear()
                    CorTrxItmTable(i).ReadTable(verStr)

                    mADO.AddRowToTable(sTable, "Values (""" & .CorTrxIde & """,""" & _
                                       .CorTrxAut & " "",""" & .CorTrxDsc & """" & " )")
                End With
            Next
        Catch ex As Exception
            HandleError(&H81000272, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    'Creator: Y093SAHU
    Public Function GetMessage_EnumerateCorpMenuItems(ByVal MsgId As String, ByRef mADO As AdoAccess) As Boolean
        Dim resp As String = String.Empty
        Dim verStr As String
        Dim i, count As Integer
        Const sTable As String = "MnuItmDat"

        If Not (GetMessage_Common("202300", "", MsgId, &H81000273, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)

            Dim VerTabSlot As CoreSys_VerItm = LocateTabSlot("CorMnuItm")
            VerTabSlot.CstTabVer = AppInstance.strip(resp, 12)
            VerTabSlot.CstTabStp = AppInstance.strip(resp, 14)
            VerTabSlot.CstTabWho = AppInstance.strip(resp, 10)
            ModifyTabSlot("CorMnuItm", VerTabSlot)
            AppInstance.strip(resp, 25) 'Rsv390

            count = CType(AppInstance.strip(resp, 3), Integer)
            If count <= 0 Then
                '''HandleError(&H81000274, SIBL0100.Util.Debug.getStackFrame(New StackTrace(True).GetFrame(0)) & ": No data received", "ICE Communications")
                '''Return False
                Erase MnuItmDatTable
                mADO.DeleteTable(sTable)
                Return True
            End If
            ReDim MnuItmDatTable(count - 1)
            mADO.DeleteTable(sTable)
            For i = 0 To MnuItmDatTable.Length - 1
                verStr = AppInstance.strip(resp, 100)
                With MnuItmDatTable(i)
                    MnuItmDatTable(i).ReadTable(verStr)
                    AppInstance.strip(verStr, 15) 'Rsv400

                    'mADO.AddRowToTable(sTable, "Values (""" & .MnuItmIde & """,""" & _
                    '                   .MnuItmDsc & """,""" & .MnuItmAll & """,""" & .MnuItmCsa & """" & " )")
                    mADO.AddRowToTable(sTable, New String() {.MnuItmIde, .MnuItmDsc, .MnuItmAll, .MnuItmCsa, .MnuItmSee, .MnuItmEnt, .MnuItmAut})
                End With
            Next
        Catch ex As Exception
            HandleError(&H81000275, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    'Creator: Y093SAHU
    'Fixed by: U910KRZI
    Public Function GetMessage_EnumerateCorpLimSch(ByVal MsgId As String, ByRef mADO As AdoAccess, ByVal isClearTable As Boolean) As Boolean
        Dim resp As String = String.Empty
        Dim verStr As String
        Dim i, count As Integer
        Const sTable As String = "LimSchDat"

        If Not (GetMessage_Common("200100", "", MsgId, &H81000276, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 2)
            count = CType(AppInstance.strip(resp, 3), Integer)
            If count <= 0 Then
                '''HandleError(&H81000277, SIBL0100.Util.Debug.getStackFrame(New StackTrace(True).GetFrame(0)) & ": No data received", "ICE Communications")
                '''Return False
                If isClearTable Then
                    Erase LimSchDatTable
                    mADO.DeleteTable(sTable)
                End If
                Return True
            End If

            Dim Offset As Integer = 0
            If isClearTable Then
                ReDim LimSchDatTable(count - 1)
                mADO.DeleteTable(sTable)
            Else
                Offset = LimSchDatTable.Length
                ReDim Preserve LimSchDatTable(Offset + count - 1)
            End If


            For i = 0 To count - 1
                verStr = AppInstance.strip(resp, 87)
                With LimSchDatTable(Offset + i)
                    .ReadTable(verStr)
                    'mADO.AddRowToTable(sTable, "Values (""" & .LimSchIde & """,""" & _
                    '                   .LimSchAct & """,""" & .LimDlyCnt & """,""" & .LimDlyAmt & """,""" & .LimMthCnt & """,""" & .LimMthAmt & """,""" & .LimSngTrx & """ )")
                    mADO.AddRowToTable(sTable, "TabRowVer, ChgStp, ChgUid, LimSchIde, LimSchAct, LimDlyCnt, LimDlyAmt, LimMthCnt, LimMthAmt, LimSngTrx", _
                                "Values (""" & .TabRowVer & """,""" & .ChgStp & """,""" & .ChgUid & """,""" & .LimSchIde & """,""" & _
                                   .LimSchAct & """,""" & .LimDlyCnt & """,""" & .LimDlyAmt & """,""" & .LimMthCnt & """,""" & .LimMthAmt & """,""" & .LimSngTrx & """ )")
                End With
            Next
        Catch ex As Exception
            HandleError(&H81000278, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    'Creator: Y093SAHU
    Public Function GetMessage_EnumerateCorpRole(ByVal MsgId As String, ByRef mADO As AdoAccess) As Boolean
        Dim resp As String = String.Empty
        Dim verStr As String
        Dim i, count As Integer
        Const sTable As String = "RolDat"

        If Not (GetMessage_Common("200150", "", MsgId, &H81000279, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            count = CType(AppInstance.strip(resp, 3), Integer)
            If count <= 0 Then
                '''HandleError(&H81000280, SIBL0100.Util.Debug.getStackFrame(New StackTrace(True).GetFrame(0)) & ": No data received", "ICE Communications")
                '''Return False
                Erase RolDatTable
                mADO.DeleteTable(sTable)
                Return True
            End If
            ReDim RolDatTable(count - 1)
            mADO.DeleteTable(sTable)
            For i = 0 To RolDatTable.Length - 1
                AppInstance.strip(resp, 12 + 14 + 10)
                verStr = AppInstance.strip(resp, 38)
                With RolDatTable(i)
                    RolDatTable(i).ReadTable(verStr)

                    mADO.AddRowToTable(sTable, "Values (""" & .RolIde & """,""" & _
                                       .RolAct & """,""" & .HiaNum & """,""" & .RolNam & """ )")
                End With
            Next
        Catch ex As Exception
            HandleError(&H81000281, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    'Creator: Y093SAHU
    Public Function GetMessage_TabMnuPrf(ByVal MsgId As String, ByRef mADO As AdoAccess) As Boolean
        Dim resp As String = String.Empty
        Dim verStr As String
        Dim i, count As Integer
        Const sTable As String = "TabMnuPrf"

        If Not (GetMessage_Common("202320", "", MsgId, &H81000282, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            count = CType(AppInstance.strip(resp, 3), Integer)
            If count <= 0 Then
                '''HandleError(&H81000283, SIBL0100.Util.Debug.getStackFrame(New StackTrace(True).GetFrame(0)) & ": No data received", "ICE Communications")
                '''Return False
                Erase TabMnuPrfTable
                mADO.DeleteTable(sTable)
                Return True
            End If
            ReDim TabMnuPrfTable(count - 1)
            mADO.DeleteTable(sTable)
            For i = 0 To TabMnuPrfTable.Length - 1
                verStr = AppInstance.strip(resp, 69)
                With TabMnuPrfTable(i)
                    TabMnuPrfTable(i).ReadTable(verStr)

                    mADO.AddRowToTable(sTable, "Values (""" & .TabRowver & """,""" & _
                                       .ChgStp & """,""" & .ChgUid & """,""" & .MnuPrfIde & """,""" & .MnuPrfDsc & """ )")
                End With
            Next
        Catch ex As Exception
            HandleError(&H81000284, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_GetTrxCde(ByVal MsgId As String, ByRef mADO As AdoAccess) As Boolean
        Dim resp As String = String.Empty
        Dim verStr As String
        Dim i, count As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow

        If Not (GetMessage_Common("910040", "", MsgId, &H80002041, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            count = CType(AppInstance.strip(resp, 4), Integer)
            If count <= 0 Then
                '''HandleError(&H80002042, SIBL0100.Util.Debug.getStackFrame(New StackTrace(True).GetFrame(0)) & ": No data received", "ICE Communications")
                '''Return False
                Erase TrxCdeTable
                mADO.DeleteTable("EqnTrxCde")
                Return True
            End If
            ReDim TrxCdeTable(count - 1)
            mADO.DeleteTable("EqnTrxCde")
            For i = 0 To TrxCdeTable.Length - 1
                verStr = AppInstance.strip(resp, 76)
                With TrxCdeTable(i)
                    .TrxCde = Trim(AppInstance.strip(verStr, 3))
                    .TrxCls = Trim(AppInstance.strip(verStr, 3))
                    .TrxDscEng = Trim(AppInstance.strip(verStr, 35))
                    .TrxDscAra = Trim(AppInstance.strip(verStr, 35))
                    mADO.AddRowToTable("EqnTrxCde", "Values (""" & .TrxCde & " "",""" & _
                                       .TrxCls & " "",""" & .TrxDscEng & " "",""" & .TrxDscAra & " "")")
                End With
            Next
        Catch ex As Exception
            HandleError(&H80002043, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_GetCcyCde(ByVal MsgId As String, ByRef mADO As AdoAccess) As Boolean
        Dim resp As String = String.Empty
        Dim verStr As String
        Dim i, count As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow

        If Not (GetMessage_Common("910050", "", MsgId, &H80002044, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            count = CType(AppInstance.strip(resp, 4), Integer)
            If count <= 0 Then
                '''HandleError(&H80002045, SIBL0100.Util.Debug.getStackFrame(New StackTrace(True).GetFrame(0)) & ": No data received", "ICE Communications")
                '''Return False
                Erase CcyCdeTable
                mADO.DeleteTable("EqnCcyCde")
                Return True
            End If
            ReDim CcyCdeTable(count - 1)
            mADO.DeleteTable("EqnCcyCde")
            For i = 0 To CcyCdeTable.Length - 1
                verStr = AppInstance.strip(resp, 78)
                With CcyCdeTable(i)
                    .CcyCde = Trim(AppInstance.strip(verStr, 3))
                    .CcyNum = Trim(AppInstance.strip(verStr, 3))
                    .CcyDscEng = Trim(AppInstance.strip(verStr, 35))
                    .CcyDscAra = Trim(AppInstance.strip(verStr, 35))
                    .CcyExp = Trim(AppInstance.strip(verStr, 1))
                    .CcyTrdFlg = Trim(AppInstance.strip(verStr, 1))
                    mADO.AddRowToTable("EqnCcyCde", "Values (""" & .CcyCde & " "",""" & _
                                       .CcyNum & " "",""" & .CcyDscEng & " "",""" & _
                                       .CcyDscAra & " "",""" & .CcyExp & " "",""" & _
                                       .CcyTrdFlg & " "")")
                End With
            Next
        Catch ex As Exception
            HandleError(&H80002046, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_GetAccOff(ByVal MsgId As String, ByRef mADO As AdoAccess) As Boolean
        Dim resp As String = String.Empty
        Dim verStr As String
        Dim i, count As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow

        If Not (GetMessage_Common("910110", "", MsgId, &H80002047, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            count = CType(AppInstance.strip(resp, 4), Integer)
            If count <= 0 Then
                '''HandleError(&H80002048, SIBL0100.Util.Debug.getStackFrame(New StackTrace(True).GetFrame(0)) & ": No data received", "ICE Communications")
                '''Return False
                Erase AccOffTable
                mADO.DeleteTable("EqnAccOff")
                Return True
            End If
            ReDim AccOffTable(count - 1)
            mADO.DeleteTable("EqnAccOff")
            For i = 0 To AccOffTable.Length - 1
                verStr = AppInstance.strip(resp, 62)
                With AccOffTable(i)
                    .OffCde = Trim(AppInstance.strip(verStr, 3))
                    .OffUsrIde = Trim(AppInstance.strip(verStr, 10))
                    .MgrCde = Trim(AppInstance.strip(verStr, 3))
                    .MgrUsrIde = Trim(AppInstance.strip(verStr, 10))
                    .FmtFlg = Trim(AppInstance.strip(verStr, 1))
                    .TxtUsrIde = Trim(AppInstance.strip(verStr, 8))

                    .TxtSep1 = Trim(AppInstance.strip(verStr, 1))
                    .TxtMgrCde = Trim(AppInstance.strip(verStr, 3))
                    .TxtSep2 = Trim(AppInstance.strip(verStr, 1))
                    .TxtOffNam = Trim(AppInstance.strip(verStr, 22))
                    mADO.AddRowToTable("EqnAccOff", "Values (""" & .OffCde & " "",""" & _
                                       .OffUsrIde & " "",""" & .MgrCde & " "",""" & _
                                       .MgrUsrIde & " "",""" & .FmtFlg & " "",""" & _
                                       .TxtUsrIde & " "",""" & .TxtSep1 & " "",""" & _
                                       .TxtMgrCde & " "",""" & .TxtSep2 & " "",""" & _
                                       .TxtOffNam & " "")")
                End With
            Next
        Catch ex As Exception
            HandleError(&H80002049, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_GetLndCde(ByVal MsgId As String, ByRef mADO As AdoAccess) As Boolean
        Dim resp As String = String.Empty
        Dim verStr As String
        Dim i, count As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow

        If Not (GetMessage_Common("910060", "", MsgId, &H80002050, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            count = CType(AppInstance.strip(resp, 4), Integer)
            If count <= 0 Then
                '''HandleError(&H80002051, SIBL0100.Util.Debug.getStackFrame(New StackTrace(True).GetFrame(0)) & ": No data received", "ICE Communications")
                '''Return False
                Erase LndCdeTable
                mADO.DeleteTable("EqnLndCde")
                Return True
            End If
            ReDim LndCdeTable(count - 1)
            mADO.DeleteTable("EqnLndCde")
            For i = 0 To LndCdeTable.Length - 1
                verStr = AppInstance.strip(resp, 75)
                With LndCdeTable(i)
                    .LndCde = Trim(AppInstance.strip(verStr, 2))
                    .LndNum = Trim(AppInstance.strip(verStr, 3))
                    .LndDscEng = Trim(AppInstance.strip(verStr, 35))
                    .LndDscAra = Trim(AppInstance.strip(verStr, 35))
                    mADO.AddRowToTable("EqnLndCde", "Values (""" & .LndCde & " "",""" & _
                                       .LndNum & " "",""" & .LndDscEng & " "",""" & .LndDscAra & " "")")
                End With
            Next
        Catch ex As Exception
            HandleError(&H80002052, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_GetSarBnk(ByVal MsgId As String, ByRef mADO As AdoAccess) As Boolean
        Dim resp As String = String.Empty
        Dim verStr As String
        Dim i, count As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow

        If Not (GetMessage_Common("910070", "", MsgId, &H80002050, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            count = CType(AppInstance.strip(resp, 4), Integer)
            If count <= 0 Then
                '''HandleError(&H80002051, SIBL0100.Util.Debug.getStackFrame(New StackTrace(True).GetFrame(0)) & ": No data received", "ICE Communications")
                '''Return False
                Erase SarBnkTable
                mADO.DeleteTable("SarBnkTab")
                Return True
            End If
            ReDim SarBnkTable(count - 1)
            mADO.DeleteTable("SarBnkTab")
            For i = 0 To SarBnkTable.Length - 1
                verStr = AppInstance.strip(resp, 400)
                With SarBnkTable(i)

                    .SarBnkCde = AppInstance.strip(verStr, 4).Trim '4x
                    .SarSwfCde = AppInstance.strip(verStr, 11).Trim '11x
                    .SarSibFlg = AppInstance.strip(verStr, 1).Trim '1x
                    .SarBcc = AppInstance.strip(verStr, 2).Trim '2x
                    .Rsv2 = AppInstance.strip(verStr, 22).Trim '24x
                    'SarDscEng	180
                    .EngMnu = AppInstance.strip(verStr, 25).Trim '25x
                    .Rsv21E = AppInstance.strip(verStr, 15).Trim '15x
                    .EngMsg1 = AppInstance.strip(verStr, 35).Trim '35x
                    .EngMsg2 = AppInstance.strip(verStr, 35).Trim '35x
                    .EngMsg3 = AppInstance.strip(verStr, 35).Trim '35x
                    .EngMsg4 = AppInstance.strip(verStr, 35).Trim '35x
                    'SarDscAra	180
                    .AraMnu = AppInstance.strip(verStr, 25).Trim '25x
                    .Rsv21A = AppInstance.strip(verStr, 15).Trim '15x
                    .AraMsg1 = AppInstance.strip(verStr, 35).Trim '35x
                    .AraMsg2 = AppInstance.strip(verStr, 35).Trim '35x
                    .AraMsg3 = AppInstance.strip(verStr, 35).Trim '35x
                    .AraMsg4 = AppInstance.strip(verStr, 35).Trim '35x

                    mADO.AddRowToTable("SarBnkTab", "Values (""" & _
                                                            .SarBnkCde & " "",""" & _
                                                            .SarSwfCde & " "",""" & _
                                                            .SarSibFlg & " "",""" & _
                                                            .SarBcc & " "",""" & _
                                                            .Rsv2 & " "",""" & _
                                                            .EngMnu & " "",""" & _
                                                            .Rsv21E & " "",""" & _
                                                            .EngMsg1 & " "",""" & _
                                                            .EngMsg2 & " "",""" & _
                                                            .EngMsg3 & " "",""" & _
                                                            .EngMsg4 & " "",""" & _
                                                            .AraMnu & " "",""" & _
                                                            .Rsv21A & " "",""" & _
                                                            .AraMsg1 & " "",""" & _
                                                            .AraMsg2 & " "",""" & _
                                                            .AraMsg3 & " "",""" & _
                                                            .AraMsg4 & " "")")

                End With
            Next
        Catch ex As Exception
            HandleError(&H80002052, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_GetResCde(ByVal MsgId As String, ByRef mADO As AdoAccess) As Boolean
        Dim resp As String = String.Empty
        Dim verStr As String
        Dim i, count As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow

        If Not (GetMessage_Common("910080", "", MsgId, &H80002053, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            count = CType(AppInstance.strip(resp, 4), Integer)
            If count <= 0 Then
                '''HandleError(&H80002054, SIBL0100.Util.Debug.getStackFrame(New StackTrace(True).GetFrame(0)) & ": No data received", "ICE Communications")
                '''Return False
                Erase ResCdeTable
                mADO.DeleteTable("IntResCde")
                Return True
            End If
            ReDim ResCdeTable(count - 1)
            mADO.DeleteTable("IntResCde")
            For i = 0 To ResCdeTable.Length - 1
                verStr = AppInstance.strip(resp, 150)
                With ResCdeTable(i)
                    .Rsv = Trim(AppInstance.strip(verStr, 3))
                    .IntResCde = Trim(AppInstance.strip(verStr, 3))
                    .IntResEng = Trim(AppInstance.strip(verStr, 72))
                    .IntResAra = Trim(AppInstance.strip(verStr, 72))
                    'Format string for proper handling of (")
                    .IntResEng = .IntResEng.Replace("""", """""")
                    'Format string for proper handling of (")
                    .IntResAra = .IntResAra.Replace("""", """""")

                    mADO.AddRowToTable("IntResCde", "Values (""" & .Rsv & " "",""" & _
                                       .IntResCde & " "",""" & .IntResEng & " "",""" & .IntResAra & " "")")
                End With
            Next
        Catch ex As Exception
            HandleError(&H80002055, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_GetActCde(ByVal MsgId As String, ByRef mADO As AdoAccess) As Boolean
        Dim resp As String = String.Empty
        Dim verStr As String
        Dim i, count As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow

        If Not (GetMessage_Common("910090", "", MsgId, &H80002056, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            count = CType(AppInstance.strip(resp, 4), Integer)
            If count <= 0 Then
                '''HandleError(&H80002057, SIBL0100.Util.Debug.getStackFrame(New StackTrace(True).GetFrame(0)) & ": No data received", "ICE Communications")
                '''Return False
                Erase ActCdeTable
                mADO.DeleteTable("IntActCde")
                Return True
            End If
            ReDim ActCdeTable(count - 1)
            mADO.DeleteTable("IntActCde")
            For i = 0 To ActCdeTable.Length - 1
                verStr = AppInstance.strip(resp, 768)
                With ActCdeTable(i)
                    .Rsv = Trim(AppInstance.strip(verStr, 2))
                    .IntActCde = Trim(AppInstance.strip(verStr, 2))
                    .IntActEng = Trim(AppInstance.strip(verStr, 382))
                    .IntActAra = Trim(AppInstance.strip(verStr, 382))
                    'Format string for proper handling of (")
                    .IntActEng = .IntActEng.Replace("""", """""")
                    'Format string for proper handling of (")
                    .IntActAra = .IntActAra.Replace("""", """""")

                    mADO.AddRowToTable("IntActCde", "Values (""" & .Rsv & " "",""" & _
                                       .IntActCde & " "",""" & .IntActEng & " "",""" & .IntActAra & " "")")
                End With
            Next
        Catch ex As Exception
            HandleError(&H80002058, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_GetDeaTyp(ByVal MsgId As String, ByRef mADO As AdoAccess) As Boolean
        Dim resp As String = String.Empty
        Dim verStr As String
        Dim i, count As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow

        If Not (GetMessage_Common("910130", "", MsgId, &H80002059, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            count = CType(AppInstance.strip(resp, 4), Integer)
            If count <= 0 Then
                '''HandleError(&H80002060, SIBL0100.Util.Debug.getStackFrame(New StackTrace(True).GetFrame(0)) & ": No data received", "ICE Communications")
                '''Return False
                Erase DeaTypTable
                mADO.DeleteTable("EqnDeaTyp")
                Return True
            End If
            ReDim DeaTypTable(count - 1)
            mADO.DeleteTable("EqnDeaTyp")
            For i = 0 To DeaTypTable.Length - 1
                verStr = AppInstance.strip(resp, 73)
                With DeaTypTable(i)
                    .DeaTypCde = Trim(AppInstance.strip(verStr, 3))
                    .DeaDscEng = Trim(AppInstance.strip(verStr, 35))
                    .DeaDscAra = Trim(AppInstance.strip(verStr, 35))
                    mADO.AddRowToTable("EqnDeaTyp", "Values (""" & .DeaTypCde & " "",""" & _
                                       .DeaDscEng & " "",""" & .DeaDscAra & " "")")
                End With
            Next
        Catch ex As Exception
            HandleError(&H80002061, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_LocCusInf(ByVal MsgId As String, ByRef CusItm() As IceCusItm_Struct, Optional ByVal bUseExtMsg As Boolean = False) As Boolean
        Dim resp As String = String.Empty
        Dim tmpStr As String
        Dim i, count As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow
        Dim st As String

        CusItm = Nothing
        If Not (GetMessage_Common("901100", "", MsgId, &H80002062, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            count = CType(AppInstance.strip(resp, 3), Integer)
            If count <= 0 Then
                Erase CusItm
                Return True
            End If
            ReDim CusItm(count - 1)
            For i = 0 To CusItm.Length - 1
                If (bUseExtMsg) Then tmpStr = AppInstance.strip(resp, 440) Else tmpStr = AppInstance.strip(resp, 200)
                With CusItm(i)
                    .CusNum = Trim(AppInstance.strip(tmpStr, 6))
                    .CusTyp = Trim(AppInstance.strip(tmpStr, 2))
                    .CusNam = Trim(AppInstance.strip(tmpStr, 35))
                    st = AppInstance.strip(tmpStr, 14)
                    .CusCID = Trim(Left(st, 2) & " " & Mid(st, 3, 2) & " " & Right(st, 10))
                    .IbkCrpIde = Trim(AppInstance.strip(tmpStr, 10))
                    .IbkUsrIde = Trim(AppInstance.strip(tmpStr, 10))
                    .IvrCrpIde = Trim(AppInstance.strip(tmpStr, 10))
                    .IvrUsrIde = Trim(AppInstance.strip(tmpStr, 10))
                    .AccOff = Trim(AppInstance.strip(tmpStr, 3))
                    .AccOffUid = Trim(AppInstance.strip(tmpStr, 10))
                    .AccMgrUid = Trim(AppInstance.strip(tmpStr, 10))
                    .TxtUsrIde = Trim(AppInstance.strip(tmpStr, 8))
                    .TxtSep1 = Trim(AppInstance.strip(tmpStr, 1))
                    .TxtOffCde = Trim(AppInstance.strip(tmpStr, 3))
                    .TxtSep2 = Trim(AppInstance.strip(tmpStr, 1))
                    .TxtOffNam = Trim(AppInstance.strip(tmpStr, 22))
                    .CusMnm = Trim(AppInstance.strip(tmpStr, 9))
                    .CusDefBrn = Trim(AppInstance.strip(tmpStr, 4))
                    .CusStaCde = Trim(AppInstance.strip(tmpStr, 1))
                    .CusGrp = Trim(AppInstance.strip(tmpStr, 6))
                    .IBKRetCnt = Trim(AppInstance.strip(tmpStr, 2))
                    .IBKCavCnt = Trim(AppInstance.strip(tmpStr, 2))
                    .IBKCorCnt = Trim(AppInstance.strip(tmpStr, 2))
                    .CidExpDte = Trim(AppInstance.strip(tmpStr, 8))
                    .CusSnsLev = Trim(AppInstance.strip(tmpStr, 1))
                    .CusLngCde = Trim(AppInstance.strip(tmpStr, 2)) '2x	Preferred language “AR”=Arabic, “EN”=English (GFPF.GFLNM)
                    .Rsv1 = Trim(AppInstance.strip(tmpStr, 8))
                    Erase .TelItm

                    If bUseExtMsg Then
                        ReDim .TelItm(4)
                        For ix As Integer = 0 To 4
                            .TelItm(ix).NumFmt = AppInstance.strip(tmpStr, 1).Trim
                            .TelItm(ix).NumSrc = AppInstance.strip(tmpStr, 3).Trim
                            .TelItm(ix).NumTyp = AppInstance.strip(tmpStr, 1).Trim
                            .TelItm(ix).TelNum = AppInstance.strip(tmpStr, 25).Trim
                        Next
                        .Rsv200 = AppInstance.strip(tmpStr, 55).Trim
                        .CusNamAlt = AppInstance.strip(tmpStr, 35).Trim
                    End If
                End With
            Next
        Catch ex As Exception
            HandleError(&H80002063, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_EnumPrcCde(ByVal MsgId As String, ByRef mADO As AdoAccess) As Boolean
        Dim resp As String = String.Empty
        Dim verStr As String
        Dim i, count As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow

        If Not (GetMessage_Common("910160", "", MsgId, &H80002112, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            count = CType(AppInstance.strip(resp, 4), Integer)
            If count <= 0 Then
                '''HandleError(&H80002113, SIBL0100.Util.Debug.getStackFrame(New StackTrace(True).GetFrame(0)) & ": No data received", "ICE Communications")
                '''Return False
                Erase PrcCdeTable
                mADO.DeleteTable("IcsProCde")
                Return True
            End If
            ReDim PrcCdeTable(count - 1)
            mADO.DeleteTable("IcsProCde")
            For i = 0 To PrcCdeTable.Length - 1
                verStr = AppInstance.strip(resp, 128)
                With PrcCdeTable(i)
                    .PrcCde = Trim(AppInstance.strip(verStr, 6))  '6n
                    .PrcCdeDsc = Trim(AppInstance.strip(verStr, 35))  '35x
                    .PrcShrDec = Trim(AppInstance.strip(verStr, 15))  '15x
                    .PrcCat = Trim(AppInstance.strip(verStr, 3))  '3x
                    .PrcKeyCls = Trim(AppInstance.strip(verStr, 3))  '3x
                    .PrcJrnFlg = Trim(AppInstance.strip(verStr, 1))  '1x
                    .Rsv1 = Trim(AppInstance.strip(verStr, 65))  '65x

                    mADO.AddRowToTable("IcsProCde", "Values (""" & .PrcCde & " "",""" & .PrcCdeDsc & " "",""" & .PrcShrDec & " "",""" & _
                                                    .PrcCat & " "",""" & .PrcKeyCls & " "",""" & .PrcJrnFlg & " "",""" & .Rsv1 & " "")")
                End With
            Next
        Catch ex As Exception
            HandleError(&H80002114, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_GetCidDocTyp(ByVal MsgId As String, ByRef mADO As AdoAccess) As Boolean
        Dim resp As String = String.Empty
        Dim verStr As String
        Dim i, count As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow

        If Not (GetMessage_Common("910210", "", MsgId, &H80002112, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            count = CType(AppInstance.strip(resp, 4), Integer)
            If count <= 0 Then
                '''HandleError(&H80002113, SIBL0100.Util.Debug.getStackFrame(New StackTrace(True).GetFrame(0)) & ": No data received", "ICE Communications")
                '''Return False
                Erase CidDocTable
                mADO.DeleteTable("CidDocTyp")
                Return True
            End If
            ReDim CidDocTable(count - 1)
            mADO.DeleteTable("CidDocTyp")
            For i = 0 To CidDocTable.Length - 1
                verStr = AppInstance.strip(resp, 80)
                With CidDocTable(i)

                    .CusSeg = Trim(AppInstance.strip(verStr, 3))
                    .DocTypCde = Trim(AppInstance.strip(verStr, 2))
                    .CusCanSel = Trim(AppInstance.strip(verStr, 1))
                    .DocDscEng = Trim(AppInstance.strip(verStr, 30))
                    .DocDscAra = Trim(AppInstance.strip(verStr, 30))
                    .Rsv33 = Trim(AppInstance.strip(verStr, 14))

                    mADO.AddRowToTable("CidDocTyp", "Values (""" & .CusSeg & " "",""" & _
                                                                    .DocTypCde & " "",""" & _
                                                                    .CusCanSel & " "",""" & _
                                                                    .DocDscEng & " "",""" & _
                                                                    .DocDscAra & " "",""" & _
                                                                    .Rsv33 & " "")")
                End With
            Next
        Catch ex As Exception
            HandleError(&H80002114, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_GetCusPtyTyp(ByVal MsgId As String, ByRef mADO As AdoAccess) As Boolean
        Dim resp As String = String.Empty
        Dim verStr As String
        Dim i, count As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow

        If Not (GetMessage_Common("910220", "", MsgId, &H80002112, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            count = CType(AppInstance.strip(resp, 4), Integer)
            If count <= 0 Then
                '''HandleError(&H80002113, SIBL0100.Util.Debug.getStackFrame(New StackTrace(True).GetFrame(0)) & ": No data received", "ICE Communications")
                '''Return False
                Erase CusPtyTable
                mADO.DeleteTable("CusPtyTyp")
                Return True
            End If
            ReDim CusPtyTable(count - 1)
            mADO.DeleteTable("CusPtyTyp")
            For i = 0 To CusPtyTable.Length - 1
                verStr = AppInstance.strip(resp, 100)
                With CusPtyTable(i)
                    .PtyTypCde = Trim(AppInstance.strip(verStr, 2))
                    .PtyShtEng = Trim(AppInstance.strip(verStr, 10))
                    .PtyShtAra = Trim(AppInstance.strip(verStr, 10))
                    .PtyDscEng = Trim(AppInstance.strip(verStr, 25))
                    .PtyDscAra = Trim(AppInstance.strip(verStr, 25))
                    .Rsv33 = Trim(AppInstance.strip(verStr, 28))

                    mADO.AddRowToTable("CusPtyTyp", "Values (""" & .PtyTypCde & " "",""" & _
                                                                    .PtyShtEng & " "",""" & _
                                                                    .PtyShtAra & " "",""" & _
                                                                    .PtyDscEng & " "",""" & _
                                                                    .PtyDscAra & " "",""" & _
                                                                    .Rsv33 & " "")")
                End With
            Next
        Catch ex As Exception
            HandleError(&H80002114, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_GetSpcCon(ByVal MsgId As String, ByRef mADO As AdoAccess) As Boolean
        Dim resp As String = String.Empty
        Dim verStr As String
        Dim i, count As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow

        If Not (GetMessage_Common("910230", "", MsgId, &H80002112, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            count = CType(AppInstance.strip(resp, 4), Integer)
            If count <= 0 Then
                '''HandleError(&H80002113, SIBL0100.Util.Debug.getStackFrame(New StackTrace(True).GetFrame(0)) & ": No data received", "ICE Communications")
                '''Return False
                Erase SpcConTable
                mADO.DeleteTable("SpcConCde")
                Return True
            End If
            ReDim SpcConTable(count - 1)
            mADO.DeleteTable("SpcConCde")
            For i = 0 To SpcConTable.Length - 1
                verStr = AppInstance.strip(resp, 64)
                With SpcConTable(i)
                    .SccCde = Trim(AppInstance.strip(verStr, 3))
                    .SccDscEng = Trim(AppInstance.strip(verStr, 25))
                    .SccDscAra = Trim(AppInstance.strip(verStr, 25))
                    .SccModCan = Trim(AppInstance.strip(verStr, 1))
                    .SccModIba = Trim(AppInstance.strip(verStr, 1))
                    .SccModPrv = Trim(AppInstance.strip(verStr, 1))
                    .SccSibCde = Trim(AppInstance.strip(verStr, 1))
                    .Rsv33 = Trim(AppInstance.strip(verStr, 7))

                    mADO.AddRowToTable("SpcConCde", "Values (""" & .SccCde & " "",""" & _
                                                                    .SccDscEng & " "",""" & _
                                                                    .SccDscAra & " "",""" & _
                                                                    .SccModCan & " "",""" & _
                                                                    .SccModIba & " "",""" & _
                                                                    .SccModPrv & " "",""" & _
                                                                    .SccSibCde & " "",""" & _
                                                                    .Rsv33 & " "")")
                End With
            Next
        Catch ex As Exception
            HandleError(&H80002114, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_GetSalCde(ByVal MsgId As String, ByRef mADO As AdoAccess) As Boolean
        Dim resp As String = String.Empty
        Dim verStr As String
        Dim i, count As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow

        If Not (GetMessage_Common("910240", "", MsgId, &H80002112, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            count = CType(AppInstance.strip(resp, 4), Integer)
            If count <= 0 Then
                '''HandleError(&H80002113, SIBL0100.Util.Debug.getStackFrame(New StackTrace(True).GetFrame(0)) & ": No data received", "ICE Communications")
                '''Return False
                Erase SalCdeTable
                mADO.DeleteTable("PrsSalCde")
                Return True
            End If
            ReDim SalCdeTable(count - 1)
            mADO.DeleteTable("PrsSalCde")
            For i = 0 To SalCdeTable.Length - 1
                verStr = AppInstance.strip(resp, 100)
                With SalCdeTable(i)
                    .PrsSalCde = Trim(AppInstance.strip(verStr, 3))
                    .PrsSexCde = Trim(AppInstance.strip(verStr, 1))
                    .EqnSalCde = Trim(AppInstance.strip(verStr, 3))
                    .SalDscEng = Trim(AppInstance.strip(verStr, 35))
                    .SalDscAra = Trim(AppInstance.strip(verStr, 35))
                    .Rsv33 = Trim(AppInstance.strip(verStr, 23))


                    mADO.AddRowToTable("PrsSalCde", "Values (""" & .PrsSalCde & " "",""" & _
                                                                    .PrsSexCde & " "",""" & _
                                                                    .EqnSalCde & " "",""" & _
                                                                    .SalDscEng & " "",""" & _
                                                                    .SalDscAra & " "",""" & _
                                                                    .Rsv33 & " "")")
                End With
            Next
        Catch ex As Exception
            HandleError(&H80002114, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_EnumTrxInf(ByVal MsgId As String, ByRef CcyCde As String, ByRef BalDat As BalDat_Struct, ByRef TrxInf() As TrxSlt_Strcut) As Boolean
        '930100
        Dim resp As String = String.Empty
        Dim tmpStr, ItmTyp As String
        Dim i, count, ln As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow


        If Not (GetMessage_Common("930100", "", MsgId, &H8000264, resp)) Then Return False

        Try
            AppInstance.strip(resp, 256)    'Header
            AppInstance.strip(resp, 13)    'AccNum
            AppInstance.strip(resp, 8)    'DteBeg
            AppInstance.strip(resp, 8)    'DteEnd
            AppInstance.strip(resp, 15)    'AmtBot
            AppInstance.strip(resp, 15)    'AmtTop
            AppInstance.strip(resp, 4)       'RecLim
            AppInstance.strip(resp, 1)    'RecSrt
            With BalDat 'AppInstance.strip(resp, 81) 'BalDat
                .BalAvl = AppInstance.strip(resp, 15)
                .BalHld = AppInstance.strip(resp, 14)
                .BalClr = AppInstance.strip(resp, 15)
                .BalLdg = AppInstance.strip(resp, 15)
                .OvdLim = AppInstance.strip(resp, 14)
                .OvdExp = AppInstance.strip(resp, 8)
            End With
            CcyCde = AppInstance.strip(resp, 3)  'CcyCde

            count = CType(AppInstance.strip(resp, 4), Integer)
            If count <= 0 Then
                Erase TrxInf
                Return True
            End If
            ReDim TrxInf(count - 1)
            For i = 0 To TrxInf.Length - 1
                With TrxInf(i)
                    .PstDte = AppInstance.strip(resp, 8)
                    .ValDte = AppInstance.strip(resp, 8)
                    .TrxRef = AppInstance.strip(resp, 16)
                    .TrxCde = AppInstance.strip(resp, 3)
                    .NarLin1 = AppInstance.strip(resp, 35)
                    .NarLin2 = AppInstance.strip(resp, 35)
                    .NarLin3 = AppInstance.strip(resp, 35)
                    .NarLin4 = AppInstance.strip(resp, 35)
                    .TrxAmt = AppInstance.strip(resp, 15)
                End With
            Next

        Catch ex As Exception
            HandleError(&H80002065, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_EnumTrxInfEx(ByVal MsgId As String, ByRef CcyCde As String, ByRef BalDat As BalDat_Struct, ByRef TrxInfEx() As TrxSltEx_Strcut, ByRef count As Integer, ByRef found As Integer) As Boolean
        '930110
        Dim resp As String = String.Empty
        Dim tmpStr, ItmTyp As String
        Dim i, ln As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow


        If Not (GetMessage_Common("930110", "", MsgId, &H80002066, resp)) Then Return False

        Try
            AppInstance.strip(resp, 256)    'Header
            AppInstance.strip(resp, 13)    'AccNum
            AppInstance.strip(resp, 8)    'DteBeg
            AppInstance.strip(resp, 8)    'DteEnd
            AppInstance.strip(resp, 15)    'AmtBot
            AppInstance.strip(resp, 15)    'AmtTop
            AppInstance.strip(resp, 4)       'RecLim
            AppInstance.strip(resp, 1)    'RecSrt
            AppInstance.strip(resp, 192)    'Rsv1
            With BalDat 'AppInstance.strip(resp, 81) 'BalDat
                .BalAvl = AppInstance.strip(resp, 15)
                .BalHld = AppInstance.strip(resp, 14)
                .BalClr = AppInstance.strip(resp, 15)
                .BalLdg = AppInstance.strip(resp, 15)
                .OvdLim = AppInstance.strip(resp, 14)
                .OvdExp = AppInstance.strip(resp, 8)
            End With
            CcyCde = AppInstance.strip(resp, 3)  'CcyCde
            found = CType(AppInstance.strip(resp, 4), Integer)
            count = CType(AppInstance.strip(resp, 4), Integer)
            If count <= 0 Then
                Erase TrxInfEx
                Return True
            End If
            If count <> found Then
                ModalMsgBox("There are more transactions in the systems than can be shown here." & vbCrLf & _
                        "Of the " & found & " recorded, only " & count & " can be shown", MsgBoxStyle.Information, "ICE Results")
                Application.DoEvents()
                ShowBusyIcon(True)
            End If
            ReDim TrxInfEx(count - 1)
            For i = 0 To TrxInfEx.Length - 1
                With TrxInfEx(i)
                    .PstDte = AppInstance.strip(resp, 8)
                    .ValDte = AppInstance.strip(resp, 8)
                    .TrxRef = AppInstance.strip(resp, 16)
                    .TrxCde = AppInstance.strip(resp, 3)
                    .NarLin1 = AppInstance.strip(resp, 35)
                    .NarLin2 = AppInstance.strip(resp, 35)
                    .NarLin3 = AppInstance.strip(resp, 35)
                    .NarLin4 = AppInstance.strip(resp, 35)
                    .TrxAmt = AppInstance.strip(resp, 15)
                    .RunBal = AppInstance.strip(resp, 15)
                    .Rsv2 = AppInstance.strip(resp, 51)
                End With
            Next

        Catch ex As Exception
            HandleError(&H80002067, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_EnumIntTrx(ByVal MsgId As String, ByRef CcyCde As String, ByRef BalDat As BalIntDat_Struct, ByRef TrxInfEx() As TrxSltIntAcc_Strcut, ByRef count As Integer, ByRef found As Integer, ByRef AccNum As String, ByRef LastTrxStp As String) As Boolean
        '930120
        Dim resp As String = String.Empty
        Dim tmpStr, ItmTyp As String
        Dim i, ln As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow


        If Not (GetMessage_Common("930120", "", MsgId, &H80002066, resp)) Then Return False

        Try
            AppInstance.strip(resp, 256)    'Header
            AccNum = AppInstance.strip(resp, 13)  'AccNum
            CcyCde = AppInstance.strip(resp, 3)  'CcyCde
            LastTrxStp = AppInstance.strip(resp, 26)
            With BalDat 'AppInstance.strip(resp, 81) 'BalDat

                .BalAvl = AppInstance.strip(resp, 15)
                .BalLdg = AppInstance.strip(resp, 15)

            End With
            AppInstance.strip(resp, 176)
            found = CType(AppInstance.strip(resp, 4), Integer)
            count = CType(AppInstance.strip(resp, 4), Integer)
            If count <= 0 Then
                Erase TrxInfEx
                Return True
            End If
            If count <> found Then
                ModalMsgBox("There are more transactions in the systems than can be shown here." & vbCrLf & _
                        "Of the " & found & " recorded, only " & count & " can be shown", MsgBoxStyle.Information, "ICE Results")
                Application.DoEvents()
                ShowBusyIcon(True)
            End If
            ReDim TrxInfEx(count - 1)
            For i = 0 To TrxInfEx.Length - 1
                With TrxInfEx(i)
                    .PstDte = AppInstance.strip(resp, 8)
                    .PstTme = AppInstance.strip(resp, 6)
                    .ValDte = AppInstance.strip(resp, 8)
                    .TrxRef = AppInstance.strip(resp, 16)
                    .TrxCde = AppInstance.strip(resp, 3)
                    .TrxAmt = AppInstance.strip(resp, 15)
                    .NarLin1 = AppInstance.strip(resp, 35)
                    .NarLin2 = AppInstance.strip(resp, 35)
                    .Rsv2 = AppInstance.strip(resp, 24)
                End With
            Next

        Catch ex As Exception
            HandleError(&H80002067, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function


    Public Function GetMessage_EnumOn2Trx(ByVal MsgId As String, ByRef On2TrxDat() As On2TrxDat_Struct) As Boolean
        '932000
        Dim resp As String = String.Empty
        Dim count As Integer
        Dim tmpStr, ItmTyp As String
        Dim i, ln As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow


        If Not (GetMessage_Common("932000", "", MsgId, &H80002100, resp)) Then Return False

        Try
            AppInstance.strip(resp, 256)    'Header
            AppInstance.strip(resp, 6)    'CusNum
            AppInstance.strip(resp, 18)    'CrdNum
            AppInstance.strip(resp, 40)    'Rsv1
            AppInstance.strip(resp, 240)    'CamDat
            count = CType(AppInstance.strip(resp, 2), Integer)
            If count <= 0 Then
                Erase On2TrxDat
                Return True
            End If
            ReDim On2TrxDat(count - 1)
            For i = 0 To On2TrxDat.Length - 1
                With On2TrxDat(i)
                    .P7TrxDte = AppInstance.strip(resp, 8)
                    .P7TrxTme = AppInstance.strip(resp, 6)
                    .P13LocDte = AppInstance.strip(resp, 8)
                    .P12LocTme = AppInstance.strip(resp, 6)
                    .On2TrxCde = AppInstance.strip(resp, 4)
                    .P39RspCde = AppInstance.strip(resp, 3)
                    .P49Ccy = AppInstance.strip(resp, 3)
                    .P4Amt = AppInstance.strip(resp, 14)
                    .On2AcqCde = AppInstance.strip(resp, 4)
                    .On2AcqTyp = AppInstance.strip(resp, 3)
                    .P32Acq = AppInstance.strip(resp, 11)
                    .P41TrmIde = AppInstance.strip(resp, 16)
                    .P47RetIde = AppInstance.strip(resp, 12)
                    .P5Amt = AppInstance.strip(resp, 14)
                    .On2Rsv1 = AppInstance.strip(resp, 8)
                End With
            Next
        Catch ex As Exception
            HandleError(&H80002101, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_EnumFunds(ByVal MsgId As String, ByRef Funds() As Funds_Struct) As Boolean
        '960000
        Dim resp As String = String.Empty
        Dim count As Integer
        Dim tmpStr, ItmTyp As String
        Dim i, ln As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow


        If Not (GetMessage_Common("960000", "", MsgId, &H80002100, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)    'Header
            AppInstance.strip(resp, 44)    'Echoed Data
            AppInstance.strip(resp, 14)    'MFXDteTme
            count = CType(AppInstance.strip(resp, 3), Integer)
            If count <= 0 Then
                Erase Funds
                Return True
            End If
            ReDim Funds(count - 1)
            For i = 0 To Funds.Length - 1
                With Funds(i)
                    .FndCde = AppInstance.strip(resp, 3)  '3x
                    'FndInf 124
                    .FndNam1 = AppInstance.strip(resp, 25)  '25x
                    .FndDsc1 = AppInstance.strip(resp, 99)  '99x
                    .FndNam2 = AppInstance.strip(resp, 25)  '25x
                    .FndDsc2 = AppInstance.strip(resp, 99)  '99x
                    .FndCcy = AppInstance.strip(resp, 3)  '3x
                    .FndTyp = AppInstance.strip(resp, 1)  '1x
                    .SubNonKsa = AppInstance.strip(resp, 1)  '1x
                    .FndRecStp = AppInstance.strip(resp, 14)  '14x
                    .FndIntAcc = AppInstance.strip(resp, 13)  '13x
                    .AlcPrcMde = AppInstance.strip(resp, 1)  '1x
                    .FndRevFrq = AppInstance.strip(resp, 3)  '3x
                    .RedSetPer = AppInstance.strip(resp, 2)  '2n
                    .SubDayCut = AppInstance.strip(resp, 2)  '2n
                    .SubTodCut = AppInstance.strip(resp, 4)  '4n
                    .RedDayCut = AppInstance.strip(resp, 2)  '2n
                    .RedTodCut = AppInstance.strip(resp, 4)  '4n
                    .SubAmtMin = AppInstance.strip(resp, 8)  '8n
                    .SubAmtInc = AppInstance.strip(resp, 8)  '8n
                    .RedAmtMin = AppInstance.strip(resp, 8)  '8n
                    .MinBalAmt = AppInstance.strip(resp, 8)  '8n
                    .MaxHldPct = AppInstance.strip(resp, 5)  '3n2n
                    .FndUntCnt = AppInstance.strip(resp, 14)  '10n4n
                    .PrcNav1st = AppInstance.strip(resp, 9)  '5n4n
                    .FndUntPrc = AppInstance.strip(resp, 9)  '5n4n
                    .FndCusCnt = AppInstance.strip(resp, 6)  '6n
                    .DteNav1st = AppInstance.strip(resp, 8)  '8x
                    .DteNavPrv = AppInstance.strip(resp, 8)  '8x
                    .DteNavNow = AppInstance.strip(resp, 8)  '8x
                    .DteNavNxt = AppInstance.strip(resp, 8)  '8x
                    .NavNow = AppInstance.strip(resp, 12)  '12n
                    .Prf1st = AppInstance.strip(resp, 9)  '3n6n
                    .PrfYtd = AppInstance.strip(resp, 9)  '3n6n
                    .PrfM12 = AppInstance.strip(resp, 9)  '3n6n
                    .Rsv3 = AppInstance.strip(resp, 53)  '53x
                End With
            Next
        Catch ex As Exception
            HandleError(&H80002111, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_EnumCusFunds(ByVal MsgId As String, ByRef CusFunds() As CusFunds_Struct) As Boolean
        '960010
        Dim resp As String = String.Empty
        Dim count As Integer
        Dim tmpStr, ItmTyp As String
        Dim i, ln As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow


        If Not (GetMessage_Common("960010", "", MsgId, &H80002100, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)    'Header
            AppInstance.strip(resp, 44)    'Echoed Data
            count = CType(AppInstance.strip(resp, 3), Integer)
            If count <= 0 Then
                Erase CusFunds
                Return True
            End If
            ReDim CusFunds(count - 1)
            For i = 0 To CusFunds.Length - 1
                With CusFunds(i)
                    'HldKey	11
                    .CusNum = AppInstance.strip(resp, 6)  '6n
                    .WltNum = AppInstance.strip(resp, 2)  '2n
                    .FndCde = AppInstance.strip(resp, 3)  '3x
                    .WltNam1 = AppInstance.strip(resp, 35) '	35x
                    .WltNam2 = AppInstance.strip(resp, 35) '	35x
                    .WltRedFlg = AppInstance.strip(resp, 1) '	1x
                    .WltSubFlg = AppInstance.strip(resp, 1) '	1x
                    .Rsv31 = AppInstance.strip(resp, 6)   '6x
                    .FndCcy = AppInstance.strip(resp, 3)  '3x
                    .CusAccNum = AppInstance.strip(resp, 13) '	13x
                    .UntQty = AppInstance.strip(resp, 14)  '10n4n
                    .UntPrc = AppInstance.strip(resp, 9)  '5n4n
                    .AmtBal = AppInstance.strip(resp, 12)  '12n
                    .PctFnd1 = AppInstance.strip(resp, 5)  '3n2n
                    .PndRedQty = AppInstance.strip(resp, 14)  '10n4n
                    .PndRedAmt = AppInstance.strip(resp, 12)  '12n
                    .PndSubQty = AppInstance.strip(resp, 14)  '10n4n
                    .PndSubAmt = AppInstance.strip(resp, 12)  '12n
                    .PrjUntQty = AppInstance.strip(resp, 14)  '10n4n
                    .PrjAmtBal = AppInstance.strip(resp, 12)  '12n
                    .PctFnd2 = AppInstance.strip(resp, 5)  '3n2n
                    .AveCstPrc = AppInstance.strip(resp, 9) '	5n4n
                    .PrfAmt = AppInstance.strip(resp, 14)  '13ns
                    .PrfPct = AppInstance.strip(resp, 7)  '4n2ns
                    .Rsv32 = AppInstance.strip(resp, 39)  '39x
                    .SeeCcy = AppInstance.strip(resp, 3) '	3x
                End With
            Next
        Catch ex As Exception
            HandleError(&H80002111, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_EnumLoaSch(ByVal MsgId As String, ByRef LoaDet As EnumCusDtls_LAA, ByRef LoaSchDat() As LoaSchDat_Stuct) As Boolean
        '970710
        Dim resp As String = String.Empty
        Dim count As Integer
        Dim tmpStr, ItmTyp As String
        Dim i, ln As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow


        If Not (GetMessage_Common("970710", "", MsgId, &H80002102, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)    'Header
            AppInstance.strip(resp, 6)    'CusNum
            'Loan Data
            LoaDet.ItmTyp = AppInstance.strip(resp, 3) '3x
            LoaDet.ObjCcy = AppInstance.strip(resp, 3) '3x
            LoaDet.ObjTypCde = AppInstance.strip(resp, 3) '3x
            LoaDet.ObjStaCde = AppInstance.strip(resp, 1) '1x
            LoaDet.ObjKey = AppInstance.strip(resp, 20) '20x
            LoaDet.ObjOpnDte = AppInstance.strip(resp, 8) '8n
            LoaDet.ObjClsDte = AppInstance.strip(resp, 8) '8n
            LoaDet.ObjPayDte = AppInstance.strip(resp, 8) '8n
            LoaDet.ObjComRte = AppInstance.strip(resp, 12) '5n7n
            LoaDet.ObjPrnAmt = AppInstance.strip(resp, 14) '14n
            LoaDet.ObjDueAmt = AppInstance.strip(resp, 14) '14n
            LoaDet.ObjRelObj = AppInstance.strip(resp, 13) '13x
            LoaDet.ObjRstAmt = AppInstance.strip(resp, 14) '14n
            LoaDet.ObjOvrDue = AppInstance.strip(resp, 14) '14n
            LoaDet.ObjAccOff = AppInstance.strip(resp, 22) '22x


            count = CType(AppInstance.strip(resp, 4), Integer)
            If count <= 0 Then
                Erase LoaSchDat
                Return True
            End If
            ReDim LoaSchDat(count - 1)
            For i = 0 To LoaSchDat.Length - 1
                With LoaSchDat(i)
                    .SchTyp = AppInstance.strip(resp, 1)
                    .SchNum = AppInstance.strip(resp, 4)
                    .DueDte = AppInstance.strip(resp, 8)
                    .PayDte = AppInstance.strip(resp, 8)
                    .DueAmt = AppInstance.strip(resp, 14)
                    .PayAmt = AppInstance.strip(resp, 14)
                    .RstAmt = AppInstance.strip(resp, 14)
                    .Rsv1 = AppInstance.strip(resp, 1)
                End With
            Next
        Catch ex As Exception
            HandleError(&H80002103, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_SngRteEnq(ByVal MsgId As String, ByRef frp As ICED0100.FinRspDat_Struct) As Boolean
        '970720
        Dim resp As String = String.Empty
        Dim count As Integer
        Dim tmpStr, ItmTyp As String
        Dim i, ln As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow


        If Not (GetMessage_Common("970720", "", MsgId, &H81000124, resp)) Then Return False

        Try
            AppInstance.strip(resp, 256)    'Header
            AppInstance.strip(resp, 6)      'Echoed Data
            AppInstance.strip(resp, 128)      'Echoed Data
            frp.ReadTable(resp)
        Catch ex As Exception
            HandleError(&H81000125, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    ''' Y600KHDA : Modifiy to Accept LAX Data Strcuture for Loan Closure
    Public Function GetMessage_EnumLoaSchEx(ByVal MsgId As String, ByRef LoaDet As ExEnumCusDtls_LAX, ByVal ReqLoaDet As String) As Boolean
        '970730
        Dim resp As String = String.Empty
        Dim count As Integer
        Dim tmpStr, ItmTyp As String
        Dim i, ln As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow


        If Not (GetMessage_Common("970730", "", MsgId, &H80002102, resp)) Then Return False


        Try
            AppInstance.strip(resp, 256)    'Header
            AppInstance.strip(resp, 6)    'CusNum
            'Loan Data
            With LoaDet.LAIdat
                .ItmTyp = AppInstance.strip(resp, 3) '3x
                .ObjCcy = AppInstance.strip(resp, 3) '3x
                .ObjTypCde = AppInstance.strip(resp, 3) '3x
                .ObjStaCde = AppInstance.strip(resp, 1) '1x
                .ObjKey = AppInstance.strip(resp, 20) '20x
                .ObjGrgOpnDte = AppInstance.strip(resp, 8) '8n
                .ObjHgrOpnDte = AppInstance.strip(resp, 8) '8n
                .ObjGrgClsDte = AppInstance.strip(resp, 8) '8n
                .ObjHgrClsDte = AppInstance.strip(resp, 8) '8n
                .ObjGrgPayDte = AppInstance.strip(resp, 8) '8n
                .ObjHgrPayDte = AppInstance.strip(resp, 8) '8n
                .ObjComRte = AppInstance.strip(resp, 12) '5n7n
                .ObjPrnAmt = AppInstance.strip(resp, 14) '14n
                .ObjDueAmt = AppInstance.strip(resp, 14) '14n
                .ObjRelObj = AppInstance.strip(resp, 13) '13x
                .ObjRstAmt = AppInstance.strip(resp, 14) '14n
                .ObjOvrDue = AppInstance.strip(resp, 14) '14n
                .ObjAccOff = AppInstance.strip(resp, 22) '22x
                .Rsv19 = AppInstance.strip(resp, 19) '19x
            End With

            'LAX Structure
            If ReqLoaDet = "LAX" Then
                LoaDet.PrnAmtRem = AppInstance.strip(resp, 14) '14n
                LoaDet.ComAmtAcc = AppInstance.strip(resp, 14) '14n
                LoaDet.ComDayGon = AppInstance.strip(resp, 2) '2n
                LoaDet.PenRatPct = AppInstance.strip(resp, 9) '2n7n
                LoaDet.PenFeeAmt = AppInstance.strip(resp, 14) '14n
                LoaDet.PenpayOff = AppInstance.strip(resp, 14) '14n
                LoaDet.PenOvdCom = AppInstance.strip(resp, 14) '14n
                LoaDet.PenOvdPrn = AppInstance.strip(resp, 14) '14n
                LoaDet.AmtOvdCom = AppInstance.strip(resp, 14) '14n
                LoaDet.AmtOvdPrn = AppInstance.strip(resp, 14) '14n
                LoaDet.FinTotCal = AppInstance.strip(resp, 14) '14n
                LoaDet.Rsv20 = AppInstance.strip(resp, 163) '163x
            End If

            count = CType(AppInstance.strip(resp, 4), Integer)
            If count <= 0 Then
                Erase LoaDet.LoaSchDat
                Return True
            End If
            ReDim LoaDet.LoaSchDat(count - 1)
            For i = 0 To LoaDet.LoaSchDat.Length - 1
                With LoaDet.LoaSchDat(i)
                    .SchTyp = AppInstance.strip(resp, 1)
                    .SchNum = AppInstance.strip(resp, 4)
                    .DueGrgDte = AppInstance.strip(resp, 8)
                    .DueHgrDte = AppInstance.strip(resp, 8)
                    .PayGrgDte = AppInstance.strip(resp, 8)
                    .PayHgrDte = AppInstance.strip(resp, 8)
                    .DueAmt = AppInstance.strip(resp, 14)
                    .PayAmt = AppInstance.strip(resp, 14)
                    .RstAmt = AppInstance.strip(resp, 14)
                    .Rsv1 = AppInstance.strip(resp, 21)
                End With
            Next
        Catch ex As Exception
            HandleError(&H80002103, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    ''' Y600KHDA : Modifiy to Accept LAX Data Strcuture for Loan Closure
    Public Function GetMessage_LoanClosure(ByVal MsgId As String, ByRef LoaDet As ExEnumCusDtls_LAX, ByRef ErrNum As String, ByVal EqnAppCde As String, Optional ByRef SupOvrStr As String = Nothing) As Boolean
        'Message:550211

        Dim resp, MsgDump As String
        '''Dim resp As String = String.Empty
        Dim count As Integer
        Dim tmpStr, ItmTyp As String
        Dim i, ln As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow

        'Try to retrieve the message for 3 times
        Dim RetryCount As Integer = AppInstance.MQS.GetRetries
        Do
            resp = AppInstance.MQGetMessage(MsgId)
            RetryCount -= 1
        Loop While (RetryCount > 0) AndAlso (AppInstance.MQS.ErrNum = 2033)

        MsgDump = resp
        If AppInstance.MQS.ErrNum <> 0 Then
            If AppInstance.MQS.ErrNum = 2033 Then 'No message received from host
                HandleError(&H80002001, "GetMessage_TrxReverse:" & AppInstance.MQS.ErrNum & ":" & AppInstance.MQS.ErrDsc)
                MessageBox.Show("The host did not reply in a timely manner." & vbCrLf & _
                                "The result for the transaction is doubtful." & vbCrLf & vbCrLf & _
                                    "Please try to resolve the transaction in the" & vbCrLf & _
                                    "Transaction Resolution panel before" & vbCrLf & _
                                    "performing the transaction again.", "No Response From Host", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            Else
                AppInstance.FormatMQSError("GetMessage_FundxXfr", AppInstance.MQS.ErrNum, AppInstance.MQS.ErrDsc)
            End If
            Return False
        ElseIf resp.Length = 10 Then
            Dim ActCde As String
            Dim ResCde As String
            Dim MsgResInd As String
            ErrNum = resp.Trim
            ResCde = AppInstance.strip(resp, 3)
            ActCde = AppInstance.strip(resp, 2)
            AppInstance.strip(resp, 3)
            AppInstance.strip(resp, 1)
            MsgResInd = AppInstance.strip(resp, 1)
            HandleError(&H81000017, "Message 550211:Rejected, Result Code:" & ResCde & ", Action Code:" & ActCde)

            Dim ErrCde(9) As String
            Dim MQError_Item As ICEI0100.AppInstanceClass.MQError_Item_struct
            If MsgResInd = "S" Then
                MQError_Item = CType(AppInstance.MQErrors.Item(MsgId), ICEI0100.AppInstanceClass.MQError_Item_struct)
            End If
            Dim st As String
            If (ActCde.Trim = "16") AndAlso (MsgResInd = "S") AndAlso (Not MQError_Item.ErrStr Is Nothing) AndAlso (MQError_Item.ErrStr <> "") Then
                st = MQError_Item.ErrStr
                Dim idx As Integer

                strip(st, 5) 'ErrBlkMrk	5x	Constant “<ERR>” Error block marker
                strip(st, 3) 'ErrBlkTyp	3x	Constant “<S>” Error block type
                'ErrTxtStd	Varies	Minimum 128, maximum 1728, typical 428
                'ErrChn001	31x	Channel dependent data
                For idx = 0 To 9  'RefReaCde[10]	10*3x	•	Reason codes or spaces
                    ErrCde(idx) = strip(st, 3)
                Next
                If strip(st, 1) = "+" Then 'RefReaOvf	1x	•	Overflow flag set to “+” if more than 10 reasons, otherwise space
                    st = "There are more than 10 overridable conditions returned for this transaction." & vbCrLf & _
                        "The first 10 conditions are listed below:" & vbCrLf & vbCrLf
                Else
                    st = "The following overridable conditions were returned for this transaction:" & vbCrLf & vbCrLf
                End If
                'ErrTxtLng	2x	Language of the error text (“EN” = English, “AR”=Arabic)
                'ErrTxtStp	14x	Date and time generated (YYYYMMDDhhmmss)
                'Rsv2	76x	Reserved, space filled
                'ErrChrSet	1x	Flag (Y/N) if the error text contains any Arabic characters
                'ErrtxtItm	Varies	Error text item
                'ErrTxtLen	4n	•	Number of data bytes in the following text (max 1600)
                'ErrTxtDat	Varies	•	Error text (may contain embedded newlines)
                For idx = 0 To 9
                    If ErrCde(idx).Trim = "" Then Exit For
                    Dim CdeIdx As Integer = LocateResCde(ErrCde(idx))
                    If CdeIdx < 0 Then
                        st &= "* " & ErrCde(idx) & vbCrLf
                    Else
                        st &= "* " & ErrCde(idx) & ": " & ResCdeTable(CdeIdx).IntResEng.Trim & vbCrLf
                    End If
                Next
                If Not (SupOvrStr Is Nothing) Then SupOvrStr = st
                st &= vbCrLf & "Press on the Supervisor button for authorization."
                ModalMessageBox(st, MessageBoxButtons.OK, , MessageBoxIcon.Exclamation, "Supervisor Authority Needed")
            ElseIf (ActCde.Trim = "16") Then
                Dim ReaTxt As String
                Dim idx As Integer = LocateResCde(ResCde)
                If idx < 0 Then
                    ReaTxt = ResCde
                Else
                    ReaTxt = ResCde & ": " & ResCdeTable(idx).IntResEng.Trim
                End If

                st = "This transaction needs authorization by a supervisor." & vbCrLf & vbCrLf & _
                                "The reason for authorization is:" & vbCrLf & _
                                "[" & ReaTxt & "]" & vbCrLf
                If Not (SupOvrStr Is Nothing) Then SupOvrStr = st

                MessageBox.Show(st & vbCrLf & "Press the Supervisor button for authorization.", "Supervisor Authority Needed", _
                                MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            Else
                AppInstance.ShowHostError("550211", MsgId, ResCde, ActCde)
            End If
            Return False
        End If


        '''If Not (GetMessage_Common("550211", "", MsgId, &H80002102, resp)) Then Return False


        Try
            AppInstance.strip(resp, 256)    'Header
            AppInstance.strip(resp, 145)    'Response Data
            'Loan Data
            With LoaDet.LAIdat
                .ItmTyp = AppInstance.strip(resp, 3) '3x
                .ObjCcy = AppInstance.strip(resp, 3) '3x
                .ObjTypCde = AppInstance.strip(resp, 3) '3x
                .ObjStaCde = AppInstance.strip(resp, 1) '1x
                .ObjKey = AppInstance.strip(resp, 20) '20x
                .ObjGrgOpnDte = AppInstance.strip(resp, 8) '8n
                .ObjHgrOpnDte = AppInstance.strip(resp, 8) '8n
                .ObjGrgClsDte = AppInstance.strip(resp, 8) '8n
                .ObjHgrClsDte = AppInstance.strip(resp, 8) '8n
                .ObjGrgPayDte = AppInstance.strip(resp, 8) '8n
                .ObjHgrPayDte = AppInstance.strip(resp, 8) '8n
                .ObjComRte = AppInstance.strip(resp, 12) '5n7n
                .ObjPrnAmt = AppInstance.strip(resp, 14) '14n
                .ObjDueAmt = AppInstance.strip(resp, 14) '14n
                .ObjRelObj = AppInstance.strip(resp, 13) '13x
                .ObjRstAmt = AppInstance.strip(resp, 14) '14n
                .ObjOvrDue = AppInstance.strip(resp, 14) '14n
                .ObjAccOff = AppInstance.strip(resp, 22) '22x
                .Rsv19 = AppInstance.strip(resp, 19) '19x
            End With

            'LAX Structure
            If EqnAppCde = "RL" Then
                LoaDet.PrnAmtRem = AppInstance.strip(resp, 14) '14n
                LoaDet.ComAmtAcc = AppInstance.strip(resp, 14) '14n
                LoaDet.ComDayGon = AppInstance.strip(resp, 2) '2n
                LoaDet.PenRatPct = AppInstance.strip(resp, 9) '2n7n
                LoaDet.PenFeeAmt = AppInstance.strip(resp, 14) '14n
                LoaDet.PenpayOff = AppInstance.strip(resp, 14) '14n
                LoaDet.PenOvdCom = AppInstance.strip(resp, 14) '14n
                LoaDet.PenOvdPrn = AppInstance.strip(resp, 14) '14n
                LoaDet.AmtOvdCom = AppInstance.strip(resp, 14) '14n
                LoaDet.AmtOvdPrn = AppInstance.strip(resp, 14) '14n
                LoaDet.FinTotCal = AppInstance.strip(resp, 14) '14n
                LoaDet.Rsv20 = AppInstance.strip(resp, 163) '163x
            End If

            'count = CType(AppInstance.strip(resp, 4), Integer)
            'If count <= 0 Then
            '    Erase LoaDet.LoaSchDat
            '    Return True
            'End If
            'ReDim LoaDet.LoaSchDat(count - 1)
            'For i = 0 To LoaDet.LoaSchDat.Length - 1
            '    With LoaDet.LoaSchDat(i)
            '        .SchTyp = AppInstance.strip(resp, 1)
            '        .SchNum = AppInstance.strip(resp, 4)
            '        .DueGrgDte = AppInstance.strip(resp, 8)
            '        .DueHgrDte = AppInstance.strip(resp, 8)
            '        .PayGrgDte = AppInstance.strip(resp, 8)
            '        .PayHgrDte = AppInstance.strip(resp, 8)
            '        .DueAmt = AppInstance.strip(resp, 14)
            '        .PayAmt = AppInstance.strip(resp, 14)
            '        .RstAmt = AppInstance.strip(resp, 14)
            '        .Rsv1 = AppInstance.strip(resp, 21)
            '    End With
            'Next
        Catch ex As Exception
            HandleError(&H80002103, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_EnumAtmCrds(ByVal MsgId As String, ByRef lAtmDat As AtmDat_Struct) As Boolean
        '990130
        Dim resp As String = String.Empty
        Dim tmpStr, ItmTyp As String
        Dim i, count, ln As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow


        If Not (GetMessage_Common("990130", "", MsgId, &H80002068, resp)) Then Return False

        Try
            AppInstance.strip(resp, 256) 'Header
            AppInstance.strip(resp, 6) 'CusNum
            AppInstance.strip(resp, 1) 'AccFlg
            AppInstance.strip(resp, 13) 'AccNum
            AppInstance.strip(resp, 1) 'CrdFlg
            AppInstance.strip(resp, 18) 'CrdNum
            AppInstance.strip(resp, 5)  'CrdSta
            With lAtmDat
                .ItmNum = AppInstance.strip(resp, 4)
                count = CType(.ItmNum, Integer)
                If count <= 0 Then
                    Erase .CrdItm
                    Return True
                End If
                ReDim .CrdItm(count - 1)
                For i = 0 To .CrdItm.Length - 1
                    With .CrdItm(i)
                        .CrdPan = AppInstance.strip(resp, 18)
                        .CrdSta = AppInstance.strip(resp, 2)
                        .CrdExpDte = AppInstance.strip(resp, 5)
                        .CrdFlg = AppInstance.strip(resp, 1)
                        .CrdEmbNam = AppInstance.strip(resp, 30)
                        .CamAdd1 = AppInstance.strip(resp, 30)
                        .CamAdd2 = AppInstance.strip(resp, 30)
                        .CamCty = AppInstance.strip(resp, 24)
                        .CamLnd = AppInstance.strip(resp, 15)
                        .CamTel = AppInstance.strip(resp, 10)
                        .CrdAccNum = AppInstance.strip(resp, 13)
                        .CrdLngCde = AppInstance.strip(resp, 1)
                        .CrdBrnCde = AppInstance.strip(resp, 4)
                        .FinDatFlg = AppInstance.strip(resp, 1)
                        .LstActDte = AppInstance.strip(resp, 8)
                        .LstActTme = AppInstance.strip(resp, 6)
                        .On2TrxCde = AppInstance.strip(resp, 4)
                        .On2TrxCcy = AppInstance.strip(resp, 3)
                        .On2TrxAmt = AppInstance.strip(resp, 14)
                    End With
                Next
            End With

        Catch ex As Exception
            HandleError(&H80002069, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_GetAccDtlEx(ByVal MsgId As String, ByRef AccDtlEx As AccDtlEx_Struct) As Boolean
        'Message:990200
        Dim resp As String = String.Empty
        Dim CusNum As String
        Dim CusID As String
        Dim Acc As ExEnumCusDtls_ACC
        If Not (GetMessage_Common("990200", "", MsgId, &H81000137, resp)) Then Return False

        AppInstance.strip(resp, 256)
        AppInstance.strip(resp, 96) 'Echoed data
        AccDtlEx.ReadTable(resp)
        Return True
    End Function

    Public Function GetMessage_GetInternalAccDtl(ByVal MsgId As String, ByRef AccDtlEx As AccIntDtl_Struct) As Boolean
        'Message:990200
        Dim resp As String = String.Empty
        Dim CusNum As String
        Dim CusID As String
        'Dim Acc As ExEnumCusDtls_ACC
        If Not (GetMessage_Common("990600", "", MsgId, &H81000137, resp)) Then Return False

        AppInstance.strip(resp, 256)
        AccDtlEx.ReadTable(resp)
        If AccDtlEx.ItmCnt = 0 Then Return False
        Return True
    End Function
    Public Function GetMessage_EnumAtmCrdsEx(ByVal MsgId As String, ByRef lAtmDatEx As AtmDatEx_Struct) As Boolean
        '990330
        Dim resp As String = String.Empty
        Dim tmpStr, ItmTyp As String
        Dim i, count, ln As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow


        If Not (GetMessage_Common("990330", "", MsgId, &H80002068, resp)) Then Return False

        Try
            AppInstance.strip(resp, 256) 'Header
            AppInstance.strip(resp, 6) 'CusNum
            AppInstance.strip(resp, 1) 'AccFlg
            AppInstance.strip(resp, 13) 'AccNum
            AppInstance.strip(resp, 1) 'CrdFlg
            AppInstance.strip(resp, 18) 'CrdNum
            AppInstance.strip(resp, 64) 'Rsv1
            AppInstance.strip(resp, 64) 'Rsv2
            AppInstance.strip(resp, 5)  'CrdSta
            With lAtmDatEx
                .ItmNum = AppInstance.strip(resp, 4)
                count = CType(.ItmNum, Integer)
                If count <= 0 Then
                    Erase .CrdItmEx
                    Return True
                End If
                ReDim .CrdItmEx(count - 1)
                For i = 0 To .CrdItmEx.Length - 1
                    With .CrdItmEx(i)
                        .CrdPan = AppInstance.strip(resp, 18)
                        .CrdSta = AppInstance.strip(resp, 2)
                        .CrdExpDte = AppInstance.strip(resp, 5)
                        .CrdFlg = AppInstance.strip(resp, 1)
                        .CrdEmbNam = AppInstance.strip(resp, 30)
                        .CamAdd1 = AppInstance.strip(resp, 30)
                        .CamAdd2 = AppInstance.strip(resp, 30)
                        .CamCty = AppInstance.strip(resp, 24)
                        .CamLnd = AppInstance.strip(resp, 15)
                        .CamTel = AppInstance.strip(resp, 10)
                        .CrdAccNum = AppInstance.strip(resp, 13)
                        .CrdLngCde = AppInstance.strip(resp, 1)
                        .CrdBrnCde = AppInstance.strip(resp, 4)
                        .FinDatFlg = AppInstance.strip(resp, 1)
                        .LstActDte = AppInstance.strip(resp, 8)
                        .LstActTme = AppInstance.strip(resp, 6)
                        .On2TrxCde = AppInstance.strip(resp, 4)
                        .On2TrxCcy = AppInstance.strip(resp, 3)
                        .On2TrxAmt = AppInstance.strip(resp, 14)
                        .On2PinDte = AppInstance.strip(resp, 8)
                        .On2PinErr = AppInstance.strip(resp, 1)
                        .CrdIssCur = AppInstance.strip(resp, 8)
                        With .On2TrxDat
                            .P7TrxDte = AppInstance.strip(resp, 8)
                            .P7TrxTme = AppInstance.strip(resp, 6)
                            .P13LocDte = AppInstance.strip(resp, 8)
                            .P12LocTme = AppInstance.strip(resp, 6)
                            .On2TrxCde = AppInstance.strip(resp, 4)
                            .P39RspCde = AppInstance.strip(resp, 3)
                            .P49Ccy = AppInstance.strip(resp, 3)
                            .P4Amt = AppInstance.strip(resp, 14)
                            .On2AcqCde = AppInstance.strip(resp, 4)
                            .On2AcqTyp = AppInstance.strip(resp, 3)
                            .P32Acq = AppInstance.strip(resp, 11)
                            .P41TrmIde = AppInstance.strip(resp, 16)
                            .P47RetIde = AppInstance.strip(resp, 12)
                            .P5Amt = AppInstance.strip(resp, 14)
                            .On2Rsv1 = AppInstance.strip(resp, 8)
                        End With
                        .On2CrdCls = AppInstance.strip(resp, 2)
                        .CrdTkn = AppInstance.strip(resp, 18)
                        .Rsv33 = AppInstance.strip(resp, 8)

                    End With
                Next
            End With

        Catch ex As Exception
            HandleError(&H80002069, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_EnumTemplates(ByVal MsgId As String, ByRef lTmpDat() As TmpDat_Struct) As Boolean
        '990140
        Dim resp As String = String.Empty
        Dim tmpStr, ItmTyp As String
        Dim i, count, ln As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow


        If Not (GetMessage_Common("990260", "", MsgId, &H80002070, resp)) Then Return False

        Try
            AppInstance.strip(resp, 256) 'Header
            AppInstance.strip(resp, 6) 'CusNum
            AppInstance.strip(resp, 97) 'TmpFlt
            With lTmpDat
                count = CInt(AppInstance.strip(resp, 4))
                If count <= 0 Then
                    Erase lTmpDat
                    Return True
                End If
                ReDim lTmpDat(count - 1)
                For i = 0 To lTmpDat.Length - 1
                    With lTmpDat(i)
                        .CusNum = AppInstance.strip(resp, 6) '6n
                        .IBKCrpIde = AppInstance.strip(resp, 10) '10x
                        .IBKUsrIde = AppInstance.strip(resp, 10) '10x
                        .TrgTyp = AppInstance.strip(resp, 6) '6x
                        'TmpIde(87)
                        .TmpIdeNum = AppInstance.strip(resp, 3) '3n
                        .TmpIdeNam = AppInstance.strip(resp, 20) '20x
                        '.IVRWavFle = AppInstance.strip(resp, 64) '64x
                        .AprTmpUsr = AppInstance.strip(resp, 10) '2x
                        .AprTmpStp = AppInstance.strip(resp, 14) '2x
                        .BenRlt = AppInstance.strip(resp, 2) '2x
                        .CusKSAKng = AppInstance.strip(resp, 1) '2x
                        .BenNmeMsk = AppInstance.strip(resp, 35) '2x
                        .Rsv05 = AppInstance.strip(resp, 2) '2x

                        .TmpSta = AppInstance.strip(resp, 1) '1x
                        .TmpSysCre = AppInstance.strip(resp, 3) '3x
                        .TmpStpCre = AppInstance.strip(resp, 14) '14x
                        .TmpUsrCre = AppInstance.strip(resp, 10) '10x
                        .TmpStpMod = AppInstance.strip(resp, 14) '14x
                        .TmpUsrMod = AppInstance.strip(resp, 10) '10x
                        .TmpStpUse = AppInstance.strip(resp, 14) '14x
                        .TmpUsrUse = AppInstance.strip(resp, 10) '10x
                        .DebAccFlg = AppInstance.strip(resp, 1) '1x
                        .DebAccNum = AppInstance.strip(resp, 13) '13n
                        .PayAmtFlg = AppInstance.strip(resp, 1) '1x
                        .PayAmt = AppInstance.strip(resp, 14) '14n
                        .PayCcy = AppInstance.strip(resp, 3) '3x
                        'AwiGrp(182)
                        .AwiBicCde = AppInstance.strip(resp, 11) '11x
                        'AwiNat(25)
                        .AwiNatCde = AppInstance.strip(resp, 2) '2x
                        .AwiNatVal = AppInstance.strip(resp, 15) '15x
                        .AwiBicKey = AppInstance.strip(resp, 8) '8x
                        .AwiChpCde = AppInstance.strip(resp, 6) '6x
                        .AwiNamAdd1 = AppInstance.strip(resp, 35) '4*35x
                        .AwiNamAdd2 = AppInstance.strip(resp, 35)
                        .AwiNamAdd3 = AppInstance.strip(resp, 35)
                        .AwiNamAdd4 = AppInstance.strip(resp, 35)
                        .BenAccNum = AppInstance.strip(resp, 34) '34x
                        .BenNamAdd1 = AppInstance.strip(resp, 35) '4*35x
                        .BenNamAdd2 = AppInstance.strip(resp, 35)
                        .BenNamAdd3 = AppInstance.strip(resp, 35)
                        .BenNamAdd4 = AppInstance.strip(resp, 35)
                        .PayDetFlg = AppInstance.strip(resp, 1) '1x
                        .PayDet1 = AppInstance.strip(resp, 35) '2*35x
                        .PayDet2 = AppInstance.strip(resp, 35)
                        .TelBen = AppInstance.strip(resp, 1) '1x
                        .TelBenNum = AppInstance.strip(resp, 25) '25x
                        .PaySamCde = AppInstance.strip(resp, 2) '2x
                        .RskMgtDat = AppInstance.strip(resp, 60) '60x
                        .SecCcyCde = AppInstance.strip(resp, 3) '3x
                        .DebAccCcy = AppInstance.strip(resp, 3) '3x
                        .TmpAppDat = AppInstance.strip(resp, 20) '20x
                    End With
                Next
            End With

        Catch ex As Exception
            HandleError(&H80002071, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    'Public Function GetMessage_EnumCusDtls(ByVal MsgId As String, ByRef CusDtls As ICEComm.EnumCusDtlsXXXXX) As Boolean
    '    Dim resp As String = String.Empty
    '    Dim tmpStr, ItmTyp As String
    '    Dim i, count, ln As Integer
    '    Dim verRec As CoreSys_VerItm
    '    Dim row As DataRow
    '    Dim CurAcc As String


    '    resp = AppInstance.MQGetMessage(MsgId)
    '    If AppInstance.MQS.ErrNum <> 0 Then
    '        AppInstance.FormatMQSError("GetMessage_EnumCusDtls", AppInstance.MQS.ErrNum, AppInstance.MQS.ErrDsc)
    '        Return False
    '    ElseIf resp.Length = 10 Then
    '        Dim ActCde As String
    '        Dim ResCde As String
    '        ResCde = AppInstance.strip(resp, 3)
    '        ActCde = resp
    '        HandleError(&H80002072, "Message 990150:Rejected, Result Code:" & ResCde & ", Action Code:" & ActCde)
    '        AppInstance.ShowHostError("990150", MsgId, ResCde, ActCde)
    '        Return False
    '    End If
    '    Try
    '        AppInstance.strip(resp, 256)
    '        With CusDtls.CusInf
    '            .CusNum = AppInstance.strip(resp, 6)
    '            .CusNumCnt = AppInstance.strip(resp, 2)
    '            .CusPrfLng = AppInstance.strip(resp, 1)
    '            .CusStaCde = AppInstance.strip(resp, 1)
    '            .CusLevCde = AppInstance.strip(resp, 1)
    '            .CusMchFlg = AppInstance.strip(resp, 1)
    '            .CusNamEng1 = AppInstance.strip(resp, 35)
    '            .CusNamEng2 = AppInstance.strip(resp, 35)
    '            .CusNamEng3 = AppInstance.strip(resp, 35)
    '            .CusNamEng4 = AppInstance.strip(resp, 35)
    '            .CusNamAra1 = AppInstance.strip(resp, 35)
    '            .CusNamAra2 = AppInstance.strip(resp, 35)
    '            .CusNamAra3 = AppInstance.strip(resp, 35)
    '            .CusNamAra4 = AppInstance.strip(resp, 35)
    '        End With
    '        count = CType(AppInstance.strip(resp, 4), Integer)
    '        If count <= 0 Then
    '            Return True
    '        End If
    '        'ReDim CusItm(count - 1)
    '        For i = 0 To count - 1
    '            tmpStr = AppInstance.strip(resp, 157)
    '            ItmTyp = AppInstance.strip(tmpStr, 3)
    '            With CusDtls
    '                Select Case ItmTyp
    '                    Case "ACC"
    '                        If .ACC Is Nothing Then ln = 0 Else ln = .ACC.Length
    '                        ReDim Preserve .ACC(ln)
    '                        .ACC(ln).ItmTyp = ItmTyp
    '                        .ACC(ln).ObjCcy = AppInstance.strip(tmpStr, 3) '3x
    '                        .ACC(ln).ObjAccTyp = AppInstance.strip(tmpStr, 2) '2x
    '                        .ACC(ln).ObjStaCde = AppInstance.strip(tmpStr, 1) '1x
    '                        .ACC(ln).ObjKey = AppInstance.strip(tmpStr, 13) '13x
    '                        .ACC(ln).ObjOpnDte = AppInstance.strip(tmpStr, 8) '8n
    '                        .ACC(ln).ObjStmPrv = AppInstance.strip(tmpStr, 8) '8n
    '                        .ACC(ln).ObjStmNxt = AppInstance.strip(tmpStr, 8) '8n
    '                        .ACC(ln).ObjBalDat = AppInstance.strip(tmpStr, 81) '81x
    '                        .ACC(ln).ObjAccSec = AppInstance.strip(tmpStr, 8) '8x
    '                        .ACC(ln).ObjAccOff = AppInstance.strip(tmpStr, 22) '22x
    '                        'Extra processing to handle when funding account is different than owning account
    '                        CurAcc = .ACC(ln).ObjKey
    '                    Case "TDA"
    '                        If .TDA Is Nothing Then ln = 0 Else ln = .TDA.Length
    '                        ReDim Preserve .TDA(ln)
    '                        .TDA(ln).ItmTyp = ItmTyp
    '                        .TDA(ln).ObjCcy = AppInstance.strip(tmpStr, 3) '3x
    '                        .TDA(ln).ObjTypCde = AppInstance.strip(tmpStr, 3) '3x
    '                        .TDA(ln).ObjStaCde = AppInstance.strip(tmpStr, 1) '1x
    '                        .TDA(ln).ObjKey = AppInstance.strip(tmpStr, 20) '20x
    '                        .TDA(ln).ObjOpnDte = AppInstance.strip(tmpStr, 8) '8n
    '                        .TDA(ln).ObjMatDte = AppInstance.strip(tmpStr, 8) '8n
    '                        .TDA(ln).Rsv1 = AppInstance.strip(tmpStr, 8) '8x
    '                        .TDA(ln).ObjComRte = AppInstance.strip(tmpStr, 12) '5n7n
    '                        .TDA(ln).ObjPrnAmt = AppInstance.strip(tmpStr, 14) '14n
    '                        .TDA(ln).ObjComAmt = AppInstance.strip(tmpStr, 14) '14n
    '                        .TDA(ln).ObjRelObj = AppInstance.strip(tmpStr, 13) '13x
    '                        .TDA(ln).Rsv2 = AppInstance.strip(tmpStr, 28) '28x
    '                        .TDA(ln).ObjAccOff = AppInstance.strip(tmpStr, 22) '22x
    '                        'Extra processing to handle when funding account is different than owning account
    '                        .TDA(ln).XtrFndAcc = .TDA(ln).ObjRelObj
    '                        .TDA(ln).ObjRelObj = CurAcc
    '                    Case "LAA"
    '                        If .LAA Is Nothing Then ln = 0 Else ln = .LAA.Length
    '                        ReDim Preserve .LAA(ln)
    '                        .LAA(ln).ItmTyp = ItmTyp
    '                        .LAA(ln).ObjCcy = AppInstance.strip(tmpStr, 3) '3x
    '                        .LAA(ln).ObjTypCde = AppInstance.strip(tmpStr, 3) '3x
    '                        .LAA(ln).ObjStaCde = AppInstance.strip(tmpStr, 1) '1x
    '                        .LAA(ln).ObjKey = AppInstance.strip(tmpStr, 20) '20x
    '                        .LAA(ln).ObjOpnDte = AppInstance.strip(tmpStr, 8) '8n
    '                        .LAA(ln).ObjClsDte = AppInstance.strip(tmpStr, 8) '8n
    '                        .LAA(ln).ObjPayDte = AppInstance.strip(tmpStr, 8) '8n
    '                        .LAA(ln).ObjComRte = AppInstance.strip(tmpStr, 12) '5n7n
    '                        .LAA(ln).ObjPrnAmt = AppInstance.strip(tmpStr, 14) '14n
    '                        .LAA(ln).ObjDueAmt = AppInstance.strip(tmpStr, 14) '14n
    '                        .LAA(ln).ObjRelObj = AppInstance.strip(tmpStr, 13) '13x
    '                        .LAA(ln).ObjRstAmt = AppInstance.strip(tmpStr, 14) '14n
    '                        .LAA(ln).ObjOvrDue = AppInstance.strip(tmpStr, 14) '14n
    '                        .LAA(ln).ObjAccOff = AppInstance.strip(tmpStr, 22) '22x
    '                        'Extra processing to handle when funding account is different than owning account
    '                        .LAA(ln).XtrFndAcc = .LAA(ln).ObjRelObj
    '                        .LAA(ln).ObjRelObj = CurAcc
    '                    Case "IVR"
    '                        If .IVR Is Nothing Then ln = 0 Else ln = .IVR.Length
    '                        ReDim Preserve .IVR(ln)
    '                        .IVR(ln).ItmTyp = ItmTyp
    '                        .IVR(ln).CorKey = AppInstance.strip(tmpStr, 10) '10x
    '                        .IVR(ln).LocIde = AppInstance.strip(tmpStr, 10) '10x
    '                        .IVR(ln).DepIde = AppInstance.strip(tmpStr, 10) '10x
    '                        .IVR(ln).UsrKey = AppInstance.strip(tmpStr, 10) '10x
    '                        .IVR(ln).UseScp = AppInstance.strip(tmpStr, 1) '1x
    '                        .IVR(ln).UsePatEnq = AppInstance.strip(tmpStr, 1) '1x
    '                        .IVR(ln).UsePatReq = AppInstance.strip(tmpStr, 1) '1x
    '                        .IVR(ln).UsePatExe = AppInstance.strip(tmpStr, 1) '1x
    '                        .IVR(ln).Rsv11 = AppInstance.strip(tmpStr, 25) '25x
    '                        .IVR(ln).ClpAct = AppInstance.strip(tmpStr, 1) '1x
    '                        .IVR(ln).ClpNum = AppInstance.strip(tmpStr, 1) '1n
    '                        .IVR(ln).ClpVal1 = AppInstance.strip(tmpStr, 25) '25x
    '                        .IVR(ln).ClpVal2 = AppInstance.strip(tmpStr, 25) '25x
    '                        .IVR(ln).ClpVal3 = AppInstance.strip(tmpStr, 25) '25x
    '                        .IVR(ln).AutAct = AppInstance.strip(tmpStr, 1) '1x
    '                        .IVR(ln).Rsv10 = AppInstance.strip(tmpStr, 7) '7x
    '                    Case "IBK"
    '                        If .IBK Is Nothing Then ln = 0 Else ln = .IBK.Length
    '                        ReDim Preserve .IBK(ln)
    '                        .IBK(ln).ItmTyp = ItmTyp
    '                        .IBK(ln).CorKey = AppInstance.strip(tmpStr, 10) '10x
    '                        .IBK(ln).LocIde = AppInstance.strip(tmpStr, 10) '10x
    '                        .IBK(ln).DepIde = AppInstance.strip(tmpStr, 10) '10x
    '                        .IBK(ln).UsrKey = AppInstance.strip(tmpStr, 10) '10x
    '                        .IBK(ln).UseScp = AppInstance.strip(tmpStr, 1) '1x
    '                        .IBK(ln).UsePatEnq = AppInstance.strip(tmpStr, 1) '1x
    '                        .IBK(ln).UsePatReq = AppInstance.strip(tmpStr, 1) '1x
    '                        .IBK(ln).UsePatExe = AppInstance.strip(tmpStr, 1) '1x
    '                        .IBK(ln).Rsv10 = AppInstance.strip(tmpStr, 110) '110
    '                End Select
    '            End With
    '        Next
    '    Catch ex As Exception
    '        HandleError(&H80002073, "Error:", "Error", ex)
    '        Return False
    '    End Try
    '    Return True
    'End Function

    Public Function GetMessage_EnumChnGrp(ByVal MsgId As String, ByRef PrmCus As String, ByRef lChnGrpItm() As ChnGrpItm_Struct) As Boolean
        '990210
        Dim resp As String = String.Empty
        Dim tmpStr, ItmTyp As String
        Dim i, count, ln As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow


        If Not (GetMessage_Common("990260", "", MsgId, &H80002070, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256) 'Header
            AppInstance.strip(resp, 6) 'CusNum
            PrmCus = AppInstance.strip(resp, 6) 'CusNumPrm
            AppInstance.strip(resp, 30) 'Rsv1
            With lChnGrpItm
                count = CInt(AppInstance.strip(resp, 2))
                If count <= 0 Then
                    Erase lChnGrpItm
                    Return True
                End If
                ReDim lChnGrpItm(count - 1)
                For i = 0 To lChnGrpItm.Length - 1
                    With lChnGrpItm(i)
                        .CusNumSec = AppInstance.strip(resp, 6)
                        .CusTyp = AppInstance.strip(resp, 2)
                        .CusPrfLng = AppInstance.strip(resp, 1)
                        .CusStaCde = AppInstance.strip(resp, 1)
                        .CusLevCde = AppInstance.strip(resp, 1)
                        .CidDoc = AppInstance.strip(resp, 2)
                        .CidNat = AppInstance.strip(resp, 2)
                        .CidVal = AppInstance.strip(resp, 10)
                        .CusNamEng = AppInstance.strip(resp, 35)
                        .CusNamAra = AppInstance.strip(resp, 35)
                        .CusSeg = AppInstance.strip(resp, 3)
                        .Rsv3 = AppInstance.strip(resp, 32)
                    End With
                Next
            End With

        Catch ex As Exception
            HandleError(&H80002117, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_EnumCusDtlsEx(ByVal MsgId As String, ByRef CusDtls As ICEComm.EnumCusDtls_Ex) As Boolean
        '990250
        Dim resp As String = String.Empty
        Dim tmpStr, ItmTyp As String
        Dim i, count, ln As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow
        Dim CurAcc As String


        If Not (GetMessage_Common("990250", "", MsgId, &H80002107, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            With CusDtls.CusInf
                .CusNum = AppInstance.strip(resp, 6)
                .CusNumCnt = AppInstance.strip(resp, 2)
                .CusPrfLng = AppInstance.strip(resp, 1)
                .CusStaCde = AppInstance.strip(resp, 1)
                .CusLevCde = AppInstance.strip(resp, 1)
                .CusMchFlg = AppInstance.strip(resp, 1)
                .CusNamEng1 = AppInstance.strip(resp, 35)
                .CusNamEng2 = AppInstance.strip(resp, 35)
                .CusNamEng3 = AppInstance.strip(resp, 35)
                .CusNamEng4 = AppInstance.strip(resp, 35)
                .CusNamAra1 = AppInstance.strip(resp, 35)
                .CusNamAra2 = AppInstance.strip(resp, 35)
                .CusNamAra3 = AppInstance.strip(resp, 35)
                .CusNamAra4 = AppInstance.strip(resp, 35)
                .CusWveIst = AppInstance.strip(resp, 1)
                .CusSeg = AppInstance.strip(resp, 3)
                .CusCanTrd = AppInstance.strip(resp, 1)
                .DefCanTrd = AppInstance.strip(resp, 1)
                .CusWveOn2 = AppInstance.strip(resp, 1)
                .SmsWveMbk = AppInstance.strip(resp, 1)
                .SmsWveAlt = AppInstance.strip(resp, 1)
                .EmlWveAlt = AppInstance.strip(resp, 1)
                .CusUseSer = AppInstance.strip(resp, 1)
                .CusCanIpo = AppInstance.strip(resp, 1)
                .CusDebAcc = AppInstance.strip(resp, 1)
                .CusDebSar = AppInstance.strip(resp, 1)
                .CusCanSms = AppInstance.strip(resp, 1)
                .CusCanAlt = AppInstance.strip(resp, 1)
                .CusYeeFlg = AppInstance.strip(resp, 1)
                .YeeIde = AppInstance.strip(resp, 4)
                .YeeNetSrc = AppInstance.strip(resp, 4)
                .YeeNetIde = AppInstance.strip(resp, 10)
                .YeeIntEml = AppInstance.strip(resp, 1)
                .YeeExtEml = AppInstance.strip(resp, 1)

                .CusRegSms = AppInstance.strip(resp, 1)
                .CusRegAlt = AppInstance.strip(resp, 1)
                .ChnAltAct = AppInstance.strip(resp, 1)
                .ChnAltDiv = AppInstance.strip(resp, 2)
                .CusSnsLev = AppInstance.strip(resp, 1)
                .CusRetRnk = AppInstance.strip(resp, 1)

                'PrfEqnDat 23
                .PrfEqnFlg = AppInstance.strip(resp, 1)
                .PrfCurSta = AppInstance.strip(resp, 2)
                .PrfCurDte = AppInstance.strip(resp, 8)
                .PrfPrvSta = AppInstance.strip(resp, 2)
                .PrfMaxDte = AppInstance.strip(resp, 8)
                .PrfMaxSta = AppInstance.strip(resp, 2)
                .CusRskCde = AppInstance.strip(resp, 3)
                .CusPEPCde = AppInstance.strip(resp, 3)

                .CusOpics = AppInstance.strip(resp, 1)
                .CusAnaCde = AppInstance.strip(resp, 2)
                .CusSndCde = AppInstance.strip(resp, 2)
                .CusCanPyr = AppInstance.strip(resp, 1)
                .CusCanSeg = AppInstance.strip(resp, 3)
                .Rsv4 = AppInstance.strip(resp, 34)

                .SagAllCnt = AppInstance.strip(resp, 3)
                .SagOpnCnt = AppInstance.strip(resp, 3)
                .SagBnkTak = AppInstance.strip(resp, 1)

                .CidExpDte = AppInstance.strip(resp, 8)
                '.SysCfgDat = AppInstance.strip(resp, 32)
                .SysCfgDat = New SysCfgDat_Class
                .SysCfgDat.ReadTable(resp)

                .AmcAccFlg = AppInstance.strip(resp, 1)
                .AmcAccStp = AppInstance.strip(resp, 14)
                .CidDoc = AppInstance.strip(resp, 2)
                .CidNat = AppInstance.strip(resp, 2)
                .CidVal = AppInstance.strip(resp, 10)
                .BrcAccFlg = AppInstance.strip(resp, 1)
                .BrcAccStp = AppInstance.strip(resp, 14)
                .CidErrCde = AppInstance.strip(resp, 3)
                .StmSupFlg = AppInstance.strip(resp, 1)
                .RifLnkDwn = AppInstance.strip(resp, 1)
                .StmSupRea = AppInstance.strip(resp, 2)
                .Rsv5 = AppInstance.strip(resp, 3)
            End With

            count = CType(AppInstance.strip(resp, 3), Integer)
            If count <= 0 Then
                Return True
            End If
            'ReDim CusItm(count - 1)
            For i = 0 To count - 1
                tmpStr = AppInstance.strip(resp, 300)
                ItmTyp = AppInstance.strip(tmpStr, 3)
                With CusDtls
                    Select Case ItmTyp
                        Case "GRP"
                            With .GRP
                                .ItmTyp = ItmTyp
                                .GrpTyp = AppInstance.strip(tmpStr, 8)
                                .CusPrmSec = AppInstance.strip(tmpStr, 6)
                                .CusNumPrm = AppInstance.strip(tmpStr, 6)
                                .CusCnt = AppInstance.strip(tmpStr, 2)
                                ReDim .CusNumSec(42)
                                For GrpCnt As Integer = 0 To 42
                                    .CusNumSec(GrpCnt) = AppInstance.strip(tmpStr, 6)
                                Next
                                .Rsv1 = AppInstance.strip(tmpStr, 95)
                            End With
                        Case "RNK"
                            With .RNK
                                .ItmTyp = ItmTyp
                                .AutRnkDat.ReadTable(tmpStr)
                                .ManRnkDat.ReadTable(tmpStr)
                                .Rsv2 = AppInstance.strip(tmpStr, 100)
                            End With
                        Case "CSX"
                            With .CSX
                                .Reset()
                                .ItmTyp = ItmTyp
                                .EmlCnt = AppInstance.strip(tmpStr, 1) '1n
                                .MobCnt = AppInstance.strip(tmpStr, 1) '1n
                                .MobTel(0).Tel = AppInstance.strip(tmpStr, 25) '3*25x
                                .MobTel(1).Tel = AppInstance.strip(tmpStr, 25) '3*25x
                                .MobTel(2).Tel = AppInstance.strip(tmpStr, 25) '3*25x
                                .EmlAdr(0).Eml = AppInstance.strip(tmpStr, 50) '2*50x
                                .EmlAdr(1).Eml = AppInstance.strip(tmpStr, 50) '2*50x
                                .MobTel(0).Typ = AppInstance.strip(tmpStr, 1) '3*1x
                                .MobTel(1).Typ = AppInstance.strip(tmpStr, 1) '3*1x
                                .MobTel(2).Typ = AppInstance.strip(tmpStr, 1) '3*1x
                                .EmlAdr(0).Typ = AppInstance.strip(tmpStr, 1) '2*1x
                                .EmlAdr(1).Typ = AppInstance.strip(tmpStr, 1) '2*1x
                                .Rsv1 = AppInstance.strip(tmpStr, 115) '115x
                            End With
                        Case "ACC"
                            If .ACC Is Nothing Then ln = 0 Else ln = .ACC.Length
                            ReDim Preserve .ACC(ln)
                            .ACC(ln).ItmTyp = ItmTyp
                            .ACC(ln).ObjCcy = AppInstance.strip(tmpStr, 3) '3x
                            .ACC(ln).ObjAccTyp = AppInstance.strip(tmpStr, 2) '2x
                            .ACC(ln).ObjStaCde = AppInstance.strip(tmpStr, 1) '1x
                            .ACC(ln).ObjKey = AppInstance.strip(tmpStr, 13) '13x
                            .ACC(ln).ObjOpnDte = AppInstance.strip(tmpStr, 8) '8n
                            .ACC(ln).ObjStmPrv = AppInstance.strip(tmpStr, 8) '8n
                            .ACC(ln).ObjStmNxt = AppInstance.strip(tmpStr, 8) '8n
                            With .ACC(ln).ObjBalDat 'AppInstance.strip(tmpStr, 81) 'BalDat
                                .BalAvl = AppInstance.strip(tmpStr, 15)
                                .BalHld = AppInstance.strip(tmpStr, 14)
                                .BalClr = AppInstance.strip(tmpStr, 15)
                                .BalLdg = AppInstance.strip(tmpStr, 15)
                                .OvdLim = AppInstance.strip(tmpStr, 14)
                                .OvdExp = AppInstance.strip(tmpStr, 8)
                            End With
                            .ACC(ln).ObjAccSec = AppInstance.strip(tmpStr, 8) '8x
                            .ACC(ln).ObjAccOff = AppInstance.strip(tmpStr, 22) '22x
                            .ACC(ln).TabRowVer = AppInstance.strip(tmpStr, 12)

                            .ACC(ln).ChgSee1 = AppInstance.strip(tmpStr, 1)
                            .ACC(ln).CanSee1 = AppInstance.strip(tmpStr, 1)
                            .ACC(ln).ChgTrx1 = AppInstance.strip(tmpStr, 1)
                            .ACC(ln).CanTrx1 = AppInstance.strip(tmpStr, 1)
                            .ACC(ln).Rsv23_1 = AppInstance.strip(tmpStr, 6)
                            .ACC(ln).DepPatEnq1 = AppInstance.strip(tmpStr, 1)
                            .ACC(ln).DepPatReq1 = AppInstance.strip(tmpStr, 1)
                            .ACC(ln).DepPatExe1 = AppInstance.strip(tmpStr, 1)
                            .ACC(ln).DepAccDeb1 = AppInstance.strip(tmpStr, 1)
                            .ACC(ln).DepAccCrd1 = AppInstance.strip(tmpStr, 1)
                            .ACC(ln).DepAccDea1 = AppInstance.strip(tmpStr, 1)

                            .ACC(ln).ChgSee2 = AppInstance.strip(tmpStr, 1)
                            .ACC(ln).CanSee2 = AppInstance.strip(tmpStr, 1)
                            .ACC(ln).ChgTrx2 = AppInstance.strip(tmpStr, 1)
                            .ACC(ln).CanTrx2 = AppInstance.strip(tmpStr, 1)
                            .ACC(ln).Rsv23_2 = AppInstance.strip(tmpStr, 6)
                            .ACC(ln).DepPatEnq2 = AppInstance.strip(tmpStr, 1)
                            .ACC(ln).DepPatReq2 = AppInstance.strip(tmpStr, 1)
                            .ACC(ln).DepPatExe2 = AppInstance.strip(tmpStr, 1)
                            .ACC(ln).DepAccDeb2 = AppInstance.strip(tmpStr, 1)
                            .ACC(ln).DepAccCrd2 = AppInstance.strip(tmpStr, 1)
                            .ACC(ln).DepAccDea2 = AppInstance.strip(tmpStr, 1)

                            .ACC(ln).ChgSee3 = AppInstance.strip(tmpStr, 1)
                            .ACC(ln).CanSee3 = AppInstance.strip(tmpStr, 1)
                            .ACC(ln).ChgTrx3 = AppInstance.strip(tmpStr, 1)
                            .ACC(ln).CanTrx3 = AppInstance.strip(tmpStr, 1)
                            .ACC(ln).Rsv23_3 = AppInstance.strip(tmpStr, 6)
                            .ACC(ln).DepPatEnq3 = AppInstance.strip(tmpStr, 1)
                            .ACC(ln).DepPatReq3 = AppInstance.strip(tmpStr, 1)
                            .ACC(ln).DepPatExe3 = AppInstance.strip(tmpStr, 1)
                            .ACC(ln).DepAccDeb3 = AppInstance.strip(tmpStr, 1)
                            .ACC(ln).DepAccCrd3 = AppInstance.strip(tmpStr, 1)
                            .ACC(ln).DepAccDea3 = AppInstance.strip(tmpStr, 1)

                            .ACC(ln).CrpDepIde = AppInstance.strip(tmpStr, 10)
                            .ACC(ln).SibCanSee = AppInstance.strip(tmpStr, 1)
                            .ACC(ln).SibCanCre = AppInstance.strip(tmpStr, 1)
                            .ACC(ln).SibCanDeb = AppInstance.strip(tmpStr, 1)
                            .ACC(ln).HijOpnDte = AppInstance.strip(tmpStr, 8)
                            .ACC(ln).HijStmPrv = AppInstance.strip(tmpStr, 8)
                            .ACC(ln).HijStmNxt = AppInstance.strip(tmpStr, 8)
                            .ACC(ln).ClsReaCde = AppInstance.strip(tmpStr, 2)
                            .ACC(ln).FlgDecLiq = AppInstance.strip(tmpStr, 1)
                            .ACC(ln).IbnPfx = AppInstance.strip(tmpStr, 8)
                            .ACC(ln).StmSupFlg = AppInstance.strip(tmpStr, 1)
                            .ACC(ln).AccStmFrq = AppInstance.strip(tmpStr, 2)
                            .ACC(ln).StmSupRea = AppInstance.strip(tmpStr, 2)
                            .ACC(ln).Rsv24 = AppInstance.strip(tmpStr, 30)
                            'Extra processing to handle when funding account is different than owning account
                            CurAcc = .ACC(ln).ObjKey
                        Case "TDA"
                            If .TDA Is Nothing Then ln = 0 Else ln = .TDA.Length
                            ReDim Preserve .TDA(ln)
                            .TDA(ln).ItmTyp = ItmTyp
                            .TDA(ln).ObjCcy = AppInstance.strip(tmpStr, 3) '3x
                            .TDA(ln).ObjTypCde = AppInstance.strip(tmpStr, 3) '3x
                            .TDA(ln).ObjStaCde = AppInstance.strip(tmpStr, 1) '1x
                            .TDA(ln).ObjKey = AppInstance.strip(tmpStr, 20) '20x
                            .TDA(ln).ObjOpnDte = AppInstance.strip(tmpStr, 8) '8n
                            .TDA(ln).ObjMatDte = AppInstance.strip(tmpStr, 8) '8n
                            .TDA(ln).Rsv1 = AppInstance.strip(tmpStr, 8) '8x
                            .TDA(ln).ObjComRte = AppInstance.strip(tmpStr, 12) '5n7n
                            .TDA(ln).ObjPrnAmt = AppInstance.strip(tmpStr, 14) '14n
                            .TDA(ln).ObjComAmt = AppInstance.strip(tmpStr, 14) '14n
                            .TDA(ln).ObjRelObj = AppInstance.strip(tmpStr, 13) '13x
                            .TDA(ln).Rsv2 = AppInstance.strip(tmpStr, 28) '28x
                            .TDA(ln).ObjAccOff = AppInstance.strip(tmpStr, 22) '22x
                            'Extra processing to handle when funding account is different than owning account
                            .TDA(ln).XtrFndAcc = .TDA(ln).ObjRelObj
                            .TDA(ln).ObjRelObj = CurAcc
                        Case "LAA"
                            If .LAA Is Nothing Then ln = 0 Else ln = .LAA.Length
                            ReDim Preserve .LAA(ln)
                            .LAA(ln).ItmTyp = ItmTyp
                            .LAA(ln).ObjCcy = AppInstance.strip(tmpStr, 3) '3x
                            .LAA(ln).ObjTypCde = AppInstance.strip(tmpStr, 3) '3x
                            .LAA(ln).ObjStaCde = AppInstance.strip(tmpStr, 1) '1x
                            .LAA(ln).ObjKey = AppInstance.strip(tmpStr, 20) '20x
                            .LAA(ln).ObjOpnDte = AppInstance.strip(tmpStr, 8) '8n
                            .LAA(ln).ObjClsDte = AppInstance.strip(tmpStr, 8) '8n
                            .LAA(ln).ObjPayDte = AppInstance.strip(tmpStr, 8) '8n
                            .LAA(ln).ObjComRte = AppInstance.strip(tmpStr, 12) '5n7n
                            .LAA(ln).ObjPrnAmt = AppInstance.strip(tmpStr, 14) '14n
                            .LAA(ln).ObjDueAmt = AppInstance.strip(tmpStr, 14) '14n
                            .LAA(ln).ObjRelObj = AppInstance.strip(tmpStr, 13) '13x
                            .LAA(ln).ObjRstAmt = AppInstance.strip(tmpStr, 14) '14n
                            .LAA(ln).ObjOvrDue = AppInstance.strip(tmpStr, 14) '14n
                            .LAA(ln).ObjAccOff = AppInstance.strip(tmpStr, 22) '22x
                            '--------ExtRsp------------
                            .LAA(ln).HijOpnDte = AppInstance.strip(tmpStr, 8) '8n
                            .LAA(ln).HijMatDte = AppInstance.strip(tmpStr, 8) '8n
                            .LAA(ln).HijPayDte = AppInstance.strip(tmpStr, 8) '8n
                            .LAA(ln).PrnAmtRem = AppInstance.strip(tmpStr, 14) '14n
                            .LAA(ln).ComAmtAcc = AppInstance.strip(tmpStr, 14) '14n
                            .LAA(ln).ComRatPct = AppInstance.strip(tmpStr, 9) '2n7n
                            .LAA(ln).ComDayGon = AppInstance.strip(tmpStr, 2) '2n
                            .LAA(ln).EqnAppCde = AppInstance.strip(tmpStr, 2)   '2x
                            '''Y600KHDA [28/02/2010]: Loan Performance
                            .LAA(ln).PrfCurSta = AppInstance.strip(tmpStr, 2)   '2x
                            .LAA(ln).PrfCurDte = AppInstance.strip(tmpStr, 8)    '8x
                            .LAA(ln).PrfManFlg = AppInstance.strip(tmpStr, 1)    '1x
                            .LAA(ln).LoaApr = AppInstance.strip(tmpStr, 7)    '2n5n
                            .LAA(ln).Rsv24 = AppInstance.strip(tmpStr, 60)    '60x

                            'Extra processing to handle when funding account is different than owning account
                            .LAA(ln).XtrFndAcc = .LAA(ln).ObjRelObj
                            .LAA(ln).ObjRelObj = CurAcc
                        Case "IVR"
                            If .IVR Is Nothing Then ln = 0 Else ln = .IVR.Length
                            ReDim Preserve .IVR(ln)
                            .IVR(ln).ItmTyp = ItmTyp
                            .IVR(ln).CorKey = AppInstance.strip(tmpStr, 10) '10x
                            .IVR(ln).LocIde = AppInstance.strip(tmpStr, 10) '10x
                            .IVR(ln).DepIde = AppInstance.strip(tmpStr, 10) '10x
                            .IVR(ln).UsrKey = AppInstance.strip(tmpStr, 10) '10x
                            .IVR(ln).UseScp = AppInstance.strip(tmpStr, 1) '1x
                            .IVR(ln).UsePatEnq = AppInstance.strip(tmpStr, 1) '1x
                            .IVR(ln).UsePatReq = AppInstance.strip(tmpStr, 1) '1x
                            .IVR(ln).UsePatExe = AppInstance.strip(tmpStr, 1) '1x
                            .IVR(ln).Rsv11 = AppInstance.strip(tmpStr, 25) '25x
                            .IVR(ln).ClpAct = AppInstance.strip(tmpStr, 1) '1x
                            .IVR(ln).ClpNum = AppInstance.strip(tmpStr, 1) '1n
                            .IVR(ln).ClpVal1 = AppInstance.strip(tmpStr, 25) '25x
                            .IVR(ln).ClpVal2 = AppInstance.strip(tmpStr, 25) '25x
                            .IVR(ln).ClpVal3 = AppInstance.strip(tmpStr, 25) '25x
                            .IVR(ln).AutAct = AppInstance.strip(tmpStr, 1) '1x
                            .IVR(ln).Rsv10 = AppInstance.strip(tmpStr, 7) '7x
                        Case "IBK"
                            If .IBK Is Nothing Then ln = 0 Else ln = .IBK.Length
                            ReDim Preserve .IBK(ln)
                            .IBK(ln).ItmTyp = ItmTyp
                            .IBK(ln).CorKey = AppInstance.strip(tmpStr, 10) '10x
                            .IBK(ln).LocIde = AppInstance.strip(tmpStr, 10) '10x
                            .IBK(ln).DepIde = AppInstance.strip(tmpStr, 10) '10x
                            .IBK(ln).UsrKey = AppInstance.strip(tmpStr, 10) '10x
                            .IBK(ln).UseScp = AppInstance.strip(tmpStr, 1) '1x
                            .IBK(ln).UsePatEnq = AppInstance.strip(tmpStr, 1) '1x
                            .IBK(ln).UsePatReq = AppInstance.strip(tmpStr, 1) '1x
                            .IBK(ln).UsePatExe = AppInstance.strip(tmpStr, 1) '1x
                            .IBK(ln).Rsv10 = AppInstance.strip(tmpStr, 110) '110
                        Case "SMS"
                            If .SMS Is Nothing Then ln = 0 Else ln = .SMS.Length
                            ReDim Preserve .SMS(ln)
                            .SMS(ln).ItmTyp = ItmTyp
                            .SMS(ln).TabRowVer = AppInstance.strip(tmpStr, 12) '12n
                            .SMS(ln).CusNum = AppInstance.strip(tmpStr, 6) '6n
                            .SMS(ln).SmsTelNum = AppInstance.strip(tmpStr, 25) '25x
                            .SMS(ln).SmsLng = AppInstance.strip(tmpStr, 2) '2x
                            .SMS(ln).SmsAccNum = AppInstance.strip(tmpStr, 13) '13x
                            .SMS(ln).SmsRegAct = AppInstance.strip(tmpStr, 1) '1x
                            .SMS(ln).SmsPatDat = AppInstance.strip(tmpStr, 6) '6x
                            .SMS(ln).Rsv01 = AppInstance.strip(tmpStr, 15) '15x
                            .SMS(ln).UsrStpDat = AppInstance.strip(tmpStr, 30) '30x
                            .SMS(ln).Rsv10 = AppInstance.strip(tmpStr, 44) '44x
                        Case "ALT"
                            With .ALT
                                .ItmTyp = ItmTyp
                                'Dat708031  144
                                .TabRowVer = AppInstance.strip(tmpStr, 12)
                                .CusNum = AppInstance.strip(tmpStr, 6)
                                .AltTelNum = AppInstance.strip(tmpStr, 25)
                                .AltMobFlg = AppInstance.strip(tmpStr, 1)
                                .AltEmlAdd = AppInstance.strip(tmpStr, 50)
                                .AltEmlFlg = AppInstance.strip(tmpStr, 1)
                                .AltPatDat = AppInstance.strip(tmpStr, 6)
                                .AltLngFlg = AppInstance.strip(tmpStr, 2)
                                .AltRegFlg = AppInstance.strip(tmpStr, 1)
                                .Rsv02 = AppInstance.strip(tmpStr, 20)
                                .UsrStpDat = AppInstance.strip(tmpStr, 30)
                                .Rsv10 = AppInstance.strip(tmpStr, 5)
                                'IfjRspCde	5x
                                .IfjResVal = AppInstance.strip(tmpStr, 3)
                                .IfjActCde = AppInstance.strip(tmpStr, 2)
                            End With
                    End Select
                End With
            Next
        Catch ex As Exception
            HandleError(&H80002108, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_GetON2Cde(ByVal MsgId As String, ByRef mADO As AdoAccess) As Boolean
        Dim resp As String = String.Empty
        Dim verStr As String
        Dim i, count As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow

        If Not (GetMessage_Common("990270", "", MsgId, &H80002094, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            count = CType(AppInstance.strip(resp, 4), Integer)
            If count <= 0 Then
                '''HandleError(&H80002095, SIBL0100.Util.Debug.getStackFrame(New StackTrace(True).GetFrame(0)) & ": No data received", "ICE Communications")
                '''Return False
                Erase ON2CdeTable
                mADO.DeleteTable("On2TrxCde")
                Return True
            End If
            ReDim ON2CdeTable(count - 1)
            mADO.DeleteTable("On2TrxCde")
            For i = 0 To ON2CdeTable.Length - 1
                verStr = AppInstance.strip(resp, 70)
                With ON2CdeTable(i)
                    .On2TrxCde = Trim(AppInstance.strip(verStr, 4))
                    .SchTrxCde = Trim(AppInstance.strip(verStr, 4))
                    .On2FinFlg = Trim(AppInstance.strip(verStr, 1))
                    .On2RsvFlg = Trim(AppInstance.strip(verStr, 1))
                    .On2EngTxt = Trim(AppInstance.strip(verStr, 30))
                    .On2AraTxt = Trim(AppInstance.strip(verStr, 30))

                    mADO.AddRowToTable("On2TrxCde", "Values (""" & .On2TrxCde & " "",""" & _
                                                    .SchTrxCde & " "",""" & .On2FinFlg & " "",""" & .On2RsvFlg & " "",""" & _
                                                    .On2EngTxt & " "",""" & .On2AraTxt & " "")")
                End With
            Next
        Catch ex As Exception
            HandleError(&H80002096, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_ResolveDoubtful(ByVal MsgID As String, ByRef DbtMsg As DbtMsg_Struct, ByRef IceBrnJrn As ICED0100.IceTrxJrn_Struct, ByRef ResStr As String) As Boolean
        'Message:990280
        Dim ActCde As String
        Dim ResCde As String
        Dim resp As String = String.Empty
        If Not (GetMessage_Common("990280", "", MsgID, &H81000057, resp)) Then Return False
        If Not LogIntoBrnDatabase(resp, ICED0100.Globals.LogBrnType.Response) Then
            HandleError(&H81000058, "Could not log transaction (Doubtful Resolution)", "ICE Branch Database")
        End If
        Try
            AppInstance.strip(resp, 256)
            Dim OrgProCde As String = AppInstance.strip(resp, 6)
            Dim OrgMsgIde As String = AppInstance.strip(resp, 12)
            AppInstance.strip(resp, 32)
            AppInstance.strip(resp, 44)
            DbtMsg.OrgMsgFlg = AppInstance.strip(resp, 1)
            DbtMsg.OrgMsgTrn = AppInstance.strip(resp, 1)
            DbtMsg.OrgMsgFin = AppInstance.strip(resp, 1)
            DbtMsg.Rsv2 = AppInstance.strip(resp, 7)
            DbtMsg.OrgFinRsp.ReadTable(AppInstance.strip(resp, 256))
            DbtMsg.Rsv3 = AppInstance.strip(resp, 64)
            DbtMsg.OrgMsgSiz = AppInstance.strip(resp, 6)
            DbtMsg.OrgMsgMsg = resp


            'Case where the request was not received by the host
            If DbtMsg.OrgMsgFlg = "N" Then
                With IceBrnJrn
                    .TrxSts = "CMP"
                    .CmpCde = "ERR"
                    .MsgResCde = ""
                    .IntErrCde = "00002" 'Message not received by host
                    .RslMsgMid = MsgID
                    .RspUsr = AppInstance.LoggedUser
                    .RspWst = AppInstance.Workstation.ToUpper
                End With
                If Not UpdateIceBrnJournal(IceBrnJrn, ICED0100.Globals.LogBrnType.Response) Then
                    HandleError(&H81000059, "Could not log transaction (Doubtful Resolution)", "ICE Branch Database")
                End If
                'ModalMsgBox("Transaction Resolution Completed." & vbCrLf & "The host did not receive this transaction." & vbCrLf & _
                '            "if still desired, a new transaction must be posted.", MsgBoxStyle.Information, "Transaction Resolution")
                ResStr = "The host did not receive this transaction."
                Exit Try
            End If

            Dim st As String = DbtMsg.OrgMsgMsg
            If st.Length < 256 Then
                ResStr = "The host did not return a valid message."
                Exit Try
            End If
            ResCde = AppInstance.SafeSubString(st, 83, 3)
            ActCde = AppInstance.SafeSubString(st, 86, 2)

            'case where the request was received and rejected by host
            If (ResCde <> "000") Then
                With IceBrnJrn
                    .TrxSts = "CMP"
                    .CmpCde = "ERR"
                    .MsgResCde = ResCde & ActCde
                    .IntErrCde = "00001" 'Message rejected by host
                    .RslMsgMid = MsgID
                    .RspUsr = AppInstance.LoggedUser
                    .RspWst = AppInstance.Workstation.ToUpper
                End With
                If Not UpdateBranchDatabase(DbtMsg.OrgMsgMsg, IceBrnJrn, ICED0100.Globals.LogBrnType.Response) Then
                    HandleError(&H81000061, "Could not log transaction (Doubtful Resolution)", "ICE Branch Database")
                End If
                'ModalMsgBox("Transaction Resolution Completed." & vbCrLf & "The transaction had been rejected he host." & vbCrLf & _
                '            "The returned error code is " & ResCde & "-" & ActCde, MsgBoxStyle.Information, "Transaction Resolution")
                ResStr = String.Format("The host had rejected the transaction [{0}-{1}].", ResCde, ActCde)
                Exit Try
            End If

            'case where the request was received and sucessfully processed
            If DbtMsg.OrgMsgFin = "Y" Then
                With IceBrnJrn
                    .TrxSts = "CMP"
                    .CmpCde = "OK"
                    .MsgResCde = "00000"
                    .IntErrCde = "00000"
                    .RslMsgMid = MsgID
                    .HstTrxRef = DbtMsg.OrgFinRsp.DebRef
                    .CanRevFlg = DbtMsg.OrgFinRsp.ChnCanRev
                    .RspUsr = AppInstance.LoggedUser
                    .RspWst = AppInstance.Workstation.ToUpper

                    '''If .TrxCls <> "CSH" Then
                    .CreTrxAmt = DbtMsg.OrgFinRsp.Fin400Dat.AmtBuy
                    .CreTrxCcy = DbtMsg.OrgFinRsp.Fin400Dat.CcyBuy
                    .DebTrxAmt = DbtMsg.OrgFinRsp.AmtTot
                    .DebTrxCcy = DbtMsg.OrgFinRsp.Fin400Dat.CcySel
                    '''End If

                End With
                If Not UpdateBranchDatabase(DbtMsg.OrgMsgMsg, IceBrnJrn, ICED0100.Globals.LogBrnType.Response) Then
                    HandleError(&H81000060, "Could not log transaction (Doubtful Resolution)", "ICE Branch Database")
                End If
                'ModalMsgBox("Transaction Resolution Completed." & vbCrLf & "The transaction had succeeded on the host." & vbCrLf & _
                '            "A receipt will now be printed.", MsgBoxStyle.Information, "Transaction Resolution")
                ResStr = "The transaction had succeeded on the host."
                Exit Try
            End If

            'case where it is other than above (request received, accepted, but is not financial)
            With IceBrnJrn
                .TrxSts = "CMP"
                .CmpCde = "OK"
                .MsgResCde = "00000"
                .IntErrCde = "00003" 'Message received by host, but no financial data are present
                .RslMsgMid = MsgID
                .RspUsr = AppInstance.LoggedUser
                .RspWst = AppInstance.Workstation.ToUpper
            End With
            If Not UpdateBranchDatabase(DbtMsg.OrgMsgMsg, IceBrnJrn, ICED0100.Globals.LogBrnType.Response) Then
                HandleError(&H81000062, "Could not log transaction (Doubtful Resolution)", "ICE Branch Database")
            End If
            'ModalMsgBox("Transaction Resolution Completed." & vbCrLf & "The host had accepted the message." & vbCrLf & _
            '            "but no financial data had been recorded.", MsgBoxStyle.Information, "Transaction Resolution")
            ResStr = "The host had accepted the message but no financial data had been recorded."
        Catch ex As Exception
            HandleError(&H81000063, "Error while resolving transaction: " & ex.Message, "ICE Error")
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_ResolveDoubtfulEx(ByVal MsgID As String, ByRef DbtMsg As DbtMsg_Struct, ByRef IceBrnJrn As ICED0100.IceTrxJrn_Struct, ByRef ResStr As String) As Boolean
        'Message:990280
        Dim ActCde As String
        Dim ResCde As String
        Dim resp As String = String.Empty
        If Not (GetMessage_Common("990280", "", MsgID, &H81000057, resp)) Then Return False
        If Not LogIntoBrnDatabase(resp, ICED0100.Globals.LogBrnType.Response) Then
            HandleError(&H81000058, "Could not log transaction (Doubtful Resolution)", "ICE Branch Database")
        End If
        Try
            AppInstance.strip(resp, 256)
            Dim OrgProCde As String = AppInstance.strip(resp, 6)
            Dim OrgMsgIde As String = AppInstance.strip(resp, 12)
            AppInstance.strip(resp, 32)
            AppInstance.strip(resp, 44)
            DbtMsg.OrgMsgFlg = AppInstance.strip(resp, 1)
            DbtMsg.OrgMsgTrn = AppInstance.strip(resp, 1)
            DbtMsg.OrgMsgFin = AppInstance.strip(resp, 1)
            DbtMsg.Rsv2 = AppInstance.strip(resp, 7)

            DbtMsg.OrgFinRsp.ReadTable(AppInstance.strip(resp, 256))
            DbtMsg.Rsv3 = AppInstance.strip(resp, 64)

            DbtMsg.OrgMsgSiz = AppInstance.strip(resp, 6)
            DbtMsg.OrgMsgMsg = resp

            'Case where the request was not received by the host
            If DbtMsg.OrgMsgFlg = "N" Then
                With IceBrnJrn
                    .TrxSts = "CMP"
                    .CmpCde = "ERR"
                    .MsgResCde = ""
                    .IntErrCde = "00002" 'Message not received by host
                    .RslMsgMid = MsgID
                    .RspUsr = AppInstance.LoggedUser
                    .RspWst = AppInstance.Workstation.ToUpper
                End With
                If Not UpdateIceBrnJournal(IceBrnJrn, ICED0100.Globals.LogBrnType.Response) Then
                    HandleError(&H81000059, "Could not log transaction (Doubtful Resolution)", "ICE Branch Database")
                End If
                'ModalMsgBox("Transaction Resolution Completed." & vbCrLf & "The host did not receive this transaction." & vbCrLf & _
                '            "if still desired, a new transaction must be posted.", MsgBoxStyle.Information, "Transaction Resolution")
                ResStr = "The host did not receive this transaction."
                Return False 'Exit Try
            End If

            Dim st As String = DbtMsg.OrgMsgMsg
            If st.Length < 256 Then
                ResStr = "The host did not return a valid message."
                Return False 'Exit Try
            End If
            ResCde = AppInstance.SafeSubString(st, 83, 3)
            ActCde = AppInstance.SafeSubString(st, 86, 2)

            '''case where the request was received and rejected by host
            If (ResCde <> "000") Then
                'This is to make the reponse compatible with clsTrnasaction.GetMessage_POST
                DbtMsg.OrgMsgMsg = "*ERROR*" & DbtMsg.OrgMsgMsg
                With IceBrnJrn
                    .TrxSts = "CMP"
                    .CmpCde = "ERR"
                    .MsgResCde = ResCde & ActCde
                    .IntErrCde = "00001" 'Message rejected by host
                    .RslMsgMid = MsgID
                    .RspUsr = AppInstance.LoggedUser
                    .RspWst = AppInstance.Workstation.ToUpper
                End With
                If Not UpdateBranchDatabase(DbtMsg.OrgMsgMsg, IceBrnJrn, ICED0100.Globals.LogBrnType.Response) Then
                    HandleError(&H81000061, "Could not log transaction (Doubtful Resolution)", "ICE Branch Database")
                End If
                'ModalMsgBox("Transaction Resolution Completed." & vbCrLf & "The transaction had been rejected he host." & vbCrLf & _
                '            "The returned error code is " & ResCde & "-" & ActCde, MsgBoxStyle.Information, "Transaction Resolution")
                ResStr = String.Format("The host had rejected the transaction [{0}-{1}].", ResCde, ActCde)
                Return True 'Exit Try
            End If

            'case when data is truncated
            If (DbtMsg.OrgMsgTrn = "Y") Then
                'case where it is other than above (request received, accepted, but is not financial)
                With IceBrnJrn
                    .TrxSts = "CMP"
                    .CmpCde = "WRN"
                    .MsgResCde = "00000"
                    .IntErrCde = "00004" 'Message received and accepted by host, but result is truncated.
                    .RslMsgMid = MsgID
                    .RspUsr = AppInstance.LoggedUser
                    .RspWst = AppInstance.Workstation.ToUpper
                End With
                If Not UpdateBranchDatabase(DbtMsg.OrgMsgMsg, IceBrnJrn, ICED0100.Globals.LogBrnType.Response) Then
                    HandleError(&H81000062, "Could not log transaction (Doubtful Resolution)", "ICE Branch Database")
                End If
                ResStr = "The host had accepted the message but response is truncated."
                Return True
            End If


            'case where the request was received and sucessfully processed
            If DbtMsg.OrgMsgFin = "Y" Then
                With IceBrnJrn
                    .TrxSts = "CMP"
                    .CmpCde = "OK"
                    .MsgResCde = "00000"
                    .IntErrCde = "00000"
                    .RslMsgMid = MsgID
                    .HstTrxRef = DbtMsg.OrgFinRsp.DebRef
                    .CanRevFlg = DbtMsg.OrgFinRsp.ChnCanRev
                    .RspUsr = AppInstance.LoggedUser
                    .RspWst = AppInstance.Workstation.ToUpper

                    '''If .TrxCls <> "CSH" Then
                    .CreValDte = DbtMsg.OrgFinRsp.Fin400Dat.ValDteBuy
                    .CreTrxAmt = DbtMsg.OrgFinRsp.Fin400Dat.AmtBuy
                    .CreTrxCcy = DbtMsg.OrgFinRsp.Fin400Dat.CcyBuy
                    .DebValDte = DbtMsg.OrgFinRsp.Fin400Dat.ValDteSel
                    .DebTrxAmt = DbtMsg.OrgFinRsp.AmtTot
                    .DebTrxCcy = DbtMsg.OrgFinRsp.Fin400Dat.CcySel
                    '''End If

                End With
                If Not UpdateBranchDatabase(DbtMsg.OrgMsgMsg, IceBrnJrn, ICED0100.Globals.LogBrnType.Response) Then
                    HandleError(&H81000060, "Could not log transaction (Doubtful Resolution)", "ICE Branch Database")
                End If
                'ModalMsgBox("Transaction Resolution Completed." & vbCrLf & "The transaction had succeeded on the host." & vbCrLf & _
                '            "A receipt will now be printed.", MsgBoxStyle.Information, "Transaction Resolution")
                ResStr = "The transaction had succeeded on the host."
                Return True 'Exit Try
            End If

            'If (ResCde = "000") Then
            'case where it is other than above (request received, accepted, but is not financial)
            With IceBrnJrn
                .TrxSts = "CMP"
                .CmpCde = "OK"
                .MsgResCde = "00000"
                .IntErrCde = "00003" 'Message received by host, but no financial data are present
                .RslMsgMid = MsgID
                .RspUsr = AppInstance.LoggedUser
                .RspWst = AppInstance.Workstation.ToUpper
            End With
            If Not UpdateBranchDatabase(DbtMsg.OrgMsgMsg, IceBrnJrn, ICED0100.Globals.LogBrnType.Response) Then
                HandleError(&H81000062, "Could not log transaction (Doubtful Resolution)", "ICE Branch Database")
            End If
            ResStr = "The host had accepted the message but no financial data had been recorded."
            Return True
            'End If
            'ModalMsgBox("Transaction Resolution Completed." & vbCrLf & "The host had accepted the message." & vbCrLf & _
            '            "but no financial data had been recorded.", MsgBoxStyle.Information, "Transaction Resolution")
        Catch ex As Exception
            HandleError(&H81000063, "Error while resolving transaction: " & ex.Message, "ICE Error")
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_GetCshTrxNam(ByVal MsgId As String, ByRef mADO As AdoAccess) As Boolean
        Dim resp As String = String.Empty
        Dim verStr As String
        Dim i, count As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow

        If Not (GetMessage_Common("990390", "", MsgId, &H80002041, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            count = CType(AppInstance.strip(resp, 4), Integer)
            If count <= 0 Then
                '''HandleError(&H80002042, SIBL0100.Util.Debug.getStackFrame(New StackTrace(True).GetFrame(0)) & ": No data received", "ICE Communications")
                '''Return False
                Erase CshTrxNamTable
                mADO.DeleteTable("CshTrxNam")
                Return True
            End If
            ReDim CshTrxNamTable(count - 1)
            mADO.DeleteTable("CshTrxNam")
            For i = 0 To CshTrxNamTable.Length - 1
                verStr = AppInstance.strip(resp, 90)
                With CshTrxNamTable(i)
                    .CshTrxNam = AppInstance.strip(verStr, 10).Trim.ToUpper
                    .TrxNamEng = AppInstance.strip(verStr, 35).Trim
                    .TrxNamAra = AppInstance.strip(verStr, 35).Trim
                    .Rsv10 = AppInstance.strip(verStr, 10).Trim
                    mADO.AddRowToTable("CshTrxNam", "Values (""" & .CshTrxNam & """,""" & _
                                       .TrxNamEng & """,""" & .TrxNamAra & """,""" & .Rsv10 & """)")
                End With
            Next
        Catch ex As Exception
            HandleError(&H80002043, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_GetCshMsgTyp(ByVal MsgId As String, ByRef mADO As AdoAccess) As Boolean
        Dim resp As String = String.Empty
        Dim verStr As String
        Dim i, count As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow

        If Not (GetMessage_Common("990450", "", MsgId, &H80002041, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            count = CType(AppInstance.strip(resp, 4), Integer)
            If count <= 0 Then
                '''HandleError(&H80002042, SIBL0100.Util.Debug.getStackFrame(New StackTrace(True).GetFrame(0)) & ": No data received", "ICE Communications")
                '''Return False
                Erase CshMsgTypTable
                mADO.DeleteTable("CshMsgTyp")
                Return True
            End If
            ReDim CshMsgTypTable(count - 1)
            mADO.DeleteTable("CshMsgTyp")
            For i = 0 To CshMsgTypTable.Length - 1
                verStr = AppInstance.strip(resp, 90)
                With CshMsgTypTable(i)
                    .CshMsgTyp = Trim(AppInstance.strip(verStr, 4))
                    .MsgTypEng = Trim(AppInstance.strip(verStr, 35))
                    .MsgTypAra = Trim(AppInstance.strip(verStr, 35))
                    .Rsv16 = Trim(AppInstance.strip(verStr, 16))
                    mADO.AddRowToTable("CshMsgTyp", "Values (""" & .CshMsgTyp & """,""" & _
                                       .MsgTypEng & """,""" & .MsgTypAra & """,""" & .Rsv16 & """)")
                End With
            Next
        Catch ex As Exception
            HandleError(&H80002043, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_GetCshReaCde(ByVal MsgId As String, ByRef mADO As AdoAccess) As Boolean
        Dim resp As String = String.Empty
        Dim verStr As String
        Dim i, count As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow

        If Not (GetMessage_Common("990460", "", MsgId, &H80002041, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            count = CType(AppInstance.strip(resp, 4), Integer)
            If count <= 0 Then
                '''HandleError(&H80002042, SIBL0100.Util.Debug.getStackFrame(New StackTrace(True).GetFrame(0)) & ": No data received", "ICE Communications")
                '''Return False
                Erase CshReaCdeTable
                mADO.DeleteTable("CshReaCde")
                Return True
            End If
            ReDim CshReaCdeTable(count - 1)
            mADO.DeleteTable("CshReaCde")
            For i = 0 To CshReaCdeTable.Length - 1
                verStr = AppInstance.strip(resp, 90)
                With CshReaCdeTable(i)
                    .CshReaCde = Trim(AppInstance.strip(verStr, 2))
                    .ReaCdeEng = Trim(AppInstance.strip(verStr, 35))
                    .ReaCdeAra = Trim(AppInstance.strip(verStr, 35))
                    .Rsv18 = Trim(AppInstance.strip(verStr, 16))
                    mADO.AddRowToTable("CshReaCde", "Values (""" & .CshReaCde & """,""" & _
                                       .ReaCdeEng & """,""" & .ReaCdeAra & """,""" & .Rsv18 & """)")
                End With
            Next
        Catch ex As Exception
            HandleError(&H80002043, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    ''' -----------------------------------------------------------------------------
    ''' <summary>
    '''     ''' Enumerate Case system codes (send message)
    ''' </summary>
    ''' <returns>message ID</returns>
    ''' <remarks>
    ''' </remarks>
    ''' <history>
    ''' 	[y309abso]	20/01/2010	Created
    ''' </history>
    ''' -----------------------------------------------------------------------------
    Public Function SendMessage_EnumerateManualRankCodes() As String
        Dim st As String
        st = String.Empty

        Return AppInstance.SendMessageVisuallyEx("990500", st, "GEN", "", "", "")
    End Function
    ''' -----------------------------------------------------------------------------
    ''' <summary>
    ''' Enumerate Case system codes (get message)
    ''' </summary>
    ''' <returns></returns>
    ''' <remarks>
    ''' </remarks>
    ''' <history>
    ''' 	[Y309abso]	20/01/2010	Created
    ''' </history>
    ''' -----------------------------------------------------------------------------
    Public Function GetMessage_EnumerateManualRankCodes(ByVal MsgId As String, ByRef mADO As AdoAccess) As Boolean
        Dim resp As String = String.Empty
        Dim verStr As String
        Dim i, count As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow

        If Not (GetMessage_Common("990500", "", MsgId, &H81000645, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 14) 'Reserved
            count = CType(AppInstance.strip(resp, 2), Integer)
            If count <= 0 Then
                '''HandleError(&H80002051, SIBL0100.Util.Debug.getStackFrame(New StackTrace(True).GetFrame(0)) & ": No data received", "ICE Communications")
                '''Return False
                Erase ManRnkReaTable
                mADO.DeleteTable("ManRnkRea")
                Return True
            End If
            ReDim ManRnkReaTable(count - 1)
            mADO.DeleteTable("ManRnkRea")
            For i = 0 To ManRnkReaTable.Length - 1
                verStr = AppInstance.strip(resp, 85)
                With ManRnkReaTable(i)
                    .TabRowVer = Trim(AppInstance.strip(verStr, 12))
                    .ManRnkRea = Trim(AppInstance.strip(verStr, 3))
                    .ManRnkEngDsc = Trim(AppInstance.strip(verStr, 35))
                    .ManRnkAraDsc = Trim(AppInstance.strip(verStr, 35))

                    mADO.AddRowToTable("ManRnkRea", "Values (""" & .TabRowVer & " "",""" & _
                                       .ManRnkRea & " "",""" & .ManRnkEngDsc & " "",""" & .ManRnkAraDsc & " "")")
                End With
            Next
        Catch ex As Exception
            HandleError(&H81000644, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    ' IH statement suppression reason codes
    Public Function GetMessage_GetStmSupRea(ByVal MsgId As String, ByRef mADO As AdoAccess) As Boolean
        Dim resp As String = String.Empty
        Dim verStr As String
        Dim i, count As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow

        If Not (GetMessage_Common("910440", "", MsgId, &H80002038, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            count = CType(AppInstance.strip(resp, 4), Integer)
            If count <= 0 Then
                Erase StmSupReaTable
                mADO.DeleteTable("StmSupRea")
                Return True
            End If
            ReDim StmSupReaTable(count - 1)
            mADO.DeleteTable("StmSupRea")
            For i = 0 To StmSupReaTable.Length - 1

                verStr = AppInstance.strip(resp, 200)
                With StmSupReaTable(i)
                    .SupReaCde = Trim(AppInstance.strip(verStr, 4))
                    .ReaDscEng = Trim(AppInstance.strip(verStr, 50))
                    .ReaDscAra = Trim(AppInstance.strip(verStr, 50))
                    AppInstance.strip(verStr, 96)
                    mADO.AddRowToTable("StmSupRea", "Values (""" & .SupReaCde & " "",""" & .ReaDscEng & " "",""" & .ReaDscAra & " "")")
                End With
            Next
        Catch ex As Exception
            HandleError(&H80002040, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

#End Region

End Module

Public Module Module_M75701

    Public Structure SendToBRCO_Struct '0 Msg #757011
        Dim MsgReqdat As M757010_BRCO_Struct '0				Desc:Echoed request data
        Dim NxtHndDte As String '8x				Desc:Next (current) handover date
        Dim NxtHndSer As String '5n				Desc:Next (current) handover serial
        Dim HndCnt As String '3n				Desc:Number of handovers being returned (maximum 400)
        Dim HndDat() As M_HandoverEntry_Struct '200				Desc:Handover entries

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= MsgReqdat.PackTable()
            st &= Pack.PackString(NxtHndDte, 8)
            st &= Pack.PackNString(NxtHndSer, 5)
            st &= Pack.PackNString(HndCnt, 3)
            Dim iCount As Integer = CInt(HndCnt)
            For i As Integer = 0 To iCount - 1 : st &= HndDat(i).PackTable() : Next
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            MsgReqdat.ReadTable(DataStream)
            NxtHndDte = Pack.Strip(DataStream, 8)
            NxtHndSer = Pack.Strip(DataStream, 5)
            HndCnt = Pack.Strip(DataStream, 3)
            Dim iCount As Integer = CInt(HndCnt)
            If iCount > 0 Then
                ReDim HndDat(iCount - 1)
                For i As Integer = 0 To iCount - 1 : HndDat(i).ReadTable(DataStream) : Next
            Else
                HndDat = Nothing
            End If
        End Sub
    End Structure

    Public Structure GetFromBRCO_Struct '0 Msg #757021
        Dim MsgReqdat As M757010_BRCO_Struct '0				Desc:Echoed request data
        Dim NxtHndDte As String '8x				Desc:Next (current) handover date
        Dim NxtHndSer As String '5n				Desc:Next (current) handover serial
        Dim HndCnt As String '3n				Desc:Number of handovers being returned (maximum 400)
        Dim HndDat() As M_HandbackEntry_Struct '200				Desc:Handover entries

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= MsgReqdat.PackTable()
            st &= Pack.PackString(NxtHndDte, 8)
            st &= Pack.PackNString(NxtHndSer, 5)
            st &= Pack.PackNString(HndCnt, 3)
            Dim iCount As Integer = CInt(HndCnt)
            For i As Integer = 0 To iCount - 1 : st &= HndDat(i).PackTable() : Next
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            MsgReqdat.ReadTable(DataStream)
            NxtHndDte = Pack.Strip(DataStream, 8)
            NxtHndSer = Pack.Strip(DataStream, 5)
            HndCnt = Pack.Strip(DataStream, 3)
            Dim iCount As Integer = CInt(HndCnt)
            If iCount > 0 Then
                ReDim HndDat(iCount - 1)
                For i As Integer = 0 To iCount - 1 : HndDat(i).ReadTable(DataStream) : Next
            Else
                HndDat = Nothing
            End If
        End Sub
    End Structure

    Public Function GetMessage_SendToBRCO(ByVal MsgId As String, ByRef MsgRspDat As SendToBRCO_Struct, ByRef MsgRsp As String) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("757011", "", MsgId, &H81000453, resp)) Then
            MsgRsp = resp
            Return False
        End If
        Try

            AppInstance.strip(resp, 256)
            MsgRspDat.ReadTable(resp)

        Catch ex As Exception
            HandleError(&H81000453, "Error:", "Error", ex)
            Return False
        End Try
        Return True

    End Function

    Public Function GetMessage_GetFromBRCO(ByVal MsgId As String, ByRef MsgRspDat As GetFromBRCO_Struct, ByRef MsgRsp As String) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("757021", "", MsgId, &H81000454, resp)) Then
            MsgRsp = resp
            Return False
        End If

        Try

            AppInstance.strip(resp, 256)
            MsgRspDat.ReadTable(resp)

        Catch ex As Exception
            HandleError(&H81000454, "Error:", "Error", ex)
            Return False
        End Try
        Return True

    End Function

    Public Structure M757010_BRCO_Struct '0 Msg #757010
        Dim SysIde As String '4x				Desc:System identifier (IBMS or LETS)
        Dim BegNum As String '5n				Desc:Starting serial number (or spaces)
        Dim EndNum As String '5n				Desc:Ending serial number (or spaces)
        Dim BegDte As String '8x				Desc:Start date (or spaces for today)
        Dim EndDte As String '8x				Desc:End date (or spaces for today)
        Dim ReqTyp As String '4x				Desc:Request
        Dim Rsv1 As String '46x				Desc:Reserved, space filled

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(SysIde, 4)
            st &= Pack.PackNString(BegNum, 5)
            st &= Pack.PackNString(EndNum, 5)
            st &= Pack.PackDate(BegDte)
            st &= Pack.PackDate(EndDte)
            st &= Pack.PackString(ReqTyp, 4)
            st &= Pack.PackString(Rsv1, 46)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            SysIde = Pack.Strip(DataStream, 4)
            BegNum = Pack.Strip(DataStream, 5)
            EndNum = Pack.Strip(DataStream, 5)
            BegDte = Pack.Strip(DataStream, 8)
            EndDte = Pack.Strip(DataStream, 8)
            ReqTyp = Pack.Strip(DataStream, 4)
            Rsv1 = Pack.Strip(DataStream, 46)
        End Sub
    End Structure

    Public Function SendMessage_SendToBRCO(ByRef SndDat As M757010_BRCO_Struct) As String

        Dim st As String = SndDat.PackTable
        Return AppInstance.SendMessageVisuallyEx("757010", st, "GEN", "", "", "")
    End Function

    Public Function SendMessage_GetFromBRCO(ByRef SndDat As M757010_BRCO_Struct) As String

        Dim st As String = SndDat.PackTable
        Return AppInstance.SendMessageVisuallyEx("757020", st, "GEN", "", "", "")
    End Function

    Public Structure M_HandoverEntry_Struct '200 Msg #757011
        Dim FilSys As String '4x
        Dim FssHndDat As FFSHndDat_Struct '124				Desc:·
        Dim Rsv2 As String '79x				Desc: ·

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(FilSys, 4)
            st &= FssHndDat.PackTable() '124
            st &= Pack.PackString(Rsv2, 72)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            FilSys = Pack.Strip(DataStream, 4)
            FssHndDat.ReadTable(DataStream) '124
            Rsv2 = Pack.Strip(DataStream, 72)
        End Sub
    End Structure

    Public Structure M_HandbackEntry_Struct '200 Msg #757021
        Dim FilSys As String '4x
        Dim FssHbkDat As FFSHbkDat_Struct '161				Desc:·
        Dim Rsv2 As String '35x				Desc: ·

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(FilSys, 4)
            st &= FssHbkDat.PackTable() '161
            st &= Pack.PackString(Rsv2, 35)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            FilSys = Pack.Strip(DataStream, 4)
            FssHbkDat.ReadTable(DataStream) '161
            Rsv2 = Pack.Strip(DataStream, 35)
        End Sub
    End Structure


    Public Structure FFSHndDat_Struct '125 Msg #757011
        Dim FilDte As String '8x				Desc: File (SAIB Equation business) date (YYYYMMDD)
        Dim FilNum As String '5n				Desc: SAIB sequential file number (from number engine)
        Dim RecCnt As String '6n				Desc: Total number of records in this run
        Dim ReqWho As String '10x				Desc: User identity requesting the run
        Dim ReqStp As String '14x				Desc: Date/time of the request
        Dim ReqSta As String '4x				Desc: Request status code"WAIT" = not yet started
        Dim ReqResCde As String '3n				Desc: Request result code
        Dim RunWho As String '10x				Desc: User identity executing the run
        Dim RunStp As String '14x				Desc: Date/time of the run
        Dim RunSta As String '4x				Desc: Run status code"WAIT" = not yet started
        Dim RunResCde As String '3n				Desc: Run result code
        Dim RunRecCnt As String '6n				Desc: Number of records dealt with so far.
        Dim HndWho As String '10x				Desc: User identity performing handover
        Dim HndStp As String '14x				Desc: Date/time of the handover
        Dim HndSta As String '4x				Desc: Handover status code"WAIT" = not yet started
        Dim HndResCde As String '3n				Desc: Handover result code
        Dim HndRecCnt As String '6n				Desc: Number of records sent so far.

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackDate(FilDte)
            st &= Pack.PackNString(FilNum, 5)
            st &= Pack.PackNString(RecCnt, 6)
            st &= Pack.PackString(ReqWho, 10)
            st &= Pack.PackString(ReqStp, 14)
            st &= Pack.PackString(ReqSta, 4)
            st &= Pack.PackNString(ReqResCde, 3)
            st &= Pack.PackString(RunWho, 10)
            st &= Pack.PackString(RunStp, 14)
            st &= Pack.PackString(RunSta, 4)
            st &= Pack.PackNString(RunResCde, 3)
            st &= Pack.PackNString(RunRecCnt, 6)
            st &= Pack.PackString(HndWho, 10)
            st &= Pack.PackString(HndStp, 14)
            st &= Pack.PackString(HndSta, 4)
            st &= Pack.PackNString(HndResCde, 3)
            st &= Pack.PackNString(HndRecCnt, 6)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            FilDte = Pack.Strip(DataStream, 8)
            FilNum = Pack.Strip(DataStream, 5)
            RecCnt = Pack.Strip(DataStream, 6)
            ReqWho = Pack.Strip(DataStream, 10)
            ReqStp = Pack.Strip(DataStream, 14)
            ReqSta = Pack.Strip(DataStream, 4)
            ReqResCde = Pack.Strip(DataStream, 3)
            RunWho = Pack.Strip(DataStream, 10)
            RunStp = Pack.Strip(DataStream, 14)
            RunSta = Pack.Strip(DataStream, 4)
            RunResCde = Pack.Strip(DataStream, 3)
            RunRecCnt = Pack.Strip(DataStream, 6)
            HndWho = Pack.Strip(DataStream, 10)
            HndStp = Pack.Strip(DataStream, 14)
            HndSta = Pack.Strip(DataStream, 4)
            HndResCde = Pack.Strip(DataStream, 3)
            HndRecCnt = Pack.Strip(DataStream, 6)
        End Sub
    End Structure

    Public Structure FFSHbkDat_Struct '125 Msg #757011
        Dim HbkDte As String '8x				Desc: File (SAIB Equation business) date (YYYYMMDD)
        Dim HbkNum As String '5n				Desc: SAIB sequential file number (from number engine)
        Dim ReqWho As String '10x				Desc: User identity requesting the run
        Dim ReqStp As String '14x				Desc: Date/time of the request
        Dim ReqSta As String '4x				Desc: Request status code"WAIT" = not yet started
        Dim ReqResCde As String '3n				Desc: Request result code
        Dim PulWho As String  '10x	User identity executing the pull
        Dim PulStp As String  '14x	Date/time of the pull
        Dim PulSta As String  '4x	Pull status code
        Dim PulResCde As String  '3n	Pull result code
        Dim ExeRecCnt As String  '6n	Number of records dealt with so far.
        Dim ExeTrxSer As String  '12n	Transaction serial dealt with so far
        Dim PulFilDte As String  '8x	File (BRCO Equation business) date (YYYYMMDD)
        Dim PulFilNum As String  '5n	BRCO sequential file number (from BRCO)
        Dim PulRecCnt As String  '6n	Total number of records in this run
        Dim PstWho As String  '10x	SAIB user identity performing posting
        Dim PstStp As String  '14x	Date/time of the posting
        Dim PstSta As String  '4x	Posting status code
        Dim PstResCde As String  '3n	Posting result code
        Dim PstRecCnt As String  '6n	Number of records posted so far.
        Dim PstTrxSer As String  '12n	Transaction serial dealt with so far

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackDate(HbkDte)
            st &= Pack.PackNString(HbkNum, 5)
            st &= Pack.PackString(ReqWho, 10)
            st &= Pack.PackString(ReqStp, 14)
            st &= Pack.PackString(ReqSta, 4)
            st &= Pack.PackNString(ReqResCde, 3)
            st &= Pack.PackString(PulWho, 10)
            st &= Pack.PackString(PulStp, 14)
            st &= Pack.PackString(PulSta, 4)
            st &= Pack.PackString(PulResCde, 3)
            st &= Pack.PackNString(ExeRecCnt, 6)
            st &= Pack.PackNString(ExeTrxSer, 12)
            st &= Pack.PackString(PulFilDte, 8)
            st &= Pack.PackNString(PulFilNum, 5)
            st &= Pack.PackNString(PulRecCnt, 6)
            st &= Pack.PackString(PstWho, 10)
            st &= Pack.PackDate(PstStp)
            st &= Pack.PackString(PstSta, 4)
            st &= Pack.PackString(PstResCde, 3)
            st &= Pack.PackNSString(PstRecCnt, 6)
            st &= Pack.PackString(PstTrxSer, 12)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            HbkDte = Pack.Strip(DataStream, 8)
            HbkNum = Pack.Strip(DataStream, 5)
            ReqWho = Pack.Strip(DataStream, 10)
            ReqStp = Pack.Strip(DataStream, 14)
            ReqSta = Pack.Strip(DataStream, 4)
            ReqResCde = Pack.Strip(DataStream, 3)
            PulWho = Pack.Strip(DataStream, 10)
            PulStp = Pack.Strip(DataStream, 14)
            PulSta = Pack.Strip(DataStream, 4)
            PulResCde = Pack.Strip(DataStream, 3)
            ExeRecCnt = Pack.Strip(DataStream, 6)
            ExeTrxSer = Pack.Strip(DataStream, 12)
            PulFilDte = Pack.Strip(DataStream, 8)
            PulFilNum = Pack.Strip(DataStream, 5)
            PulRecCnt = Pack.Strip(DataStream, 6)
            PstWho = Pack.Strip(DataStream, 10)
            PstStp = Pack.Strip(DataStream, 14)
            PstSta = Pack.Strip(DataStream, 4)
            PstResCde = Pack.Strip(DataStream, 3)
            PstRecCnt = Pack.Strip(DataStream, 6)
            PstTrxSer = Pack.Strip(DataStream, 12)
        End Sub
    End Structure


End Module

Public Module Module_Token_Managment

    Public Structure M200200_EnumerateTokenInventory_Struct '44 Msg #200200
        Dim DevVnd As String '3x				Desc: Security device vendor identification ("RSA" or "VSC") or spaces
        Dim DevIde As String '8x				Desc: Security token identity or spaces
        Dim DevSta() As String '6 * 4x			Desc: Security device status to include or spaces
        Dim Rsv1 As String '9x				    Desc: Reserved, space filled

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(DevVnd, 3)
            st &= Pack.PackString(DevIde, 8)
            For ind As Integer = 0 To 5 : st &= Pack.PackString(DevSta(ind), 4) : Next
            st &= Pack.PackString(Rsv1, 9)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            DevVnd = Pack.Strip(DataStream, 3)
            DevIde = Pack.Strip(DataStream, 8)
            ReDim DevSta(5)
            For ind As Integer = 0 To 5 : DevSta(ind) = Pack.Strip(DataStream, 4) : Next
            Rsv1 = Pack.Strip(DataStream, 9)
        End Sub

        Public Function SendMessage_EnumerateTokenInventory(ByVal DevVnd As String, ByVal DevIde As String, ByVal DevSta() As String, ByVal Rsv1 As String) As String

            Dim structInstance As M200200_EnumerateTokenInventory_Struct
            structInstance.DevVnd = DevVnd
            structInstance.DevIde = DevIde
            structInstance.DevSta = DevSta
            structInstance.Rsv1 = Rsv1

            Return SendMessage_EnumerateTokenInventory(structInstance)
        End Function

        Public Function SendMessage_EnumerateTokenInventory(ByVal msg As M200200_EnumerateTokenInventory_Struct) As String

            Dim st As String = String.Empty

            st &= msg.PackTable()
            Return AppInstance.SendMessageVisuallyEx("200200", st, "GEN", "", "", "") 'CusNum
        End Function
    End Structure

    Public Structure M200201_EnumerateTokenInventory_Struct '0 Msg #200201
        Dim MsgRspDat As M200200_EnumerateTokenInventory_Struct '44			                	Desc:Message Response Data Area
        Dim ItmCnt As String '4n				                        Desc: Number of structures being returned (limit set by host)
        Dim ItmDat() As M200201_EnumerateTokenInventory_ItmDat_Struct '100 * ItmCnt				Desc:Item being returned (zero, one or several)

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= MsgRspDat.PackTable()
            st &= Pack.PackNString(ItmCnt, 4)
            For ind As Integer = 0 To CInt(ItmCnt) - 1 : st &= ItmDat(ind).PackTable() : Next
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            MsgRspDat.ReadTable(DataStream)
            ItmCnt = Pack.Strip(DataStream, 4)
            ReDim ItmDat(CInt(ItmCnt) - 1)
            For ind As Integer = 0 To CInt(ItmCnt) - 1 : ItmDat(ind).ReadTable(DataStream) : Next
        End Sub

        Public Function GetMessage_EnumerateTokenInventory(ByVal MsgId As String, ByRef MsgRspDat As M200201_EnumerateTokenInventory_Struct) As Boolean
            Dim resp As String = String.Empty

            If Not (GetMessage_Common("200200", "", MsgId, &H81000455, resp)) Then Return False
            Try

                AppInstance.strip(resp, 256)
                MsgRspDat.ReadTable(resp)

            Catch ex As Exception
                HandleError(&H81000455, "Error:", "Error", ex)
                Return False
            End Try
            Return True

        End Function

    End Structure

    Public Structure M200201_EnumerateTokenInventory_ItmDat_Struct '100 Msg #200202
        Dim TabRowVer As String '12n			Desc: TokInvTab: Table row version number
        Dim SecDevVnd As String '3x				Desc: TokInvTab: Token vendor
        Dim SecDevIde As String '8n				Desc: TokInvTab: Token identity number (serial number of token)
        Dim SecPinReq As String '1x				Desc: TokInvTab: PIN protection required
        Dim SecDevExp As String '8n				Desc: TokInvTab: Expiry date
        Dim SecDevSta As String '4x				Desc: TokInvTab: Security device status
        Dim SecStaRea As String '25x			Desc: TokInvTab: Text reason for status change
        'Dim TabRowUsr As String '12n			Desc: TokUsrTab: Table row version number or spaces
        Dim ChgUid As String '4x                Desc: User identity of the SAIB user making the change (only first 4 characters)
        Dim ChgStp As String '8x                Desc: Date this entry was changed (format YYYYMMDD)
        Dim CorUsrKey As String '20x			Desc: TokUsrTab: Secondary key or spaces
        Dim TokUsrUse As String '1x				Desc: TokUsrTab: User allowed to use the token or spaces
        Dim AltDevTyp As String '2x             Alternative device identifier type (“NT” or spaces)
        Dim Rsv2 As String '4x                  Reserved, space filled

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackNString(TabRowVer, 12)
            st &= Pack.PackString(SecDevVnd, 3)
            st &= Pack.PackNString(SecDevIde, 8)
            st &= Pack.PackString(SecPinReq, 1)
            st &= Pack.PackNString(SecDevExp, 8)
            st &= Pack.PackString(SecDevSta, 4)
            st &= Pack.PackString(SecStaRea, 25)
            st &= Pack.PackNString(ChgUid, 4)
            st &= Pack.PackNString(ChgStp, 8)
            st &= Pack.PackString(CorUsrKey, 20)
            st &= Pack.PackString(TokUsrUse, 1)
            st &= Pack.PackString(AltDevTyp, 2)
            st &= Pack.PackString(Rsv2, 4)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            TabRowVer = Pack.Strip(DataStream, 12)
            SecDevVnd = Pack.Strip(DataStream, 3)
            SecDevIde = Pack.Strip(DataStream, 8)
            SecPinReq = Pack.Strip(DataStream, 1)
            SecDevExp = Pack.Strip(DataStream, 8)
            SecDevSta = Pack.Strip(DataStream, 4)
            SecStaRea = Pack.Strip(DataStream, 25)
            ChgUid = Pack.Strip(DataStream, 4)
            ChgStp = Pack.Strip(DataStream, 8)
            CorUsrKey = Pack.Strip(DataStream, 20)
            TokUsrUse = Pack.Strip(DataStream, 1)
            AltDevTyp = Pack.Strip(DataStream, 2)
            Rsv2 = Pack.Strip(DataStream, 4)
        End Sub
    End Structure

    Public Structure M200211_ModifyTokenInventory_Struct '90 Msg #200211
        Dim MsgReqDat As M200210_ModifyTokenInventory_Struct '78				Desc:Request data
        Dim NewRowVer As String '12x				Desc: New or unchanged table row version number

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= MsgReqDat.PackTable()
            st &= Pack.PackString(NewRowVer, 12)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            MsgReqDat.ReadTable(DataStream)
            NewRowVer = Pack.Strip(DataStream, 12)
        End Sub

        Public Function GetMessage_ModifyTokenInventory(ByVal MsgId As String, ByRef MsgRspDat As M200211_ModifyTokenInventory_Struct) As Boolean
            Dim resp As String = String.Empty

            If Not (GetMessage_Common("200210", "", MsgId, &H81000456, resp)) Then Return False
            Try

                AppInstance.strip(resp, 256)
                MsgRspDat.ReadTable(resp)

            Catch ex As Exception
                HandleError(&H81000456, "Error:", "Error", ex)
                Return False
            End Try
            Return True

        End Function
    End Structure

    Public Structure M200210_ModifyTokenInventory_Struct '78 Msg #200210
        Dim TabRowVer As String '12x				Desc: TokInvTab: Table row version number (to be modified)
        Dim SecDevVnd As String '3x				Desc: TokInvTab: Token vendor
        Dim SecDevIde As String '8n				Desc: TokInvTab: Token identity number (serial number of token)
        Dim SecPinReq As String '1x				Desc: TokInvTab: PIN protection required
        Dim SecDevExp As String '8n				Desc: TokInvTab: Expiry date
        Dim SecDevSta As String '4x				Desc: TokInvTab: Security device status (must not be "DELE")
        Dim SecStaRea As String '25x				Desc: TokInvTab: Text reason for status change
        Dim Rsv1 As String '17x				Desc: Reserved, space filled

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(TabRowVer, 12)
            st &= Pack.PackString(SecDevVnd, 3)
            st &= Pack.PackNString(SecDevIde, 8)
            st &= Pack.PackString(SecPinReq, 1)
            st &= Pack.PackNString(SecDevExp, 8)
            st &= Pack.PackString(SecDevSta, 4)
            st &= Pack.PackString(SecStaRea, 25)
            st &= Pack.PackString(Rsv1, 17)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            TabRowVer = Pack.Strip(DataStream, 12)
            SecDevVnd = Pack.Strip(DataStream, 3)
            SecDevIde = Pack.Strip(DataStream, 8)
            SecPinReq = Pack.Strip(DataStream, 1)
            SecDevExp = Pack.Strip(DataStream, 8)
            SecDevSta = Pack.Strip(DataStream, 4)
            SecStaRea = Pack.Strip(DataStream, 25)
            Rsv1 = Pack.Strip(DataStream, 17)
        End Sub

        Public Function SendMessage_ModifyTokenInventory(ByVal TabRowVer As String, ByVal SecDevVnd As String, ByVal SecDevIde As String, ByVal SecPinReq As String, ByVal SecDevExp As String, ByVal SecDevSta As String, ByVal SecStaRea As String, ByVal Rsv1 As String) As String

            Dim st As String = String.Empty
            Dim structInstance As M200210_ModifyTokenInventory_Struct
            structInstance.TabRowVer = TabRowVer
            structInstance.SecDevVnd = SecDevVnd
            structInstance.SecDevIde = SecDevIde
            structInstance.SecPinReq = SecPinReq
            structInstance.SecDevExp = SecDevExp
            structInstance.SecDevSta = SecDevSta
            structInstance.SecStaRea = SecStaRea
            structInstance.Rsv1 = Rsv1

            st &= structInstance.PackTable()
            Return AppInstance.SendMessageVisuallyEx("200210", st, "GEN", "", "", "")
        End Function

        Public Function SendMessage_ModifyTokenInventory(ByVal msg As M200210_ModifyTokenInventory_Struct) As String

            Dim st As String = String.Empty

            st &= msg.PackTable()
            Return AppInstance.SendMessageVisuallyEx("200210", st, "GEN", "", "", "") 'CusNum
        End Function

    End Structure

    Public Structure M200221_DeleteTokenInventory_Struct '90 Msg #200221
        Dim MsgReqDat As M200220_DeleteTokenInventory_Struct '78				Desc:Request data
        Dim NewRowVer As String '12x				Desc: New or unchanged table row version number

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= MsgReqDat.PackTable()
            st &= Pack.PackString(NewRowVer, 12)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            MsgReqDat.ReadTable(DataStream)
            NewRowVer = Pack.Strip(DataStream, 12)
        End Sub

        Public Function GetMessage_DeleteTokenInventory(ByVal MsgId As String, ByRef MsgRspDat As M200221_DeleteTokenInventory_Struct) As Boolean
            Dim resp As String = String.Empty

            If Not (GetMessage_Common("200220", "", MsgId, &H81000457, resp)) Then Return False
            Try

                AppInstance.strip(resp, 256)
                MsgRspDat.ReadTable(resp)

            Catch ex As Exception
                HandleError(&H81000457, "Error:", "Error", ex)
                Return False
            End Try
            Return True

        End Function
    End Structure

    Public Structure M200220_DeleteTokenInventory_Struct '78 Msg #200220
        Dim TabRowVer As String '12x				Desc: TokInvTab: Table row version number (to be modified)
        Dim SecDevVnd As String '3x				Desc: TokInvTab: Token vendor
        Dim SecDevIde As String '8n				Desc: TokInvTab: Token identity number (serial number of token)
        Dim SecPinReq As String '1x				Desc: TokInvTab: PIN protection required
        Dim SecDevExp As String '8n				Desc: TokInvTab: Expiry date
        Dim SecDevSta As String '4x				Desc: TokInvTab: Security device status (must be "DELE")
        Dim SecStaRea As String '25x				Desc: TokInvTab: Text reason for status change
        Dim Rsv1 As String '17x				Desc: Reserved, space filled

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(TabRowVer, 12)
            st &= Pack.PackString(SecDevVnd, 3)
            st &= Pack.PackNString(SecDevIde, 8)
            st &= Pack.PackString(SecPinReq, 1)
            st &= Pack.PackNString(SecDevExp, 8)
            st &= Pack.PackString(SecDevSta, 4)
            st &= Pack.PackString(SecStaRea, 25)
            st &= Pack.PackString(Rsv1, 17)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            TabRowVer = Pack.Strip(DataStream, 12)
            SecDevVnd = Pack.Strip(DataStream, 3)
            SecDevIde = Pack.Strip(DataStream, 8)
            SecPinReq = Pack.Strip(DataStream, 1)
            SecDevExp = Pack.Strip(DataStream, 8)
            SecDevSta = Pack.Strip(DataStream, 4)
            SecStaRea = Pack.Strip(DataStream, 25)
            Rsv1 = Pack.Strip(DataStream, 17)
        End Sub

        Public Function SendMessage_DeleteTokenInventory(ByVal TabRowVer As String, ByVal SecDevVnd As String, ByVal SecDevIde As String, ByVal SecPinReq As String, ByVal SecDevExp As String, ByVal SecDevSta As String, ByVal SecStaRea As String, ByVal Rsv1 As String) As String

            Dim st As String = String.Empty
            Dim structInstance As M200220_DeleteTokenInventory_Struct
            structInstance.TabRowVer = TabRowVer
            structInstance.SecDevVnd = SecDevVnd
            structInstance.SecDevIde = SecDevIde
            structInstance.SecPinReq = SecPinReq
            structInstance.SecDevExp = SecDevExp
            structInstance.SecDevSta = SecDevSta
            structInstance.SecStaRea = SecStaRea
            structInstance.Rsv1 = Rsv1

            st &= structInstance.PackTable()
            Return AppInstance.SendMessageVisuallyEx("200220", st, "GEN", "", "", "")
        End Function

        Public Function SendMessage_DeleteTokenInventory(ByVal msg As M200220_DeleteTokenInventory_Struct) As String

            Dim st As String = String.Empty

            st &= msg.PackTable()
            Return AppInstance.SendMessageVisuallyEx("200220", st, "GEN", "", "", "")
        End Function
    End Structure

    Public Structure M200231_AddTokenInventory_Struct '90 Msg #200231
        Dim MsgReqDat As M200230_AddTokenInventory_Struct '78				Desc:Request data
        Dim NewRowVer As String '12x				Desc: New table row version number

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= MsgReqDat.PackTable()
            st &= Pack.PackString(NewRowVer, 12)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            MsgReqDat.ReadTable(DataStream)
            NewRowVer = Pack.Strip(DataStream, 12)
        End Sub

        Public Function GetMessage_AddTokenInventory(ByVal MsgId As String, ByRef MsgRspDat As M200231_AddTokenInventory_Struct) As Boolean
            Dim resp As String = String.Empty

            If Not (GetMessage_Common("200230", "", MsgId, &H81000458, resp)) Then Return False
            Try

                AppInstance.strip(resp, 256)
                MsgRspDat.ReadTable(resp)

            Catch ex As Exception
                HandleError(&H81000458, "Error:", "Error", ex)
                Return False
            End Try
            Return True

        End Function
    End Structure

    Public Structure M200230_AddTokenInventory_Struct '78 Msg #200230
        Dim TabRowVer As String '12x				Desc: TokInvTab: Table row version number (space fileld)
        Dim SecDevVnd As String '3x				Desc: TokInvTab: Token vendor
        Dim SecDevIde As String '8n				Desc: TokInvTab: Token identity number (serial number of token)
        Dim SecPinReq As String '1x				Desc: TokInvTab: PIN protection required
        Dim SecDevExp As String '8n				Desc: TokInvTab: Expiry date
        Dim SecDevSta As String '4x				Desc: TokInvTab: Security device status (must be "FREE")
        Dim SecStaRea As String '25x				Desc: TokInvTab: Text reason for status change (must be spaces)
        Dim Rsv1 As String '17x				Desc: Reserved, space filled

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(TabRowVer, 12)
            st &= Pack.PackString(SecDevVnd, 3)
            st &= Pack.PackNString(SecDevIde, 8)
            st &= Pack.PackString(SecPinReq, 1)
            st &= Pack.PackNString(SecDevExp, 8)
            st &= Pack.PackString(SecDevSta, 4)
            st &= Pack.PackString(SecStaRea, 25)
            st &= Pack.PackString(Rsv1, 17)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            TabRowVer = Pack.Strip(DataStream, 12)
            SecDevVnd = Pack.Strip(DataStream, 3)
            SecDevIde = Pack.Strip(DataStream, 8)
            SecPinReq = Pack.Strip(DataStream, 1)
            SecDevExp = Pack.Strip(DataStream, 8)
            SecDevSta = Pack.Strip(DataStream, 4)
            SecStaRea = Pack.Strip(DataStream, 25)
            Rsv1 = Pack.Strip(DataStream, 17)
        End Sub

        Public Function SendMessage_AddTokenInventory(ByVal TabRowVer As String, ByVal SecDevVnd As String, ByVal SecDevIde As String, ByVal SecPinReq As String, ByVal SecDevExp As String, ByVal SecDevSta As String, ByVal SecStaRea As String, ByVal Rsv1 As String) As String

            Dim st As String = String.Empty
            Dim structInstance As M200230_AddTokenInventory_Struct
            structInstance.TabRowVer = TabRowVer
            structInstance.SecDevVnd = SecDevVnd
            structInstance.SecDevIde = SecDevIde
            structInstance.SecPinReq = SecPinReq
            structInstance.SecDevExp = SecDevExp
            structInstance.SecDevSta = SecDevSta
            structInstance.SecStaRea = SecStaRea
            structInstance.Rsv1 = Rsv1

            st &= structInstance.PackTable()
            Return AppInstance.SendMessageVisuallyEx("200230", st, "GEN", "", "", "")
        End Function

        Public Function SendMessage_AddTokenInventory(ByVal msg As M200230_AddTokenInventory_Struct) As String

            Dim st As String = String.Empty

            st &= msg.PackTable()
            Return AppInstance.SendMessageVisuallyEx("200230", st, "GEN", "", "", "")
        End Function
    End Structure

    Public Structure M612300_AllocateTokenClient_TsrVal_Struct '11 Msg #6123001
        Dim SecDevVnd As String '3x				Desc: Token vendor identification ("RSA" or "VSC" for Vasco)
        Dim SecDevIde As String '8x				Desc: Identity number (serial number of the identity token)

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(SecDevVnd, 3)
            st &= Pack.PackString(SecDevIde, 8)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            SecDevVnd = Pack.Strip(DataStream, 3)
            SecDevIde = Pack.Strip(DataStream, 8)
        End Sub
    End Structure

    Public Structure M612300_AllocateTokenClient_Struct '42 Msg #612300
        Dim TsrVal As M612300_AllocateTokenClient_TsrVal_Struct '11				Desc:The TSR reference of the token to be allocated
        Dim TokActFlg As String '1x	            Desc:Flag (Y/N) indicating if token is to be issued active.
        Dim Rsv1 As String '4x				    Desc: Reserved, space filled
        Dim CusNum As String '6n				Desc: The customer number of the IBK client
        Dim UsrIde As String '10x				Desc: The user part of the login user identity of the client.
        Dim CrpIde As String '10x				Desc: The corporate part of the user identity of the client.

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= TsrVal.PackTable()
            st &= Pack.PackString(TokActFlg, 1)
            st &= Pack.PackString(Rsv1, 4)
            st &= Pack.PackNString(CusNum, 6)
            st &= Pack.PackString(UsrIde, 10)
            st &= Pack.PackString(CrpIde, 10)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            TsrVal.ReadTable(DataStream)
            TokActFlg = Pack.Strip(DataStream, 1)
            Rsv1 = Pack.Strip(DataStream, 4)
            CusNum = Pack.Strip(DataStream, 6)
            UsrIde = Pack.Strip(DataStream, 10)
            CrpIde = Pack.Strip(DataStream, 10)
        End Sub
    End Structure

    Public Function SendMessage_AllocateTokenClient(ByVal p_Struct As M612300_AllocateTokenClient_Struct) As String

        Dim st As String = String.Empty

        st &= p_Struct.PackTable()
        Return AppInstance.SendMessageVisuallyEx("612300", st, "CUS", p_Struct.CusNum, "", "")
    End Function

    Public Function GetMessage_AllocateTokenClient(ByVal MsgId As String, ByRef MsgRspDat As M612300_AllocateTokenClient_Struct) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("612300", "", MsgId, &H81000459, resp)) Then Return False
        Try

            AppInstance.strip(resp, 256)
            MsgRspDat.ReadTable(resp)

        Catch ex As Exception
            HandleError(&H81000459, "Error:", "Error", ex)
            Return False
        End Try
        Return True

    End Function

    Public Function SendMessage_ActivateToken(ByVal p_Struct As M612300_AllocateTokenClient_Struct) As String

        Dim st As String = String.Empty

        st &= p_Struct.PackTable()
        Return AppInstance.SendMessageVisuallyEx("612330", st, "CUS", p_Struct.CusNum, "", "")
    End Function

    Public Function GetMessage_ActivateToken(ByVal MsgId As String, ByRef MsgRspDat As M612300_AllocateTokenClient_Struct) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("612330", "", MsgId, &H81000459, resp)) Then Return False
        Try

            AppInstance.strip(resp, 256)
            MsgRspDat.ReadTable(resp)

        Catch ex As Exception
            HandleError(&H81000459, "Error:", "Error", ex)
            Return False
        End Try
        Return True

    End Function

    Public Function SendMessage_DeActivateToken(ByVal p_Struct As M612300_AllocateTokenClient_Struct) As String

        Dim st As String = String.Empty

        st &= p_Struct.PackTable()
        Return AppInstance.SendMessageVisuallyEx("612340", st, "CUS", p_Struct.CusNum, "", "")
    End Function

    Public Function GetMessage_DeActivateToken(ByVal MsgId As String, ByRef MsgRspDat As M612300_AllocateTokenClient_Struct) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("612340", "", MsgId, &H81000459, resp)) Then Return False
        Try

            AppInstance.strip(resp, 256)
            MsgRspDat.ReadTable(resp)

        Catch ex As Exception
            HandleError(&H81000459, "Error:", "Error", ex)
            Return False
        End Try
        Return True

    End Function

    Public Structure RemoveTokenFromClient_Struct '69 Msg #612310
        Dim TsrVal As M612300_AllocateTokenClient_TsrVal_Struct '11				Desc:The TSR reference of the token to be removed
        Dim Rsv1 As String '5x				Desc: Reserved, space filled
        Dim CusNum As String '6n				Desc: The customer number of the IBK client
        Dim UsrIde As String '10x				Desc: The user part of the login user identity of the client.
        Dim CrpIde As String '10x				Desc: The corporate part of the user identity of the client.
        Dim SecDevSta As String '4x				Desc: Token status to be set (RETD, MISS or FAIL)
        Dim SecStaRea As String '23x				Desc: Reason for removal

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= TsrVal.PackTable()
            st &= Pack.PackString(Rsv1, 5)
            st &= Pack.PackNString(CusNum, 6)
            st &= Pack.PackString(UsrIde, 10)
            st &= Pack.PackString(CrpIde, 10)
            st &= Pack.PackString(SecDevSta, 4)
            st &= Pack.PackString(SecStaRea, 23)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            TsrVal.ReadTable(DataStream)
            Rsv1 = Pack.Strip(DataStream, 5)
            CusNum = Pack.Strip(DataStream, 6)
            UsrIde = Pack.Strip(DataStream, 10)
            CrpIde = Pack.Strip(DataStream, 10)
            SecDevSta = Pack.Strip(DataStream, 4)
            SecStaRea = Pack.Strip(DataStream, 23)
        End Sub
    End Structure

    Public Function SendMessage_RemoveTokenFromClient(ByVal p_Struct As RemoveTokenFromClient_Struct) As String
        Dim st As String = String.Empty
        st &= p_Struct.PackTable()
        Return AppInstance.SendMessageVisuallyEx("612310", st, "CUS", p_Struct.CusNum, "", "")
    End Function

    Public Function GetMessage_RemoveTokenFromClient(ByVal MsgId As String, ByRef MsgRspDat As RemoveTokenFromClient_Struct) As Boolean
        Dim resp As String = String.Empty
        If Not (GetMessage_Common("612310", "", MsgId, &H81000460, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            MsgRspDat.ReadTable(resp)
        Catch ex As Exception
            HandleError(&H81000460, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

End Module

Public Module CorporateRouting

    Public Structure DwnRouDat_Struct '0 Msg #2010011
        Dim TabRowver As String '12n				Desc: Table row version
        Dim ObjIdeMaj As String '13x				Desc: Major object identifier known to ICS or other programs
        Dim ObjIdeMin As String '13x				Desc: Minor object identifier known to ICS or other programs
        Dim DwnTgtCde As String '6x				Desc: Targeted directory
        Dim ChgStp As String '14x				Desc: Date and time this table entry was changed
        Dim ChgUid As String '10x				Desc: User identity of the SAIB user making the change

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackNString(TabRowver, 12)
            st &= Pack.PackString(ObjIdeMaj, 13)
            st &= Pack.PackString(ObjIdeMin, 13)
            st &= Pack.PackString(DwnTgtCde, 6)
            st &= Pack.PackString(ChgStp, 14)
            st &= Pack.PackString(ChgUid, 10)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            TabRowver = Pack.Strip(DataStream, 12)
            ObjIdeMaj = Pack.Strip(DataStream, 13)
            ObjIdeMin = Pack.Strip(DataStream, 13)
            DwnTgtCde = Pack.Strip(DataStream, 6)
            ChgStp = Pack.Strip(DataStream, 14)
            ChgUid = Pack.Strip(DataStream, 10)
        End Sub
    End Structure

    Public Function SendMessage_EnumCorpRouting(ByVal CusNum As String) As String

        Dim st As String = String.Empty
        st &= Pack.PackNString(CusNum, 6)
        st &= Pack.PackString(" ", 26)
        Return AppInstance.SendMessageVisuallyEx("201000", st, "CUS", CusNum, "", "")
    End Function

    Public Function GetMessage_EnumCorpRouting(ByVal MsgId As String, ByRef MsgRspDat As DwnRouDat_Struct()) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("201000", "", MsgId, &H81000624, resp)) Then Return False
        Try

            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 32)
            Dim ItmCnt As Integer = AppInstance.ExInt(Pack.Strip(resp, 3))
            If ItmCnt <= 0 Then
                Erase MsgRspDat
                Return True
            End If
            ReDim MsgRspDat(ItmCnt - 1)
            For i As Integer = 0 To ItmCnt - 1
                MsgRspDat(i).ReadTable(resp)
            Next
        Catch ex As Exception
            HandleError(&H81000624, "Error:", "Error", ex)
            Return False
        End Try
        Return True

    End Function

    Public Function SendMessage_AddCorpRouting(ByVal CusNum As String, ByRef RouDat As DwnRouDat_Struct) As String
        Dim st As String = String.Empty
        st &= Pack.PackString(CusNum, 6)
        st &= Pack.PackString("", 26)
        st &= RouDat.PackTable()
        Return AppInstance.SendMessageVisuallyEx("201010", st, "CUS", CusNum, "", "")
    End Function

    Public Function SendMessage_EditCorpRouting(ByVal CusNum As String, ByRef RouDat As DwnRouDat_Struct) As String
        Dim st As String = String.Empty
        st &= Pack.PackString(CusNum, 6)
        st &= Pack.PackString("", 26)
        st &= RouDat.PackTable()
        Return AppInstance.SendMessageVisuallyEx("201020", st, "CUS", CusNum, "", "")
    End Function

    Public Function SendMessage_DeleteCorpRouting(ByVal CusNum As String, ByRef RouDat As DwnRouDat_Struct) As String
        Dim st As String = String.Empty
        st &= Pack.PackString(CusNum, 6)
        st &= Pack.PackString("", 26)
        st &= RouDat.PackTable()
        Return AppInstance.SendMessageVisuallyEx("201030", st, "CUS", CusNum, "", "")
    End Function

    Public Function GetMessage_AddCorpRouting(ByVal MsgId As String, ByRef RouDat As DwnRouDat_Struct) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("201010", "", MsgId, &H81000517, resp)) Then Return False
        Try

            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 6)  'CusNum
            AppInstance.strip(resp, 26) 'Rsv1
            RouDat.ReadTable(resp)

        Catch ex As Exception
            HandleError(&H81000518, "Error:", "Error", ex)
            Return False
        End Try
        Return True

    End Function

    Public Function GetMessage_EditCorpRouting(ByVal MsgId As String, ByRef RouDat As DwnRouDat_Struct) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("201020", "", MsgId, &H81000519, resp)) Then Return False
        Try

            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 6)  'CusNum
            AppInstance.strip(resp, 26) 'Rsv1
            RouDat.ReadTable(resp)

        Catch ex As Exception
            HandleError(&H81000520, "Error:", "Error", ex)
            Return False
        End Try
        Return True

    End Function

    Public Function GetMessage_DeleteCorpRouting(ByVal MsgId As String, ByRef RouDat As DwnRouDat_Struct) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("201030", "", MsgId, &H81000521, resp)) Then Return False
        Try

            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 6)  'CusNum
            AppInstance.strip(resp, 26) 'Rsv1
            RouDat.ReadTable(resp)

        Catch ex As Exception
            HandleError(&H81000522, "Error:", "Error", ex)
            Return False
        End Try
        Return True

    End Function

End Module

Public Module BlackList

    Public Structure BlackList_Struct
        Dim TabRowVer As String  '12n
        Dim NatCde As String     '2x
        Dim DocTyp As String     '2x
        Dim DocNum As String     '12x
        Dim NmeEng As String     '35x
        Dim NmeAra As String     '35x
        Dim BlkReaCde As String  '5x
        Dim AddInfLen As String  '3n
        Dim AddInf As String     '127x
        Dim SibCusNum As String  '6x
        Dim UsrIde As String     '10x
        Dim UsrStp As String     '14x

        Public Function ReadString(ByVal st As String) As Boolean
            If st Is Nothing Then Return False

            TabRowVer = Trim(AppInstance.strip(st, 12))
            NatCde = Trim(AppInstance.strip(st, 2))
            DocTyp = Trim(AppInstance.strip(st, 2))
            DocNum = Trim(AppInstance.strip(st, 12))
            NmeEng = Trim(AppInstance.strip(st, 35))
            NmeAra = Trim(AppInstance.strip(st, 35))
            BlkReaCde = Trim(AppInstance.strip(st, 5))
            SibCusNum = Trim(AppInstance.strip(st, 6))
            AppInstance.strip(st, 37)
            UsrIde = Trim(AppInstance.strip(st, 10))
            UsrStp = Trim(AppInstance.strip(st, 14))
            AddInfLen = Trim(AppInstance.strip(st, 3))
            AddInf = Trim(AppInstance.strip(st, 127))
        End Function

        Public Function PackString() As String
            Dim st As String
            st = AppInstance.PackNSString(TabRowVer, 12, False)
            st &= AppInstance.PackString(NatCde, 2)
            st &= AppInstance.PackString(DocTyp, 2)
            st &= AppInstance.PackString(DocNum, 12)
            st &= AppInstance.PackString(NmeEng, 35)
            st &= AppInstance.PackString(NmeAra, 35)
            st &= AppInstance.PackString(BlkReaCde, 5)
            st &= AppInstance.PackString(SibCusNum, 6)
            st &= AppInstance.PackString("", 37)   'Reserved
            st &= AppInstance.PackString(UsrIde, 10)
            st &= AppInstance.PackString(UsrStp, 14)
            st &= AppInstance.PackNSString(AddInfLen, 3, False)
            st &= AppInstance.PackString(AddInf, 127)
            Return st
        End Function


        Public Function SendMessage_EnumBlackList(ByRef BlackList As BlackList_Struct) As String
            Dim tmpStr As String = ""

            With BlackList
                tmpStr = AppInstance.PackString(.NatCde, 2)
                tmpStr &= AppInstance.PackString(.DocTyp, 2)
                tmpStr &= AppInstance.PackString(.DocNum, 12)
                tmpStr &= AppInstance.PackString("", 112)  'reserved
            End With


            Return AppInstance.SendMessageVisuallyEx("771000", tmpStr, "", "", "", "")
        End Function


        Public Function GetMessage_EnumBlackList(ByVal MsgId As String, ByRef BlackListItems() As BlackList_Struct, ByRef FoundCount As Integer) As Boolean
            '771000
            Dim resp As String = String.Empty
            Dim tmpStr As String
            Dim i, count As Integer

            Erase BlackListItems
            BlackListItems = Nothing

            If Not (GetMessage_Common("771000", "", MsgId, &H81000560, resp)) Then Return False

            Try
                AppInstance.strip(resp, 256)
                AppInstance.strip(resp, 128) 'MsgReqDat

                FoundCount = AppInstance.ExInt(AppInstance.strip(resp, 4))
                count = CType(AppInstance.strip(resp, 4), Integer)
                If count <= 0 Then
                    Erase BlackListItems
                    Return False
                End If
                ShowBusyIcon(True)
                If count <> FoundCount Then
                    AppInstance.ModalMessageBox("There are more blacklist entries in the systems than can be shown here." & vbCrLf & _
                            "Of the " & FoundCount & " recorded, only " & count & " can be shown", , , MessageBoxIcon.Information, "ICE Results")
                    'Application.DoEvents()
                End If
                ReDim BlackListItems(count - 1)
                For i = 0 To BlackListItems.Length - 1
                    tmpStr = AppInstance.strip(resp, 300)
                    BlackListItems(i).ReadString(tmpStr)
                Next
            Catch ex As Exception
                HandleError(&H81000561, "GetMessage_EnumBlackList:" & ex.Message)
                Return False
            End Try
            Return True
        End Function

        Public Function SendMessage_AddBlackList(ByRef BlackList As BlackList_Struct) As String
            Dim tmpStr As String = ""

            tmpStr = BlackList.PackString
            Return AppInstance.SendMessageVisuallyEx("771010", tmpStr, "", "", "", "")
        End Function

        Public Function GetMessage_AddBlackList(ByVal MsgId As String, ByRef ReturnBlackList As BlackList_Struct) As Boolean
            '771010
            Dim resp As String = String.Empty

            ReturnBlackList = Nothing
            If Not (GetMessage_Common("771010", "", MsgId, &H81000562, resp)) Then Return False

            Try
                AppInstance.strip(resp, 256)
                If resp.Length <> 300 Then
                    Return False
                End If

                ReturnBlackList.ReadString(resp)

            Catch ex As Exception
                HandleError(&H81000563, "GetMessage_AddBlackList:" & ex.Message)
                Return False
            End Try
            Return True
        End Function

        Public Function SendMessage_ModifyBlackList(ByRef BlackList As BlackList_Struct) As String
            Dim tmpStr As String = ""

            tmpStr = BlackList.PackString
            Return AppInstance.SendMessageVisuallyEx("771030", tmpStr, "", "", "", "")

        End Function

        Public Function GetMessage_ModifyBlackList(ByVal MsgId As String, ByRef ReturnBlackList As BlackList_Struct) As Boolean
            '771030
            Dim resp As String = String.Empty

            ReturnBlackList = Nothing
            If Not (GetMessage_Common("771030", "", MsgId, &H81000564, resp)) Then Return False

            Try
                AppInstance.strip(resp, 256)
                If resp.Length <> 300 Then
                    Return False
                End If

                ReturnBlackList.ReadString(resp)

            Catch ex As Exception
                HandleError(&H81000565, "GetMessage_ModifyBlackList:" & ex.Message)
                Return False
            End Try
            Return True
        End Function

        Public Function SendMessage_RemoveBlackList(ByRef BlackList As BlackList_Struct) As String
            Dim tmpStr As String = ""

            tmpStr = BlackList.PackString
            Return AppInstance.SendMessageVisuallyEx("771020", tmpStr, "", "", "", "")
        End Function

        Public Function GetMessage_RemoveBlackList(ByVal MsgId As String, ByRef ReturnBlackList As BlackList_Struct) As Boolean
            '771020
            Dim resp As String = String.Empty

            ReturnBlackList = Nothing
            If Not (GetMessage_Common("771020", "", MsgId, &H81000566, resp)) Then Return False

            Try
                AppInstance.strip(resp, 256)
                If resp.Length <> 300 Then
                    Return False
                End If

                ReturnBlackList.ReadString(resp)

            Catch ex As Exception
                HandleError(&H81000567, "GetMessage_RemoveBlackList:" & ex.Message)
                Return False
            End Try
            Return True
        End Function

    End Structure


    '*******************************************************************************

End Module

Public Module Account_Structs

    Public Function SendMessage_ReopenAccount(ByVal AccNum As String) As String
        Dim st As String
        st = Pack.PackString(AccNum, 13) 'AccNum
        st &= Pack.PackString(" ", 87) 'RSV03
        Return AppInstance.SendMessageVisuallyEx("773040", st, "ACC", ExtractCusNumFromAcc(AccNum), AccNum, "")
    End Function

    Public Function SendMessage_EnumerateAccountClosureReasonCodes() As String
        Dim st As String
        st = String.Empty
        Return AppInstance.SendMessageVisuallyEx("773050", st, "GEN", "", "", "")
    End Function

    Public Function GetMessage_ReopenAccount(ByVal MsgId As String, ByRef ClsRea As String, ByRef ClsNte As String) As Boolean
        Dim resp As String = String.Empty
        Dim verStr As String
        Dim i, count As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow

        If Not (GetMessage_Common("773040", "", MsgId, &H81000558, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 13) 'AccNum
            ClsRea = AppInstance.strip(resp, 2) 'ClsReaCde	2x
            AppInstance.strip(resp, 80) 'Rsv1	80x
            AppInstance.strip(resp, 2) 'ClsTxtLng	2x
            AppInstance.strip(resp, 3) 'ClsTxtLen	3n
            ClsNte = AppInstance.strip(resp, 400) 'ClsTxt(Varies)

        Catch ex As Exception
            HandleError(&H81000558, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Function GetMessage_EnumerateAccountClosureReasonCodes(ByVal MsgId As String, ByRef mADO As AdoAccess) As Boolean
        Dim resp As String = String.Empty
        Dim verStr As String
        Dim i, count As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow

        If Not (GetMessage_Common("773050", "", MsgId, &H81000558, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            count = CInt(Pack.Strip(resp, 2))
            If count <= 0 Then
                Erase ClsReaCdeTable
                mADO.DeleteTable("ClsCdeTab")
                Return True
            End If
            ReDim ClsReaCdeTable(count - 1)

            mADO.DeleteTable("ClsCdeTab")
            For i = 0 To ClsReaCdeTable.Length - 1
                'verStr = AppInstance.strip(resp, 100)
                ClsReaCdeTable(i).ReadTable(resp)
                With ClsReaCdeTable(i)
                    mADO.AddRowToTable("ClsCdeTab", "ClsReaCde,  ClsCatCde,  ClsTxtFlg,  Rsv2,  ClsDocFlg,  ClsDscEng,  ClsDscAra" _
                         , "Values('" & .ClsReaCde & "','" & .ClsCatCde & "','" & .ClsTxtFlg & "','" & _
                                       .Rsv2 & "','" & .ClsDocFlg & "','" & .ClsDscEng & "','" & .ClsDscAra & "')")
                End With
            Next
        Catch ex As Exception
            HandleError(&H81000558, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    Public Structure CoreSys_AccClsRea '0 Msg #7730511
        Dim ClsReaCde As String '2x				Desc: Closure reason code
        Dim ClsCatCde As String '1x				Desc: Closure category code "1" or "2"
        Dim ClsTxtFlg As String '1x				Desc: Flag (Y/N) indication whether an explanation text is required
        Dim Rsv2 As String '35x				    Desc: Reserved, space filled
        Dim ClsDocFlg As String '1x				Desc: Flag (Y/N) indicating whether documentation is required.
        Dim ClsDscEng As String '30x			Desc: English closure reason description
        Dim ClsDscAra As String '30x			Desc: Arabic closure reason description

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(ClsReaCde, 2)
            st &= Pack.PackString(ClsCatCde, 1)
            st &= Pack.PackString(ClsTxtFlg, 1)
            st &= Pack.PackString(Rsv2, 35)
            st &= Pack.PackString(ClsDocFlg, 1)
            st &= Pack.PackString(ClsDscEng, 30)
            st &= Pack.PackString(ClsDscAra, 30)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            ClsReaCde = Pack.Strip(DataStream, 2)
            ClsCatCde = Pack.Strip(DataStream, 1)
            ClsTxtFlg = Pack.Strip(DataStream, 1)
            Rsv2 = Pack.Strip(DataStream, 35)
            ClsDocFlg = Pack.Strip(DataStream, 1)
            ClsDscEng = Pack.Strip(DataStream, 30)
            ClsDscAra = Pack.Strip(DataStream, 30)
        End Sub


    End Structure
    '''

End Module

Public Module PayrollMessages

    Public CountFormatFlag As String = "X"

#Region "General Structures..."

    Public Structure CorPayroll_Definition_Struct '175 Msg #1
        Dim ChnICE As String '1x				Desc: Flag (Y/N) if the payroll may be created / edited through ICE
        Dim ChnCIB As String '1x				Desc: Flag (Y/N) if the payroll may be created / edited through CIB
        Dim PayAgrFlg As String '1x				Desc: Flag (Y/N) payroll agreement exists and the payroll may execute
        Dim PayRelCde As String '4x				Desc: Payroll release to execution code:"AUTO" automatic release"HOLD" manual release (unspecified)"HORO" hold for account officer release
        Dim AccOvd As String '1x				Desc: Flag (Y/N) to allow overdrawing funding account
        Dim AccDebAll As String '1x	            Desc: Flag (Y/N) if entire payroll funds required at execution
        Dim AccPstDet As String '1x	            Desc: Flag (Y/N) if each payout is to be reflected as a detail debit
        Dim AccOff As String '3x				Desc: Account office to be contacted to release this payroll
        Dim CusNum As String '6n				Desc: Corporate customer number owning this payroll stream.
        Dim PyrIde As String '16x				Desc: Payroll identifier
        Dim PyrSerNum As String '6n				Desc: Current payroll serial number
        Dim PyrDteBeg As String '8x	            DEsc: Beginning date the (current) payroll period (YYYYMMDD)
        Dim PyrDetEnd As String '8x	            Desc: Ending date of the (current) payroll period (YYYYMMDD)
        Dim PyrRegMth As String '6x	            Desc: Regular monthly payroll date (YYYYMM)
        Dim PyrValDte As String '8x	            Desc: Required value date for posting the payouts (YYYYMMDD)
        Dim PyrDsc As String '16x	            Desc: Payroll description for this payout
        Dim PyrNam As String '26x	            Desc: Payroll name
        Dim PyrCrpLim As String '1x	            Desc: Flag (Y/N) if the amount is to be taken from the corporate limit
        Dim PyrAutLim As String '1x	            Desc: Flag (Y/N) if the amount is to be inside the authorizers limit
        Dim InpCtlAmt As String '1x	            Desc: Input control by amount required (“N” or space if not required) “Y” = amount of each currency to be input “H” = a single hash total of all currencies to be input
        Dim InpCtlCnt As String '1x	            Desc: Input control by count (Y/N or space) required
        Dim PyrStaCde As String '1x				Desc: Payroll status code"A" = active, "D" = pending deletion
        Dim PyrFrqCde As String '2x				Desc: Payroll default frequency"GM" Gregorian monthly"HM" Hijra monthly "RQ" On request
        Dim PyrAddFrq As String '1x				Desc: Flag (Y/N) if additional payrolls outside the frequency are allowed
        Dim AccNum As String '13n				Desc: Account number (at SAIB) to be debited for this payroll
        Dim AccNumChg As String '1x				Desc: Flag (Y/N) whether the debit account number may be changed
        Dim RefFmtDef As FldFmtDef_Struct '10x	Desc: Reference format definition, spaces if free form
        Dim HasDep As String '1x				Desc: Flag (Y/N) whether department is to be included
        Dim DepFmtDef As FldFmtDef_Struct '10x	Desc: Department format definition, spaces if free form
        Dim HasGrd As String '1x				Desc: Flag (Y/N) whether employee grade are to be included
        Dim GrdFmtDef As FldFmtDef_Struct '10x	Desc: Grade format definition, spaces if free form
        Dim HasDsc As String '1x				Desc: Flag (Y/N) whether description is to be included
        Dim HasBnkSar As String '1x				Desc: Flag (Y/N) whether Sarie banks are to be allowed
        Dim HasBnkSwf As String '1x				Desc: Flag (Y/N) whether SWIFT banks are to be allowed
        Dim HasCcyCde As String '1x				Desc: Flag (Y/N) whether non-SAR currency is allowed
        Dim CcyCde As String '3x				Desc: Currency code, "SAR" or spaces if any currency is allowed
        Dim NamLngDir As String  '1x	        Desc:Language and direction (codes as FdfLngDir) for employee name

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(ChnICE, 1)
            st &= Pack.PackString(ChnCIB, 1)
            st &= Pack.PackString(PayAgrFlg, 1)
            st &= Pack.PackString(PayRelCde, 4)
            st &= Pack.PackString(AccOvd, 1)
            st &= Pack.PackString(AccDebAll, 1)
            st &= Pack.PackString(AccPstDet, 1)
            st &= Pack.PackString(AccOff, 3)
            st &= Pack.PackNString(CusNum, 6)
            st &= Pack.PackString(PyrIde, 16)
            st &= Pack.PackNString(PyrSerNum, 6)
            st &= Pack.PackString(PyrDteBeg, 8)
            st &= Pack.PackString(PyrDetEnd, 8)
            st &= Pack.PackString(PyrRegMth, 6)
            st &= Pack.PackString(PyrValDte, 8)
            st &= Pack.PackString(PyrDsc, 16)
            st &= Pack.PackString(PyrNam, 26)
            st &= Pack.PackString(PyrCrpLim, 1)
            st &= Pack.PackString(PyrAutLim, 1)
            st &= Pack.PackString(InpCtlAmt, 1)
            st &= Pack.PackString(InpCtlCnt, 1)
            st &= Pack.PackString(PyrStaCde, 1)
            st &= Pack.PackString(PyrFrqCde, 2)
            st &= Pack.PackString(PyrAddFrq, 1)
            st &= Pack.PackNString(AccNum, 13)
            st &= Pack.PackString(AccNumChg, 1)
            st &= RefFmtDef.PackTable()
            st &= Pack.PackString(HasDep, 1)
            st &= DepFmtDef.PackTable()
            st &= Pack.PackString(HasGrd, 1)
            st &= GrdFmtDef.PackTable()
            st &= Pack.PackString(HasDsc, 1)
            st &= Pack.PackString(HasBnkSar, 1)
            st &= Pack.PackString(HasBnkSwf, 1)
            st &= Pack.PackString(HasCcyCde, 1)
            st &= Pack.PackString(CcyCde, 3)
            st &= Pack.PackString(NamLngDir, 1)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            ChnICE = Pack.Strip(DataStream, 1)
            ChnCIB = Pack.Strip(DataStream, 1)
            PayAgrFlg = Pack.Strip(DataStream, 1)
            PayRelCde = Pack.Strip(DataStream, 4)
            AccOvd = Pack.Strip(DataStream, 1)
            AccDebAll = Pack.Strip(DataStream, 1)
            AccPstDet = Pack.Strip(DataStream, 1)
            AccOff = Pack.Strip(DataStream, 3)
            CusNum = Pack.Strip(DataStream, 6)
            PyrIde = Pack.Strip(DataStream, 16)
            PyrSerNum = Pack.Strip(DataStream, 6)
            PyrDteBeg = Pack.Strip(DataStream, 8)
            PyrDetEnd = Pack.Strip(DataStream, 8)
            PyrRegMth = Pack.Strip(DataStream, 6)
            PyrValDte = Pack.Strip(DataStream, 8)
            PyrDsc = Pack.Strip(DataStream, 16)
            PyrNam = Pack.Strip(DataStream, 26)
            PyrCrpLim = Pack.Strip(DataStream, 1)
            PyrAutLim = Pack.Strip(DataStream, 1)
            InpCtlAmt = Pack.Strip(DataStream, 1)
            InpCtlCnt = Pack.Strip(DataStream, 1)
            PyrStaCde = Pack.Strip(DataStream, 1)
            PyrFrqCde = Pack.Strip(DataStream, 2)
            PyrAddFrq = Pack.Strip(DataStream, 1)
            AccNum = Pack.Strip(DataStream, 13)
            AccNumChg = Pack.Strip(DataStream, 1)
            RefFmtDef.ReadTable(DataStream) '10
            HasDep = Pack.Strip(DataStream, 1)
            DepFmtDef.ReadTable(DataStream) '10
            HasGrd = Pack.Strip(DataStream, 1)
            GrdFmtDef.ReadTable(DataStream) '10
            HasDsc = Pack.Strip(DataStream, 1)
            HasBnkSar = Pack.Strip(DataStream, 1)
            HasBnkSwf = Pack.Strip(DataStream, 1)
            HasCcyCde = Pack.Strip(DataStream, 1)
            CcyCde = Pack.Strip(DataStream, 3)
            NamLngDir = Pack.Strip(DataStream, 1)
        End Sub
    End Structure
    Public Structure CorPayroll_Definition_Item_Struct '750 Msg #480010
        Dim TabRowVer As String '12n				Desc: Table row version
        Dim CorPayDef As CorPayroll_Definition_Struct '175				Desc:Corporate payroll definition
        Dim CorPrpMod As CorPayroll_Prepare_Mod_Struct '38				Desc:Corporate payroll preparation status 
        Dim CorPayMod As CorPayroll_Mod_Struct '72				Desc:Corporate payroll definition change history
        Dim RsvPayMod As String '3x				Desc: Reserved, space filled
        Dim CorPayTot As CorPayroll_CorPayTot_Struct '442 Desc: Payroll totals
        Dim RsvPayTot As String '8x             Desc: Reserved, space filled
        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackNString(TabRowVer, 12)
            st &= CorPayDef.PackTable()
            st &= CorPrpMod.PackTable()
            st &= CorPayMod.PackTable()
            st &= Pack.PackString(RsvPayMod, 3)
            st &= CorPayTot.PackTable()
            st &= Pack.PackString(RsvPayTot, 8)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            TabRowVer = Pack.Strip(DataStream, 12)
            CorPayDef.ReadTable(DataStream)
            CorPrpMod.ReadTable(DataStream)
            CorPayMod.ReadTable(DataStream)
            RsvPayMod = Pack.Strip(DataStream, 3)
            CorPayTot.ReadTable(DataStream)
            RsvPayTot = Pack.Strip(DataStream, 8)
        End Sub


    End Structure
    Public Structure CorPayroll_Key_Struct '28 Msg #12
        Dim CusNum As String '6n				Desc: Corporate customer number owning this payroll stream.
        Dim PyrIde As String '16x				Desc: Payroll identifier
        Dim PyrSerNum As String '6n				Desc: Current payroll serial number

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackNString(CusNum, 6)
            st &= Pack.PackString(PyrIde, 16)
            st &= Pack.PackNString(PyrSerNum, 6)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            CusNum = Pack.Strip(DataStream, 6)
            PyrIde = Pack.Strip(DataStream, 16)
            PyrSerNum = Pack.Strip(DataStream, 6)
        End Sub
    End Structure

    Public Structure CorPayroll_Mod_Struct '72 Msg #3
        Dim CreChnIde As String '4x				Desc: Name of the creating channel: "ICE " or "CIB "
        Dim CreStp As String '14x				Desc: Date and time of creation (YYYYMMDDhhmmss)
        Dim CreCorKey As String '10x				Desc: Corporate identification creating the payroll
        Dim CreUsrKey As String '10x				Desc: Corporate user identification creating the payroll
        Dim ChgStp As String '14x				Desc: Date and time of last change (YYYYMMDDhhmmss)
        Dim ChgCorKey As String '10x				Desc: Corporate identification making the change
        Dim ChgUsrKey As String '10x				Desc: Corporate user identification making the change

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(CreChnIde, 4)
            st &= Pack.PackString(CreStp, 14)
            st &= Pack.PackString(CreCorKey, 10)
            st &= Pack.PackString(CreUsrKey, 10)
            st &= Pack.PackString(ChgStp, 14)
            st &= Pack.PackString(ChgCorKey, 10)
            st &= Pack.PackString(ChgUsrKey, 10)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            CreChnIde = Pack.Strip(DataStream, 4)
            CreStp = Pack.Strip(DataStream, 14)
            CreCorKey = Pack.Strip(DataStream, 10)
            CreUsrKey = Pack.Strip(DataStream, 10)
            ChgStp = Pack.Strip(DataStream, 14)
            ChgCorKey = Pack.Strip(DataStream, 10)
            ChgUsrKey = Pack.Strip(DataStream, 10)
        End Sub
    End Structure

    Public Structure CorPayroll_PyrTotDat_Struct '34	    Total payroll amount and count data
        Dim CptCcy As String '3x	Currency code or “S$$” for SAR equivalent or “H$$” for hash total
        Dim CntFlg As String '1x	Specifies the encoding used for the counts of amounts (see note)
        Dim CptAmt As String '10n	Total amount in the stated currency (as LCU)
        Dim CptCnt As Integer '4n	Total count of amounts in the stated currency.
        Dim ExpFlg As String '1x	Flag (Yas string 'N) indicating client has supplied expectation data
        Dim Rsv001 As String '1x	Reserved, space filled
        Dim ExpAmt As String '10n	Expected total amount in the stated currency (as LCU)
        Dim ExpCnt As String '4n	Expected total count of amounts in the stated currency.
        Public Function PackTable() As String
            If CntFlg Is Nothing OrElse CntFlg.Trim = "" Then CntFlg = CountFormatFlag
            Dim st As String = String.Empty
            st &= Pack.PackString(CptCcy, 3)
            st &= Pack.PackString(CntFlg, 1)
            st &= Pack.PackString(CptAmt, 10)
            st &= CStr(IIf(CntFlg = "X", CNEP0100.NumEngClass.ConvertToBase64(CptCnt), Pack.PackNString(CptCnt.ToString, 4)))
            st &= Pack.PackString(ExpFlg, 1)
            st &= CStr(IIf(CntFlg = "X", " ", "0")) 'Pack.PackString(" ", 1)
            st &= Pack.PackString(ExpAmt, 10)
            st &= CStr(IIf(CntFlg = "X", CNEP0100.NumEngClass.ConvertToBase64(AppInstance.ExInt(ExpCnt)), Pack.PackNString(ExpCnt, 4))) 'Pack.PackString(ExpCnt, 4)
            Return st
        End Function
        Public Sub ReadTable(ByRef DataStream As String)
            Dim st As String
            CptCcy = Pack.Strip(DataStream, 3)
            CntFlg = Pack.Strip(DataStream, 1).ToUpper
            CptAmt = Pack.Strip(DataStream, 10)
            st = Pack.Strip(DataStream, 4) : CptCnt = CInt(IIf(CntFlg = "X", CNEP0100.NumEngClass.Base64toDecimal(st), AppInstance.ExInt(st)))
            ExpFlg = Pack.Strip(DataStream, 1)
            Rsv001 = Pack.Strip(DataStream, 1)
            ExpAmt = Pack.Strip(DataStream, 10)
            ExpCnt = Pack.Strip(DataStream, 4)
        End Sub
    End Structure

    Public Structure CorPayroll_CorPayTot_Struct '442 Payroll amounts (most recent payroll preparation)

        Dim H__PyrTot As CorPayroll_PyrTotDat_Struct '34x	Hash total of all currencies
        Dim S__PyrTot As CorPayroll_PyrTotDat_Struct '34x	SAR equivalent totals of all currencies
        Dim SarPyrTot As CorPayroll_PyrTotDat_Struct '34x	SAR totals
        Dim PyrTot() As CorPayroll_PyrTotDat_Struct '10*34x	Payroll totals for up to 10 other currencies in this payroll

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= H__PyrTot.PackTable()
            st &= S__PyrTot.PackTable()
            st &= SarPyrTot.PackTable()
            If (Not (PyrTot Is Nothing)) AndAlso (PyrTot.Length = 10) Then
                For i As Integer = 0 To 9 : st &= PyrTot(i).PackTable() : Next
            End If
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            H__PyrTot.ReadTable(DataStream)
            S__PyrTot.ReadTable(DataStream)
            SarPyrTot.ReadTable(DataStream)
            ReDim PyrTot(9)
            For i As Integer = 0 To 9
                PyrTot(i).ReadTable(DataStream)
            Next
        End Sub
    End Structure

    Public Structure CorPayroll_Prepare_Mod_Struct '38 Msg #2
        Dim PyrPrpSta As String '4x	            Desc: Payroll preparation status
        Dim PrpStp As String '14x	            Desc: Date and time of preparation (YYYYMMDDhhmmss)
        Dim PrpCorKey As String '10x	        Desc: Corporate identification preparing the payroll
        Dim PrpUsrKey As String '10x	        Desc: Corporate user identification preparing the payroll

        Public Function PackTable() As String
            Dim st As String = String.Empty
            'CorPrpMod 38
            st &= Pack.PackString(PyrPrpSta, 4)
            st &= Pack.PackString(PrpStp, 14)
            st &= Pack.PackString(PrpCorKey, 10)
            st &= Pack.PackString(PrpUsrKey, 10)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            'CorPrpMod 38
            PyrPrpSta = Pack.Strip(DataStream, 4)
            PrpStp = Pack.Strip(DataStream, 14)
            PrpCorKey = Pack.Strip(DataStream, 10)
            PrpUsrKey = Pack.Strip(DataStream, 10)
        End Sub
    End Structure

    Public Structure CorPayRoll_DynCntDat_Struct '128x, App #AP0856, Msg #
        'PayRecKey 28: Payroll key
        Dim CusNum As String '6x				Desc: "
        Dim PyrIde As String '16x				Desc: "
        Dim PyrSerNum As String '6x				Desc: "
        'TakOvrTok 13: Take-over-token data or spaces if this is not a take-over
        Dim TakOvrFlg As String '1x				Desc: "
        Dim TakOvrVal As String '12x				Desc: "
        'BegPosDat 11: Starting position (employee key)
        Dim BegPosTyp As String '3x				Desc: "
        Dim BegPosRef As String '8x				Desc: "
        Dim RsvDyn05 As String  '8x				Desc: Reserved, space filled
        Dim MaxRecReq As String '4n				Desc: Maximum number of employee records to be returned
        Dim ChnAutCnt As String '1x	            Desc: Flag (Y/N) requesting auto continuance (set by channel)
        'FltChgDat 9: Filter on record content
        Dim FltChgAmt As String '3x				Desc: "
        Dim FltChgFld As String '3x				Desc: "
        Dim FltChgRec As String '3x				Desc: "
        Dim PosOffCnt As String '4x	            Desc: Offset in records forward or backward (see BegPosTyp) or zero (or spaces)
        Dim ResPosFlg As String '1x	            Desc: Channel has reset the position for a new retrieval (BegPosDat changed)
        Dim RsvDyn10 As String '17x	            Desc: Reserved, space filled
        'ChnRspDat	32:Channel Response Data (set by ICS)
        '--CntPosDat 11:: Continuance position (employee key)
        Dim CntPosTyp As String '3x	            Desc: •	Continue from position type
        Dim CntPosRef As String '8x	            Desc: •	Employee reference (identifier) or spaces when not relevant
        Dim RsvDyn15 As String '8x	            Desc: Reserved, space filled
        Dim IcsAutCnt As String '1x	            Desc: Flag (Y/N) indicating auto continuance allowed (set by ICS)
        Dim RsvDyn20 As String '12x	            Desc: Reserved, space filled

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(CusNum, 6)
            st &= Pack.PackString(PyrIde, 16)
            st &= Pack.PackString(PyrSerNum, 6)
            st &= Pack.PackString(TakOvrFlg, 1)
            st &= Pack.PackString(TakOvrVal, 12)
            st &= Pack.PackString(BegPosTyp, 3)
            st &= Pack.PackString(BegPosRef, 8)
            st &= Pack.PackString(RsvDyn05, 8)
            st &= Pack.PackNString(MaxRecReq, 4)
            st &= Pack.PackString(ChnAutCnt, 1)
            st &= Pack.PackString(FltChgAmt, 3)
            st &= Pack.PackString(FltChgFld, 3)
            st &= Pack.PackString(FltChgRec, 3)
            st &= Pack.PackString(PosOffCnt, 4)
            st &= Pack.PackString(ResPosFlg, 1)
            st &= Pack.PackString(RsvDyn10, 17)
            st &= Pack.PackString(CntPosTyp, 3)
            st &= Pack.PackString(CntPosRef, 8)
            st &= Pack.PackString(RsvDyn15, 8)
            st &= Pack.PackString(IcsAutCnt, 1)
            st &= Pack.PackString(RsvDyn20, 12)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            CusNum = Pack.Strip(DataStream, 6)
            PyrIde = Pack.Strip(DataStream, 16)
            PyrSerNum = Pack.Strip(DataStream, 6)
            TakOvrFlg = Pack.Strip(DataStream, 1)
            TakOvrVal = Pack.Strip(DataStream, 12)
            BegPosTyp = Pack.Strip(DataStream, 3)
            BegPosRef = Pack.Strip(DataStream, 8)
            RsvDyn05 = Pack.Strip(DataStream, 8)
            MaxRecReq = Pack.Strip(DataStream, 4)
            ChnAutCnt = Pack.Strip(DataStream, 1)
            FltChgAmt = Pack.Strip(DataStream, 3)
            FltChgFld = Pack.Strip(DataStream, 3)
            FltChgRec = Pack.Strip(DataStream, 3)
            PosOffCnt = Pack.Strip(DataStream, 4)
            ResPosFlg = Pack.Strip(DataStream, 1)
            RsvDyn10 = Pack.Strip(DataStream, 17)
            CntPosTyp = Pack.Strip(DataStream, 3)
            CntPosRef = Pack.Strip(DataStream, 8)
            RsvDyn15 = Pack.Strip(DataStream, 8)
            IcsAutCnt = Pack.Strip(DataStream, 1)
            RsvDyn20 = Pack.Strip(DataStream, 12)
        End Sub
    End Structure
    Public Structure CorPayroll_Record_Mod_Struct '38	Payroll record modification - Structure Follows
        Dim ChgChnIde As String     '4x	Name of the channel creating/changing: “ICE “ or “CIB “
        Dim ChgStp As String        '14x Date and time of creation or last change (YYYYMMDDhhmmss)
        Dim ChgCorKey As String     '10x Corporate identification making the change
        Dim ChgUsrKey As String     '10x Corporate user identification making the change

        Public Function PackTable() As String
            Dim st As String = String.Empty
            'CorPrpMod 38
            st &= Pack.PackString(ChgChnIde, 4)
            st &= Pack.PackString(ChgStp, 14)
            st &= Pack.PackString(ChgCorKey, 10)
            st &= Pack.PackString(ChgUsrKey, 10)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            'CorPrpMod 38
            ChgChnIde = Pack.Strip(DataStream, 4)
            ChgStp = Pack.Strip(DataStream, 14)
            ChgCorKey = Pack.Strip(DataStream, 10)
            ChgUsrKey = Pack.Strip(DataStream, 10)
        End Sub
    End Structure
    Public Structure CorPayroll_Record_Definition_Struct '191
        Dim PyrEmpRef As String '8x	Employee reference
        Dim PyrRsvRef As String '1x	Reserved reference (space filled)
        Dim PyrSysRef As String '7x	ICS or CIB system assigned reference (or spaces)
        Dim PyrEmpSta As String '1x	Payroll employee status code
        '                        “A” = active, “D” = pending deletion
        Dim PyrIncFlg As String '1x	Flag (Y/N) to include the employee in the payroll
        Dim PrpDatChg As String '1x	Flag (Y/N) information was changed during prepare
        Dim PrpFlgChg As String '1x Flag (Y/N) indicating payout data was changed by end-user
        Dim PrpFlgAmt As String '1x	Flag (Y/N) indicating amount or currency was changed by end-user
        Dim PrpFlgTgt As String '1x Flag (Y/N) indicating target bank or account changed by end-user
        Dim PyrEmpNam As String '35x	Employee name (English or Arabic)
        Dim PyrEmpDep As String '16x	Department name or spaces
        Dim PyrEmpGrd As String '16x	Employee grade or spaces
        'PyrEmpBnk 13	Employee bank type and code or “SASIBC”
        Dim PyrBnkTyp As String '2x	•	Address type:
        '                        “SA” = KSA 4-character Sarie code
        '                        “SW” = SWIFT 11-character BIC
        Dim PyrBnkCde As String '11x	•	Bank code (Sarie or BIC)
        Dim PyrCrdAcc As String '34x	Credit account number (IBAN for Sarie)
        Dim PyrAmt As String    '9n	Amount to be credited (LCU)
        Dim PyrCcyCde As String '3x	Currency of amount or “SAR”
        Dim PyrCrdDsc As String '25x	Payroll credit description
        Dim PrvIncFlg As String '1x	Previous flag (Y/N) to omit the employee from the payroll
        Dim PrvAmt As String    '9n	Previous payroll: amount to be credited (LCU) or zeros
        Dim PrvCcyCde As String '3x	Previous payroll: currency of amount or spaces
        Dim IcsActCde As String '2x	ICS action code for this data preparation
        Dim IcsResCde As String '3x	ICS reason code for this data preparation

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(PyrEmpRef, 8)
            st &= Pack.PackString(PyrRsvRef, 1)
            st &= Pack.PackString(PyrSysRef, 7)
            st &= Pack.PackString(PyrEmpSta, 1)
            st &= Pack.PackString(PyrIncFlg, 1)
            st &= Pack.PackString(PrpDatChg, 1)
            st &= Pack.PackString(PrpFlgChg, 1)
            st &= Pack.PackString(PrpFlgAmt, 1)
            st &= Pack.PackString(PrpFlgTgt, 1)
            st &= Pack.PackString(PyrEmpNam, 35)
            st &= Pack.PackString(PyrEmpDep, 16)
            st &= Pack.PackString(PyrEmpGrd, 16)
            'PyrEmpBnk 13
            st &= Pack.PackString(PyrBnkTyp, 2)
            st &= Pack.PackString(PyrBnkCde, 11)
            st &= Pack.PackString(PyrCrdAcc, 34)
            st &= Pack.PackNString(PyrAmt, 9)
            st &= Pack.PackString(PyrCcyCde, 3)
            st &= Pack.PackString(PyrCrdDsc, 25)
            st &= Pack.PackString(PrvIncFlg, 1)
            st &= Pack.PackString(PrvAmt, 9)
            st &= Pack.PackString(PrvCcyCde, 3)
            st &= Pack.PackString(IcsActCde, 2)
            st &= Pack.PackString(IcsResCde, 3)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            PyrEmpRef = Pack.Strip(DataStream, 8)
            PyrRsvRef = Pack.Strip(DataStream, 1)
            PyrSysRef = Pack.Strip(DataStream, 7)
            PyrEmpSta = Pack.Strip(DataStream, 1)
            PyrIncFlg = Pack.Strip(DataStream, 1)
            PrpDatChg = Pack.Strip(DataStream, 1)
            PrpFlgChg = Pack.Strip(DataStream, 1)
            PrpFlgAmt = Pack.Strip(DataStream, 1)
            PrpFlgTgt = Pack.Strip(DataStream, 1)
            PyrEmpNam = Pack.Strip(DataStream, 35)
            PyrEmpDep = Pack.Strip(DataStream, 16)
            PyrEmpGrd = Pack.Strip(DataStream, 16)
            'PyrEmpBnk 13
            PyrBnkTyp = Pack.Strip(DataStream, 2)
            PyrBnkCde = Pack.Strip(DataStream, 11)
            PyrCrdAcc = Pack.Strip(DataStream, 34)
            PyrAmt = Pack.Strip(DataStream, 9)
            PyrCcyCde = Pack.Strip(DataStream, 3)
            PyrCrdDsc = Pack.Strip(DataStream, 25)
            PrvIncFlg = Pack.Strip(DataStream, 1)
            PrvAmt = Pack.Strip(DataStream, 9)
            PrvCcyCde = Pack.Strip(DataStream, 3)
            IcsActCde = Pack.Strip(DataStream, 2)
            IcsResCde = Pack.Strip(DataStream, 3)
        End Sub
    End Structure
    Public Structure CorPayroll_Record_Struct       '250    •	Payroll employee definition
        Dim TabRowVer As String                                 '12n		Desc: Table row version
        Dim PayRecDef As CorPayroll_Record_Definition_Struct    '191		Desc: Payroll employee definition
        Dim RsvRecDef As String                                 '9x		    Desc: Reserved, space filled
        Dim PayRecMod As CorPayroll_Record_Mod_Struct           '38		    Desc: Payroll employee definition change history

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackNString(TabRowVer, 12)
            st &= PayRecDef.PackTable()
            st &= Pack.PackString(RsvRecDef, 9)
            st &= PayRecMod.PackTable()
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            TabRowVer = Pack.Strip(DataStream, 12)
            PayRecDef.ReadTable(DataStream)
            RsvRecDef = Pack.Strip(DataStream, 9)
            PayRecMod.ReadTable(DataStream)
        End Sub
    End Structure

    Public Structure ReqPyrFlt_Struct '28		Payroll filter (one of the fields below needed) or spaces
        Dim ReqSerNum As String '6x	•	Payroll sequence or spaces for the most recent.
        Dim ReqBegDte As String '8x	•	Begin period date (or spaces)
        Dim ReqEndDte As String '8x	•	End period date (or spaces)
        Dim ReqRegMth As String '6x	•	Payroll registration month (YYYYMM) (Gregorian or Hijra) or spaces

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackNString(ReqSerNum, 6)
            st &= Pack.PackNString(ReqBegDte, 8)
            st &= Pack.PackNString(ReqEndDte, 8)
            st &= Pack.PackNString(ReqRegMth, 6)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            ReqSerNum = Pack.Strip(DataStream, 6)
            ReqBegDte = Pack.Strip(DataStream, 8)
            ReqEndDte = Pack.Strip(DataStream, 8)
            ReqRegMth = Pack.Strip(DataStream, 6)
        End Sub
    End Structure

    Public Structure FldFmtDef_Struct '10  Field Format Definition structure
        Dim FdfMinSze As String '2n	Minimum number of characters (spaces is no minimum)
        Dim FdfMaxSze As String '2n	Maximum number of characters (spaces is no maximum)
        Dim FdfChrSet As String '1x	Character set: N=digits, A=Alphabet, X=Any character
        Dim FdfChrPad As String '1x	Padding character “0” or space
        Dim FdfLngDir As String '1x Language and preferred initial field direction
        Dim FdfRsv01 As String '3x	Reserved

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackNString(FdfMinSze, 2)
            st &= Pack.PackNString(FdfMaxSze, 2)
            st &= Pack.PackString(FdfChrSet, 1)
            st &= Pack.PackString(FdfChrPad, 1)
            st &= Pack.PackString(FdfLngDir, 1)
            st &= Pack.PackString(FdfRsv01, 3)
            'Special code to send all spaces if not field definition is needed
            If st = "0000      " Then st = Space(10)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            FdfMinSze = Pack.Strip(DataStream, 2)
            FdfMaxSze = Pack.Strip(DataStream, 2)
            FdfChrSet = Pack.Strip(DataStream, 1)
            FdfChrPad = Pack.Strip(DataStream, 1)
            FdfLngDir = Pack.Strip(DataStream, 1)
            FdfRsv01 = Pack.Strip(DataStream, 3)
        End Sub
    End Structure

    Public Structure CorPayroll_ExePayFin_Struct '75x, App #AP0856, Msg #
        Dim PyrEmpRef As String '8x	Employee reference
        Dim PyrRsvRef As String '1x	Reserved reference (space filled)
        Dim PyrSysRef As String '7x	ICS or CIB system assigned reference (or spaces)
        Dim PyrEmpBnk As String '13x				Desc: Employee bank type and code or "SASIBC"
        Dim PyrCrdAcc As String '34x				Desc: Credit account number (IBAN for Sarie)
        Dim PyrAmt As String '9n				Desc: Amount to be credited (LCU)
        Dim PyrCcyCde As String '3x				Desc: Currency of amount or "SAR"

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(PyrEmpRef, 8)
            st &= Pack.PackString(PyrRsvRef, 1)
            st &= Pack.PackString(PyrSysRef, 7)
            st &= Pack.PackString(PyrEmpBnk, 13)
            st &= Pack.PackString(PyrCrdAcc, 34)
            st &= Pack.PackNString(PyrAmt, 9)
            st &= Pack.PackString(PyrCcyCde, 3)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            PyrEmpRef = Pack.Strip(DataStream, 8)
            PyrRsvRef = Pack.Strip(DataStream, 1)
            PyrSysRef = Pack.Strip(DataStream, 7)
            PyrEmpBnk = Pack.Strip(DataStream, 13)
            PyrCrdAcc = Pack.Strip(DataStream, 34)
            PyrAmt = Pack.Strip(DataStream, 9)
            PyrCcyCde = Pack.Strip(DataStream, 3)
        End Sub
    End Structure
    Public Structure CorPayroll_ExePayRes_Struct '08x, App #, Msg #
        Dim PyrActCde As String '2x				Desc: Action code from validation/processing
        Dim PyrReaCde As String '3x				Desc: Reason code from validation/processing
        Dim PyrResCde As String '3x				Desc: Result code from most recent posting attempt

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(PyrActCde, 2)
            st &= Pack.PackString(PyrReaCde, 3)
            st &= Pack.PackString(PyrResCde, 3)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            PyrActCde = Pack.Strip(DataStream, 2)
            PyrReaCde = Pack.Strip(DataStream, 3)
            PyrResCde = Pack.Strip(DataStream, 3)
        End Sub
    End Structure
    Public Structure CorPayroll_ExePayRec_Struct '00x, App #AP0856, Msg #
        Dim TabRowVer As String '12n				Desc: Table Row Version
        Dim CusNum As String '6n				Desc: Corporate customer number owning this payroll stream.
        Dim PyrIde As String '16x				Desc: Payroll identifier
        Dim PyrSerNum As String '6n				Desc: Current payroll serial number
        Dim ExePayFin As CorPayroll_ExePayFin_Struct '75				Desc:Financial Data
        Dim ExePayRes As CorPayroll_ExePayRes_Struct '8				Desc:Result of execution for this record

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackNString(TabRowVer, 12)
            st &= Pack.PackNString(CusNum, 6)
            st &= Pack.PackString(PyrIde, 16)
            st &= Pack.PackNString(PyrSerNum, 6)
            st &= ExePayFin.PackTable()
            st &= ExePayRes.PackTable()
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            TabRowVer = Pack.Strip(DataStream, 12)
            CusNum = Pack.Strip(DataStream, 6)
            PyrIde = Pack.Strip(DataStream, 16)
            PyrSerNum = Pack.Strip(DataStream, 6)
            ExePayFin.ReadTable(DataStream)
            ExePayRes.ReadTable(DataStream)
        End Sub
    End Structure
    Public Structure CorPayroll_CorPayExe_Struct '117 Msg #11
        Dim PyrAmtHsh As String '13n				Desc: Total amount of the current employee payroll records in LCU
        Dim PyrAmtSar As String '12n	            Desc: SAR-equivalent amount (FX rates at time of execution)
        Dim PyrSubExe As String '14x				Desc: Date and time submitted by client (YYYYMMDDhhmmss)
        Dim PyrRelExe As String '14x				Desc: Date and time released by client (YYYYMMDDhhmmss)
        Dim SibRelExe As String '14x				Desc: Date and time released by Bank (YYYYMMDDhhmmss)
        Dim SibRelCde As String '4x				    Desc: How released (see PayRelCde)
        Dim PyrBegExe As String '14x				Desc: Date and time execution started (YYYYMMDDhhmmss)
        Dim PyrEndExe As String '14x				Desc: Date and time execution ended (YYYYMMDDhhmmss)
        Dim ResCdeExe As String '3x				    Desc: Result from execution (000 = OK)
        Dim CntFlg As String    '1x	                Specifies the encoding used for the counts fields (see note)
        Dim ResCntTot As String '4n				    Desc: Total records processed
        Dim Rsv001 As String    '1x	                Reserved
        Dim ResCntBad As String '4n				    Desc: Total records rejected
        Dim Rsv002 As String    '1x	                Reserved
        Dim ResCntGud As String '4n				    Desc: Total records accepted

        Public Function PackTable() As String
            If CntFlg Is Nothing OrElse CntFlg.Trim = "" Then CntFlg = CountFormatFlag
            Dim st As String = String.Empty
            st &= Pack.PackNString(PyrAmtHsh, 13)
            st &= Pack.PackNString(PyrAmtSar, 12)
            st &= Pack.PackString(PyrSubExe, 14)
            st &= Pack.PackString(PyrRelExe, 14)
            st &= Pack.PackString(SibRelExe, 14)
            st &= Pack.PackString(SibRelCde, 4)
            st &= Pack.PackString(PyrBegExe, 14)
            st &= Pack.PackString(PyrEndExe, 14)
            st &= Pack.PackString(ResCdeExe, 3)
            st &= Pack.PackNString(CntFlg, 1)
            st &= CStr(IIf(CntFlg = "X", CNEP0100.NumEngClass.ConvertToBase64(AppInstance.ExInt(ResCntTot)), Pack.PackNString(ResCntTot, 4))) 'Pack.PackNString(ResCntTot, 4)
            st &= Pack.PackNString(Rsv001, 1)
            st &= CStr(IIf(CntFlg = "X", CNEP0100.NumEngClass.ConvertToBase64(AppInstance.ExInt(ResCntBad)), Pack.PackNString(ResCntBad, 4))) 'Pack.PackNString(ResCntBad, 4)
            st &= Pack.PackNString(Rsv002, 1)
            st &= CStr(IIf(CntFlg = "X", CNEP0100.NumEngClass.ConvertToBase64(AppInstance.ExInt(ResCntGud)), Pack.PackNString(ResCntGud, 4))) 'Pack.PackNString(ResCntGud, 4)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            Dim st As String
            PyrAmtHsh = Pack.Strip(DataStream, 13)
            PyrAmtSar = Pack.Strip(DataStream, 12)
            PyrSubExe = Pack.Strip(DataStream, 14)
            PyrRelExe = Pack.Strip(DataStream, 14)
            SibRelExe = Pack.Strip(DataStream, 14)
            SibRelCde = Pack.Strip(DataStream, 4)
            PyrBegExe = Pack.Strip(DataStream, 14)
            PyrEndExe = Pack.Strip(DataStream, 14)
            ResCdeExe = Pack.Strip(DataStream, 3)
            CntFlg = Pack.Strip(DataStream, 1)
            st = Pack.Strip(DataStream, 4) : ResCntTot = CStr(IIf(CntFlg = "X", CNEP0100.NumEngClass.Base64toDecimal(st), AppInstance.ExInt(st))) 'Pack.Strip(DataStream, 4)
            Rsv001 = Pack.Strip(DataStream, 1)
            st = Pack.Strip(DataStream, 4) : ResCntBad = CStr(IIf(CntFlg = "X", CNEP0100.NumEngClass.Base64toDecimal(st), AppInstance.ExInt(st))) 'Pack.Strip(DataStream, 4)
            Rsv002 = Pack.Strip(DataStream, 1)
            st = Pack.Strip(DataStream, 4) : ResCntGud = CStr(IIf(CntFlg = "X", CNEP0100.NumEngClass.Base64toDecimal(st), AppInstance.ExInt(st))) 'Pack.Strip(DataStream, 4)
        End Sub
    End Structure

    Public Structure CorPayroll_PayRec_Struct '220x, App #AP0856, Msg #480200
        Dim TabRowVer As String '12n				Desc: Table Row Version
        Dim EmpRecDef As CorPayroll_Record_Definition_Struct '191
        Dim Rsv22 As String '17x

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackNString(TabRowVer, 12)
            st &= EmpRecDef.PackTable()
            st &= Pack.PackNString(Rsv22, 17)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            TabRowVer = Pack.Strip(DataStream, 12)
            EmpRecDef.ReadTable(DataStream)
            Rsv22 = Pack.Strip(DataStream, 17)
        End Sub
    End Structure

    Public Structure CorPayroll_Executions_DefItm_Struct '890 Msg #4801001
        'Dim TabRowVer As String '12n				Desc: Table row version
        'Dim CorPayDef As CorPayroll_Definition_Struct '175				Desc:Corporate payroll definition
        'Dim CorPrpMod As CorPayroll_Prepare_Mod_Struct '38x				Desc: Reserved, space filled
        'Dim CorPayMod As CorPayroll_Mod_Struct '72				Desc:Corporate payroll definition change history
        'Dim RsvPayMod As String '3x				Desc: Reserved, space filled
        'Dim CorPayTot As CorPayroll_CorPayTot_Struct '442x	•	Payroll totals
        'Dim RsvPayTot As String '8x	•	Reserved, space filled
        Dim CorPayDefItem As CorPayroll_Definition_Item_Struct
        Dim CorPayExe As CorPayroll_CorPayExe_Struct '117				Desc:Result of payroll execution
        Dim Rsv3 As String '23x				Desc: Reserved, space filled

        Public Function PackTable() As String
            Dim st As String = String.Empty
            'st &= Pack.PackNString(TabRowVer, 12)
            'st &= CorPayDef.PackTable()
            'st &= CorPrpMod.PackTable()
            'st &= CorPayMod.PackTable()
            'st &= Pack.PackString(RsvPayMod, 3)
            'st &= CorPayTot.PackTable()
            'st &= Pack.PackString(RsvPayTot, 8)

            st &= CorPayDefItem.PackTable()
            st &= CorPayExe.PackTable()
            st &= Pack.PackString(Rsv3, 23)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            'TabRowVer = Pack.Strip(DataStream, 12)
            'CorPayDef.ReadTable(DataStream)
            'CorPrpMod.ReadTable(DataStream)
            'CorPayMod.ReadTable(DataStream)
            'RsvPayMod = Pack.Strip(DataStream, 3)
            'CorPayTot.ReadTable(DataStream)
            'RsvPayTot = Pack.Strip(DataStream, 8)
            CorPayDefItem.ReadTable(DataStream)
            CorPayExe.ReadTable(DataStream)
            Rsv3 = Pack.Strip(DataStream, 23)
        End Sub
    End Structure

    Public Structure CorPayroll_Execution_Employees_PayExe_Struct '440 Msg #480110
        Dim TabRowVer As String                                 '12n	 Desc: Table row version
        Dim PayRecDef As CorPayroll_Record_Definition_Struct    '191x    Desc: Payroll employee definition 
        Dim RsvRecDef As String                                 '9x      Desc: Reserved, space filled
        Dim ExePayFin As CorPayroll_ExePayFin_Struct            '75x     Desc: Financial result data
        Dim ExePayRes As CorPayroll_ExePayRes_Struct            '8x      Desc: Result of execution
        Dim Rsv3 As String                                      '5x		 Desc: Reserved, space filled

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackNString(TabRowVer, 12)
            st &= PayRecDef.PackTable()
            st &= Pack.PackString(RsvRecDef, 9)
            st &= ExePayFin.PackTable()
            st &= ExePayRes.PackTable()
            st &= Pack.PackString(Rsv3, 5)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            TabRowVer = Pack.Strip(DataStream, 12)
            PayRecDef.ReadTable(DataStream)
            RsvRecDef = Pack.Strip(DataStream, 9)
            ExePayFin.ReadTable(DataStream)
            ExePayRes.ReadTable(DataStream)
            Rsv3 = Pack.Strip(DataStream, 5)
        End Sub
    End Structure

#End Region

#Region "Message Structures..."

    Public Structure EnumerateFileUploadHistory_Rsp_Struct '180500 Enumerate File Upload History

        Public Const FL_FndCnt As Integer = 6
        Public Const FL_ItmCnt As Integer = 3
        Public Const FL_Rsv10 As Integer = 35

        Public FndCnt As String
        Public ItmCnt As String
        Public Rsv10 As String
        Public HisRec() As FupHisRec
        


        Public Function PackTable() As String
            Dim result As String = String.Empty
            result &= Pack.PackNString(FndCnt, FL_FndCnt)
            result &= Pack.PackNString(ItmCnt, FL_ItmCnt)
            result &= Pack.PackNString(Rsv10, FL_Rsv10)
            For ind As Integer = 0 To CInt(ItmCnt) - 1
                result &= HisRec(ind).PackTable()
            Next
            
            Return result
        End Function

        Public Sub ReadTable(ByRef value As String)
            FndCnt = Pack.Strip(value, FL_FndCnt)
            ItmCnt = Pack.Strip(value, FL_ItmCnt)
            Rsv10 = Pack.Strip(value, FL_Rsv10)
            ReDim HisRec(CInt(ItmCnt) - 1)
            For ind As Integer = 0 To CInt(ItmCnt) - 1
                HisRec(ind).ReadTable(value)
            Next

            

        End Sub
    End Structure

    Public Structure FupHisRec
        Public Const FL_CUSNUM As Integer = 6
        Public Const FL_UPLTYP As Integer = 4
        Public Const FL_SYSREQ As Integer = 4
        Public Const FL_XFRTYP As Integer = 4
        Public Const FL_FILCDE As Integer = 4
        Public Const FL_USRKEY As Integer = 10
        Public Const FL_CORKEY As Integer = 10
        Public Const FL_UPLSTP As Integer = 14
        Public Const FL_BLKCNT As Integer = 6
        Public Const FL_BLKSZE As Integer = 6
        Public Const FL_BLKPRC As Integer = 6
        Public Const FL_BLKREM As Integer = 6
        Public Const FL_ICSTMPNME As Integer = 10
        Public Const FL_UPLRES As Integer = 4
        Public Const FL_UPLSTA As Integer = 4
        Public Const FL_UPLACTSTP As Integer = 14
        Public Const FL_FILNME As Integer = 128
        Public Const FL_FILNMEORG As Integer = 64
        Public Const FL_XFRDSC As Integer = 35
        Public Const FL_PRCVALDTE As Integer = 8
        Public Const FL_PRCSTA As Integer = 4
        Public Const FL_PRCRES As Integer = 3
        Public Const FL_PRCACTSTP As Integer = 14
        Public Const FL_PRCUSRKEY As Integer = 10
        Public Const FL_FUPTOTAMT As Integer = 15
        Public Const FL_FUPTOTCNT As Integer = 8
        Public Const FL_FUPFILCCY As Integer = 3
        Public Const FL_FUPDEBACC As Integer = 34
        Public Const FL_FUPCREACC As Integer = 34
        Public Const FL_FUPDEBCCY As Integer = 3
        Public Const FL_FUPCRECCY As Integer = 3
        Public Const FL_TOTRECERR As Integer = 8
        Public Const FL_TOTRECSCC As Integer = 8
        Public Const FL_RELSYSREF As Integer = 12
        Public Const FL_RSRV00 As Integer = 193


        Public CusNum As String
        Public UplTyp As String
        Public SysReq As String
        Public XfrTyp As String
        Public FilCde As String
        Public UsrKey As String
        Public CorKey As String
        Public UplStp As String
        Public BlkCnt As String
        Public BlkSze As String
        Public BlkPrc As String
        Public BlkRem As String
        Public IcsTmpNme As String
        Public UplRes As String
        Public UplSta As String
        Public UplActStp As String
        Public FilNme As String
        Public FilNmeOrg As String
        Public XfrDsc As String
        Public PrcValDte As String
        Public PrcSta As String
        Public PrcRes As String
        Public PrcActStp As String
        Public PrcUsrKey As String
        Public FupTotAmt As String
        Public FupTotCnt As String
        Public FupFilCcy As String
        Public FupDebAcc As String
        Public FupCreAcc As String
        Public FupDebCcy As String
        Public FupCreCcy As String
        Public TotRecErr As String
        Public TotRecScc As String
        Public RelSysRef As String
        Public Rsrv00 As String


        Public Function PackTable() As String
            Dim result As String = String.Empty
            result &= Pack.PackNString(CusNum, FL_CUSNUM)
            result &= Pack.PackNString(UplTyp, FL_UPLTYP)
            result &= Pack.PackNString(SysReq, FL_SYSREQ)
            result &= Pack.PackNString(XfrTyp, FL_XFRTYP)
            result &= Pack.PackNString(FilCde, FL_FILCDE)
            result &= Pack.PackNString(UsrKey, FL_USRKEY)
            result &= Pack.PackNString(CorKey, FL_CORKEY)
            result &= Pack.PackNString(UplStp, FL_UPLSTP)
            result &= Pack.PackNString(BlkCnt, FL_BLKCNT)
            result &= Pack.PackNString(BlkSze, FL_BLKSZE)
            result &= Pack.PackNString(BlkPrc, FL_BLKPRC)
            result &= Pack.PackNString(BlkRem, FL_BLKREM)
            result &= Pack.PackNString(IcsTmpNme, FL_ICSTMPNME)
            result &= Pack.PackNString(UplRes, FL_UPLRES)
            result &= Pack.PackNString(UplSta, FL_UPLSTA)
            result &= Pack.PackNString(UplActStp, FL_UPLACTSTP)
            result &= Pack.PackNString(FilNme, FL_FILNME)
            result &= Pack.PackNString(FilNmeOrg, FL_FILNMEORG)
            result &= Pack.PackNString(XfrDsc, FL_XFRDSC)
            result &= Pack.PackNString(PrcValDte, FL_PRCVALDTE)
            result &= Pack.PackNString(PrcSta, FL_PRCSTA)
            result &= Pack.PackNString(PrcRes, FL_PRCRES)
            result &= Pack.PackNString(PrcActStp, FL_PRCACTSTP)
            result &= Pack.PackNString(PrcUsrKey, FL_PRCUSRKEY)
            result &= Pack.PackNString(FupTotAmt, FL_FUPTOTAMT)
            result &= Pack.PackNString(FupTotCnt, FL_FUPTOTCNT)
            result &= Pack.PackNString(FupFilCcy, FL_FUPFILCCY)
            result &= Pack.PackNString(FupDebAcc, FL_FUPDEBACC)
            result &= Pack.PackNString(FupCreAcc, FL_FUPCREACC)
            result &= Pack.PackNString(FupDebCcy, FL_FUPDEBCCY)
            result &= Pack.PackNString(FupCreCcy, FL_FUPCRECCY)
            result &= Pack.PackNString(TotRecErr, FL_TOTRECERR)
            result &= Pack.PackNString(TotRecScc, FL_TOTRECSCC)
            result &= Pack.PackNString(RelSysRef, FL_RELSYSREF)
            result &= Pack.PackNString(Rsrv00, FL_RSRV00)

            Return result
        End Function

        Public Sub ReadTable(ByRef value As String)
            CusNum = Pack.Strip(value, FL_CUSNUM)
            UplTyp = Pack.Strip(value, FL_UPLTYP)
            SysReq = Pack.Strip(value, FL_SYSREQ)
            XfrTyp = Pack.Strip(value, FL_XFRTYP)
            FilCde = Pack.Strip(value, FL_FILCDE)
            UsrKey = Pack.Strip(value, FL_USRKEY)
            CorKey = Pack.Strip(value, FL_CORKEY)
            UplStp = Pack.Strip(value, FL_UPLSTP)
            BlkCnt = Pack.Strip(value, FL_BLKCNT)
            BlkSze = Pack.Strip(value, FL_BLKSZE)
            BlkPrc = Pack.Strip(value, FL_BLKPRC)
            BlkRem = Pack.Strip(value, FL_BLKREM)
            IcsTmpNme = Pack.Strip(value, FL_ICSTMPNME)
            UplRes = Pack.Strip(value, FL_UPLRES)
            UplSta = Pack.Strip(value, FL_UPLSTA)
            UplActStp = Pack.Strip(value, FL_UPLACTSTP)
            FilNme = Pack.Strip(value, FL_FILNME)
            FilNmeOrg = Pack.Strip(value, FL_FILNMEORG)
            XfrDsc = Pack.Strip(value, FL_XFRDSC)
            PrcValDte = Pack.Strip(value, FL_PRCVALDTE)
            PrcSta = Pack.Strip(value, FL_PRCSTA)
            PrcRes = Pack.Strip(value, FL_PRCRES)
            PrcActStp = Pack.Strip(value, FL_PRCACTSTP)
            PrcUsrKey = Pack.Strip(value, FL_PRCUSRKEY)
            FupTotAmt = Pack.StripNS(value, FL_FUPTOTAMT)
            FupTotCnt = Pack.Strip(value, FL_FUPTOTCNT)
            FupFilCcy = Pack.Strip(value, FL_FUPFILCCY)
            FupDebAcc = Pack.Strip(value, FL_FUPDEBACC)
            FupCreAcc = Pack.Strip(value, FL_FUPCREACC)
            FupDebCcy = Pack.Strip(value, FL_FUPDEBCCY)
            FupCreCcy = Pack.Strip(value, FL_FUPCRECCY)
            TotRecErr = Pack.Strip(value, FL_TOTRECERR)
            TotRecScc = Pack.Strip(value, FL_TOTRECSCC)
            RelSysRef = Pack.Strip(value, FL_RELSYSREF)
            Rsrv00 = Pack.Strip(value, FL_RSRV00)

        End Sub
    End Structure
    Public Structure EnumerateFileUploadHistory_Req_Struct '180500 Enumerate File Upload History
        Dim CusNum As String '6n				Desc: Customer number to be enumerated o spaces for all
        Dim FilMnm As String '4x	            Desc: The file type mnemonic (EXIN, BXIN, XWPS, etc.)
        Dim BgnDte As String '1x				Desc: Files uploaded on or after this date (YYYYMMDD)
        Dim EndDte As String '1x				Desc: Files uploaded on or before this date (YYYYMMDD)
        Dim UsrKey As String '3x				Desc: The user who uploaded the file (or spaces)
        Dim ReqUsrKey As String '10x			Desc: The user who executed the file (or spaces)
        Dim Rsv00 As String '27x				    Desc: Reserved, space filled

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackNString(CusNum, 6)
            st &= Pack.PackString(FilMnm, 4)
            st &= Pack.PackDate(BgnDte)
            st &= Pack.PackDate(EndDte)
            st &= Pack.PackString(UsrKey, 10)
            st &= Pack.PackString(ReqUsrKey, 10)
            st &= Pack.PackString(Rsv00, 18)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            CusNum = Pack.Strip(DataStream, 6).Trim
            FilMnm = Pack.Strip(DataStream, 4)
            BgnDte = Pack.Strip(DataStream, 8)
            EndDte = Pack.Strip(DataStream, 8)
            UsrKey = Pack.Strip(DataStream, 10)
            ReqUsrKey = Pack.Strip(DataStream, 10)
            Rsv00 = Pack.Strip(DataStream, 18)
        End Sub
    End Structure

    Public Structure EnumeratePayrollDefinitions_Req_Struct '64 Msg #480010
        Dim CusNum As String '6n				Desc: Customer number to be enumerated o spaces for all
        Dim PyrIde As String '16x	            Desc: Payroll identifier to be enumerated or spaces for all
        Dim ReqStaCde As String '1x				Desc: Status: Spaces for all, otherwise code value "A" or "D"
        Dim ReqAgrFlg As String '1x				Desc: Agreement: Spaces for all, otherwise flag value "Y" or "N"
        Dim ReqAccOff As String '3x				Desc: Officer: Spaces for all, otherwise account officer code
        Dim ReqUsrKey As String '10x			Desc: User identity: Spaces for all otherwise the user creating / changing
        Dim Rsv1 As String '27x				    Desc: Reserved, space filled

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(CusNum, 6)
            st &= Pack.PackString(PyrIde, 16)
            st &= Pack.PackString(ReqStaCde, 1)
            st &= Pack.PackString(ReqAgrFlg, 1)
            st &= Pack.PackString(ReqAccOff, 3)
            st &= Pack.PackString(ReqUsrKey, 10)
            st &= Pack.PackString(Rsv1, 27)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            CusNum = Pack.Strip(DataStream, 6).Trim
            PyrIde = Pack.Strip(DataStream, 16)
            ReqStaCde = Pack.Strip(DataStream, 1)
            ReqAgrFlg = Pack.Strip(DataStream, 1)
            ReqAccOff = Pack.Strip(DataStream, 3)
            ReqUsrKey = Pack.Strip(DataStream, 10)
            Rsv1 = Pack.Strip(DataStream, 27)
        End Sub
    End Structure

    Public Structure EnumeratePayrollDefinitions_Rsp_Struct '0 Msg #480010
        Dim MsgReqDat As EnumeratePayrollDefinitions_Req_Struct '64				Desc:Request data
        Dim Rsv2 As String '28x				Desc: Reserved, space filled
        Dim ItmCnt As String '4n				Desc: Number of payroll definitions being returned
        Dim DefItm() As CorPayroll_Definition_Item_Struct '300 * ItmCnt				Desc:Zero, one or several returned items

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= MsgReqDat.PackTable()
            st &= Pack.PackString(Rsv2, 28)
            st &= Pack.PackNString(ItmCnt, 4)
            For ind As Integer = 0 To CInt(ItmCnt) - 1
                st &= DefItm(ind).PackTable()
            Next
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            MsgReqDat.ReadTable(DataStream)
            Rsv2 = Pack.Strip(DataStream, 28)
            ItmCnt = Pack.Strip(DataStream, 4)
            ReDim DefItm(CInt(ItmCnt) - 1)
            For ind As Integer = 0 To CInt(ItmCnt) - 1
                DefItm(ind).ReadTable(DataStream)
            Next
        End Sub
    End Structure

    Public Structure CreatePayrollDefinition_Req_Struct '370 Msg #480020
        Dim Rsv1 As String '20x				Desc: Reserved, space filled
        Dim CorPayDef As CorPayroll_Definition_Item_Struct '300				Desc:Payroll definition to be created
        Dim Rsv2 As String '50x				Desc: Reserved, space filled

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(Rsv1, 20)
            st &= CorPayDef.PackTable()
            st &= Pack.PackString(Rsv2, 50)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            Rsv1 = Pack.Strip(DataStream, 20)
            CorPayDef.ReadTable(DataStream)
            Rsv2 = Pack.Strip(DataStream, 50)
        End Sub
    End Structure

    Public Structure CreatePayrollDefinition_Rsp_Struct '626 Msg #480021
        'Dim MsgRspDat As CreatePayrollDefinition_Req_Struct '370				Desc:Message Response Data Area
        Dim Rsv1 As String '20x				Desc: Reserved, space filled
        Dim PyrDef As CorPayroll_Definition_Item_Struct '300x				Desc: Payroll definition after update
        Dim Rsv2 As String '50x				Desc: Reserved, space filled

        Public Function PackTable() As String
            Dim st As String = String.Empty
            'st &= MsgRspDat.PackTable()
            st &= Pack.PackString(Rsv1, 20)
            st &= PyrDef.PackTable()
            st &= Pack.PackString(Rsv2, 50)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            'MsgRspDat.ReadTable(DataStream)
            Rsv1 = Pack.Strip(DataStream, 20)
            PyrDef.ReadTable(DataStream)
            Rsv2 = Pack.Strip(DataStream, 50)
        End Sub
    End Structure

    Public Structure QueryPreparedPayroll_Rsp_Struct '608 Msg #480090
        'MsgRspDat 32x 
        Dim CusNum As String '6n	Customer number (required field)
        Dim PyrIde As String '16x	Payroll identifier to be obtained (required field)
        Dim Rsv11 As String '10x	Reserved, space filled

        Dim IsPyrPre As String '1x Flag (Y/N) indicating if the payroll is in preparing state
        Dim Rsv1 As String '19x Reserved, space filled
        Dim DefItm As CorPayroll_Definition_Item_Struct '300x	Returned payroll definition

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(CusNum, 6)
            st &= Pack.PackString(PyrIde, 16)
            st &= Pack.PackString(Rsv11, 10)
            st &= Pack.PackString(IsPyrPre, 1)
            st &= Pack.PackString(Rsv1, 19)
            st &= DefItm.PackTable()
            Return st
        End Function
        Public Sub ReadTable(ByRef DataStream As String)
            CusNum = Pack.Strip(DataStream, 6)
            PyrIde = Pack.Strip(DataStream, 16)
            Rsv11 = Pack.Strip(DataStream, 10)
            IsPyrPre = Pack.Strip(DataStream, 1)
            Rsv1 = Pack.Strip(DataStream, 19)
            DefItm.ReadTable(DataStream)
        End Sub
    End Structure

    Public Structure EnumeratePayrollEmployees_Req_Struct '64 Msg #480050
        Dim CusNum As String '6n				Desc: Customer number to be enumerated o spaces for all
        Dim ReqPyrIde As String '16x				Desc: Payroll identifier
        Dim ReqPyrFlt As ReqPyrFlt_Struct '28
        Dim ReqStaCde As String '1x				Desc: Status: Spaces for all, otherwise code value "A" or "D"
        Dim Rsv2 As String '13x				Desc: Reserved, space filled

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackNString(CusNum, 6)
            st &= Pack.PackString(ReqPyrIde, 16)
            st &= ReqPyrFlt.PackTable()
            st &= Pack.PackString(ReqStaCde, 1)
            st &= Pack.PackString(Rsv2, 13)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            CusNum = Pack.Strip(DataStream, 6)
            ReqPyrIde = Pack.Strip(DataStream, 16)
            ReqPyrFlt.ReadTable(DataStream)
            ReqStaCde = Pack.Strip(DataStream, 1)
            Rsv2 = Pack.Strip(DataStream, 13)
        End Sub
    End Structure

    Public Structure EnumeratePayrollEmployees_Rsp_Struct       '0  Msg #480051
        Dim MsgReqDat As EnumeratePayrollEmployees_Req_Struct   '64	Desc:Request data
        Dim PayRecKey As CorPayroll_Key_Struct                  '28	Desc:Payroll key
        Dim Rsv32 As String                                     '32x Desc: Reserved, space filled
        Dim ItmCnt As String                                    '4n	Desc: Number of payroll employees being returned
        Dim PayRec() As CorPayroll_Record_Struct                '250 * ItmCnt Desc:Zero, one or several returned items

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= MsgReqDat.PackTable()
            st &= PayRecKey.PackTable()
            st &= Pack.PackString(Rsv32, 32)
            st &= Pack.PackNString(ItmCnt, 4)
            For ind As Integer = 0 To CInt(ItmCnt) - 1 : st &= PayRec(ind).PackTable() : Next
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            MsgReqDat.ReadTable(DataStream)
            PayRecKey.ReadTable(DataStream)
            Rsv32 = Pack.Strip(DataStream, 32)
            ItmCnt = Pack.Strip(DataStream, 4)
            ReDim PayRec(CInt(ItmCnt) - 1)
            For ind As Integer = 0 To CInt(ItmCnt) - 1 : PayRec(ind).ReadTable(DataStream) : Next
        End Sub
    End Structure

    Public Structure CreatePayrollEmployee_Req_Struct '316 Msg #480060
        Dim PayRecKey As CorPayroll_Key_Struct '28x				Desc: Payroll key
        Dim Rsv1 As String '35x				Desc: Reserved, space filled
        Dim NumRec As String '3x
        Dim PayRec As CorPayroll_Record_Struct '250				Desc:Payroll employee definition

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= PayRecKey.PackTable()
            st &= Pack.PackString(Rsv1, 35)
            st &= Pack.PackString("   ", 3)
            st &= PayRec.PackTable()
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            PayRecKey.ReadTable(DataStream)
            Rsv1 = Pack.Strip(DataStream, 38)
            PayRec.ReadTable(DataStream)
        End Sub
    End Structure

    Public Structure CreatePayrollEmployee_Rsp_Struct '316 Msg #480060
        Dim PayRecKey As CorPayroll_Key_Struct '28x				Desc: Payroll key
        Dim Rsv1 As String '38x				Desc: Reserved, space filled
        Dim BadRec As String '3n	Number of records rejected
        Dim NumRec As String '3n	Number [j] of records in this request
        Dim PayRec As CorPayroll_Record_Struct '250				Desc:Payroll employee definition

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= PayRecKey.PackTable()
            st &= Pack.PackString(Rsv1, 38)
            st &= Pack.PackString(BadRec, 3)
            st &= Pack.PackString(NumRec, 3)
            st &= PayRec.PackTable()
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            PayRecKey.ReadTable(DataStream)
            Rsv1 = Pack.Strip(DataStream, 38)
            BadRec = Pack.Strip(DataStream, 3)
            NumRec = Pack.Strip(DataStream, 3)
            PayRec.ReadTable(DataStream)
        End Sub
    End Structure

    Public Structure EnumeratePayrollExecutions_Req_Struct '64 Msg #480100
        Dim CusNum As String '6n				Desc: Customer number to be enumerated o spaces for all
        Dim PyrIde As String '16x				Desc: Payroll identifier
        Dim BegSerNum As String '6n				Desc: Starting serial number or spaces for the current serial number
        Dim EndSerNum As String '6n				Desc: Ending serial number or spaces for the current serial number
        Dim CntRecPyr As String '3n	            Desc: Return this number of the most recent payrolls (or spaces)
        Dim Rsv1 As String '30x				Desc: Reserved, space filled

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackNString(CusNum, 6)
            st &= Pack.PackString(PyrIde, 16)
            If BegSerNum.Trim = "" Then
                st &= "000000"
            Else
                st &= Pack.PackNString(BegSerNum, 6)
            End If
            If EndSerNum.Trim = "" Then
                st &= "999999"
            Else
                st &= Pack.PackNString(EndSerNum, 6)
            End If
            If CntRecPyr.Trim = "" Then
                st &= Pack.PackString(CntRecPyr, 3)
            Else
                st &= Pack.PackNString(CntRecPyr, 3)
            End If

            st &= Pack.PackString(Rsv1, 27)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            CusNum = Pack.Strip(DataStream, 6)
            PyrIde = Pack.Strip(DataStream, 16)
            BegSerNum = Pack.Strip(DataStream, 6)
            EndSerNum = Pack.Strip(DataStream, 6)
            CntRecPyr = Pack.Strip(DataStream, 3)
            Rsv1 = Pack.Strip(DataStream, 27)
        End Sub

    End Structure

    Public Structure EnumeratePayrollExecutions_Rsp_Struct '64 Msg #480100
        Dim MsgReqDat As EnumeratePayrollExecutions_Req_Struct  '64x Request data
        Dim Rsv2 As String '24x	Reservedas string ' space filled
        Dim ItmBad As String '4n	Number of payrolls with rejected items
        Dim ItmCnt As String '4n	Number of payroll executions being returned
        Dim DefItm() As CorPayroll_Executions_DefItm_Struct '[]	p*890x	Zero, one or several returned items

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= MsgReqDat.PackTable()
            st &= Pack.PackString(Rsv2, 24)
            st &= Pack.PackNString(ItmBad, 4)
            st &= Pack.PackNString(ItmCnt, 4)
            For ind As Integer = 0 To CInt(ItmCnt) - 1 : st &= DefItm(ind).PackTable() : Next
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            MsgReqDat.ReadTable(DataStream)
            Rsv2 = Pack.Strip(DataStream, 24)
            ItmBad = Pack.Strip(DataStream, 4)
            ItmCnt = Pack.Strip(DataStream, 4)
            ReDim DefItm(CInt(ItmCnt) - 1)
            For ind As Integer = 0 To CInt(ItmCnt) - 1 : DefItm(ind).ReadTable(DataStream) : Next
        End Sub

    End Structure

    Public Structure EnumeratePayrollExecutionEmployees_Req_Struct '64 Msg #480110
        Dim CusNum As String            '6n     Desc: Customer number 
        Dim ReqPyrIde As String         '16x	Desc: Payroll identifier
        Dim PyrSerNum As String         '6n		Desc: Payroll serial number
        Dim ReqResCde As String         '1x	    Desc: Flag (Y/N/space) to request good, bad or all records.
        Dim Rsv1 As String              '35x	Desc: Reserved, space filled

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackNString(CusNum, 6)
            st &= Pack.PackString(ReqPyrIde, 16)
            st &= Pack.PackNString(PyrSerNum, 6)
            st &= Pack.PackString(ReqResCde, 1)
            st &= Pack.PackString(Rsv1, 35)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            CusNum = Pack.Strip(DataStream, 6)
            ReqPyrIde = Pack.Strip(DataStream, 16)
            PyrSerNum = Pack.Strip(DataStream, 6)
            ReqResCde = Pack.Strip(DataStream, 1)
            Rsv1 = Pack.Strip(DataStream, 35)
        End Sub

    End Structure

    Public Structure EnumeratePayrollExecutionEmployees_Rsp_Struct '64 Msg #480110
        Dim MsgReqDat As EnumeratePayrollExecutionEmployees_Req_Struct  '64x Request data
        Dim Rsv2 As String                                                  '24x	Reserved string ' space filled
        Dim ItmBad As String                                                '4n	Number of items with errors
        Dim ItmCnt As String                                                '4n	Number of payroll employee executions [p] being returned
        Dim PayExe() As CorPayroll_Execution_Employees_PayExe_Struct        'p*300x	Zero, one or several returned items

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= MsgReqDat.PackTable()
            st &= Pack.PackString(Rsv2, 24)
            st &= Pack.PackNString(ItmBad, 4)
            st &= Pack.PackNString(ItmCnt, 4)
            For ind As Integer = 0 To CInt(ItmCnt) - 1 : st &= PayExe(ind).PackTable() : Next
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            MsgReqDat.ReadTable(DataStream)
            Rsv2 = Pack.Strip(DataStream, 24)
            ItmBad = Pack.Strip(DataStream, 4)
            ItmCnt = Pack.Strip(DataStream, 4)
            ReDim PayExe(CInt(ItmCnt) - 1)
            For ind As Integer = 0 To CInt(ItmCnt) - 1 : PayExe(ind).ReadTable(DataStream) : Next
        End Sub

    End Structure

    Public Structure PreparePayrol_Req_Struct '128, App #AP0856, Msg #
        'PayRecKey 
        Dim CusNum As String '6x				Desc: 
        Dim PyrIde As String '16x				Desc: 
        Dim PyrSerNum As String '6x				Desc: 
        Dim PyrValDte As String '8x				Desc: 
        Dim PyrDteBeg As String '8x				Desc: 
        Dim PyrDteEnd As String '8x				Desc: 
        Dim PyrRegMth As String '6x				Desc: 
        Dim PyrDsc As String '16x				Desc: 
        Dim AccNum As String '13x				Desc: 
        'TakOvrTok
        Dim TakOvrFlg As String '1x				Desc: 
        Dim TakOvrVal As String '12x				Desc: 
        Dim YesIncFlg As String '1x	            Flag (Y/N) inclusion flag (PyrIncFlg) is to be set to “Y”.
        Dim ClrPayAmt As String '1x	            Flag (Y/N) –payroll credit amount (PyrAmt) to be cleared.
        Dim Rsv1 As String '26x				    Desc: 

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(CusNum, 6)
            st &= Pack.PackString(PyrIde, 16)
            st &= Pack.PackString(PyrSerNum, 6)
            st &= Pack.PackDate(PyrValDte)
            st &= Pack.PackDate(PyrDteBeg)
            st &= Pack.PackDate(PyrDteEnd)
            st &= Pack.PackString(PyrRegMth, 6)
            st &= Pack.PackString(PyrDsc, 16)
            st &= Pack.PackString(AccNum, 13)
            st &= Pack.PackString(TakOvrFlg, 1)
            st &= Pack.PackString(TakOvrVal, 12)
            st &= Pack.PackString(YesIncFlg, 1)
            st &= Pack.PackString(ClrPayAmt, 1)
            st &= Pack.PackString(Rsv1, 26)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            CusNum = Pack.Strip(DataStream, 6)
            PyrIde = Pack.Strip(DataStream, 16)
            PyrSerNum = Pack.Strip(DataStream, 6)
            PyrValDte = Pack.Strip(DataStream, 8)
            PyrDteBeg = Pack.Strip(DataStream, 8)
            PyrDteEnd = Pack.Strip(DataStream, 8)
            PyrRegMth = Pack.Strip(DataStream, 6)
            PyrDsc = Pack.Strip(DataStream, 16)
            AccNum = Pack.Strip(DataStream, 13)
            TakOvrFlg = Pack.Strip(DataStream, 1)
            TakOvrVal = Pack.Strip(DataStream, 12)
            YesIncFlg = Pack.Strip(DataStream, 1)
            ClrPayAmt = Pack.Strip(DataStream, 1)
            Rsv1 = Pack.Strip(DataStream, 26)
        End Sub

    End Structure

    Public Structure PreparePayrol_ReqEx_Struct '128, App #AP0856, Msg #
        'PayRecKey 
        Dim CusNum As String '6x				Desc: 
        Dim PyrIde As String '16x				Desc: 
        Dim PyrSerNum As String '6x				Desc: 
        Dim PyrValDte As String '8x				Desc: 
        Dim PyrDteBeg As String '8x				Desc: 
        Dim PyrDteEnd As String '8x				Desc: 
        Dim PyrRegMth As String '6x				Desc: 
        Dim PyrDsc As String '16x				Desc: 
        Dim AccNum As String '13x				Desc: 
        'TakOvrTok
        Dim TakOvrFlg As String '1x				Desc: 
        Dim TakOvrVal As String '12x				Desc: 
        Dim YesIncFlg As String '1x	            Flag (Y/N) inclusion flag (PyrIncFlg) is to be set to “Y”.
        Dim ClrPayAmt As String '1x	            Flag (Y/N) –payroll credit amount (PyrAmt) to be cleared.
        Dim Rsv1 As String '26x				    Desc: 
        Dim CorPayTot As CorPayroll_CorPayTot_Struct
        Dim Rsv2 As String '30x

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(CusNum, 6)
            st &= Pack.PackString(PyrIde, 16)
            st &= Pack.PackString(PyrSerNum, 6)
            st &= Pack.PackDate(PyrValDte)
            st &= Pack.PackDate(PyrDteBeg)
            st &= Pack.PackDate(PyrDteEnd)
            st &= Pack.PackString(PyrRegMth, 6)
            st &= Pack.PackString(PyrDsc, 16)
            st &= Pack.PackString(AccNum, 13)
            st &= Pack.PackString(TakOvrFlg, 1)
            st &= Pack.PackString(TakOvrVal, 12)
            st &= Pack.PackString(YesIncFlg, 1)
            st &= Pack.PackString(ClrPayAmt, 1)
            st &= Pack.PackString(Rsv1, 26)
            st &= CorPayTot.PackTable()
            st &= Pack.PackString(Rsv2, 30)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            CusNum = Pack.Strip(DataStream, 6)
            PyrIde = Pack.Strip(DataStream, 16)
            PyrSerNum = Pack.Strip(DataStream, 6)
            PyrValDte = Pack.Strip(DataStream, 8)
            PyrDteBeg = Pack.Strip(DataStream, 8)
            PyrDteEnd = Pack.Strip(DataStream, 8)
            PyrRegMth = Pack.Strip(DataStream, 6)
            PyrDsc = Pack.Strip(DataStream, 16)
            AccNum = Pack.Strip(DataStream, 13)
            TakOvrFlg = Pack.Strip(DataStream, 1)
            TakOvrVal = Pack.Strip(DataStream, 12)
            YesIncFlg = Pack.Strip(DataStream, 1)
            ClrPayAmt = Pack.Strip(DataStream, 1)
            Rsv1 = Pack.Strip(DataStream, 26)
            CorPayTot.ReadTable(DataStream)
            Rsv2 = Pack.Strip(DataStream, 30)
        End Sub

    End Structure

    Public Structure PreparePayrol_Rsp_Struct '528x, App #, Msg #
        Dim MsgReqDta As PreparePayrol_Req_Struct '128				Desc:Echoed request data
        Dim RspOvrTok As String '12x				Desc: Take-over-token data from ICS (when ICS sets flag value to "Y")
        Dim Rsv1 As String '38x				Desc: Reserved, space filled
        'PyrDef                             Desc: Payroll definition after update
        Dim PyrDef As CorPayroll_Definition_Item_Struct '300
        Dim Rsv2 As String '50x				Desc: Reserved, space filled

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= MsgReqDta.PackTable()
            st &= Pack.PackString(RspOvrTok, 12)
            st &= Pack.PackString(Rsv1, 38)
            st &= PyrDef.PackTable()
            st &= Pack.PackString(Rsv2, 50)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            MsgReqDta.ReadTable(DataStream)
            RspOvrTok = Pack.Strip(DataStream, 12)
            Rsv1 = Pack.Strip(DataStream, 38)
            PyrDef.ReadTable(DataStream)
            Rsv2 = Pack.Strip(DataStream, 50)
        End Sub
    End Structure

    Public Structure CancelPreparePayrol_Req_Struct '64, App #AP0856, Msg #
        'PayRecKey 
        Dim CusNum As String '6x				Desc: 
        Dim PyrIde As String '16x				Desc: 
        Dim PyrSerNum As String '6x				Desc: 
        'TakOvrTok
        Dim TakOvrFlg As String '1x				Desc: 
        Dim TakOvrVal As String '12x				Desc: 
        Dim Rsv1 As String '23x				Desc: 

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(CusNum, 6)
            st &= Pack.PackString(PyrIde, 16)
            st &= Pack.PackString(PyrSerNum, 6)
            st &= Pack.PackString(TakOvrFlg, 1)
            st &= Pack.PackString(TakOvrVal, 12)
            st &= Pack.PackString(Rsv1, 23)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            CusNum = Pack.Strip(DataStream, 6)
            PyrIde = Pack.Strip(DataStream, 16)
            PyrSerNum = Pack.Strip(DataStream, 6)
            TakOvrFlg = Pack.Strip(DataStream, 1)
            TakOvrVal = Pack.Strip(DataStream, 12)
            Rsv1 = Pack.Strip(DataStream, 23)
        End Sub

    End Structure

    Public Structure CancelPreparePayrol_Rsp_Struct '528x, App #, Msg #
        Dim MsgReqDta As CancelPreparePayrol_Req_Struct '64				Desc:Echoed request data
        Dim RspOvrTok As String '12x				Desc: Take-over-token data from ICS (when ICS sets flag value to "Y")
        Dim Rsv1 As String '38x				Desc: Reserved, space filled
        Dim PyrDef As CorPayroll_Definition_Item_Struct '300            Desc: Payroll definition after update
        Dim Rsv2 As String '50x				Desc: Reserved, space filled

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= MsgReqDta.PackTable()
            st &= Pack.PackString(RspOvrTok, 12)
            st &= Pack.PackString(Rsv1, 38)
            st &= PyrDef.PackTable()
            st &= Pack.PackString(Rsv2, 50)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            MsgReqDta.ReadTable(DataStream)
            RspOvrTok = Pack.Strip(DataStream, 12)
            Rsv1 = Pack.Strip(DataStream, 38)
            PyrDef.ReadTable(DataStream)
            Rsv2 = Pack.Strip(DataStream, 50)
        End Sub
    End Structure

    Public Structure BeginPrepareEmployees_Req_Struct '128x, App #AP0856, Msg #
        Dim DynCntDat As CorPayRoll_DynCntDat_Struct '128
        Public Function PackTable() As String
            Dim st As String = String.Empty
            st = DynCntDat.PackTable()
            Return st
        End Function
        Public Sub ReadTable(ByRef DataStream As String)
            DynCntDat.ReadTable(DataStream)
        End Sub
    End Structure

    Public Structure BeginPrepareEmployees_Rsp_Struct '00x, App #AP0856, Msg #480230
        Dim MsgReqDta As BeginPrepareEmployees_Req_Struct '128				Desc:Echoed request data
        Dim RspOvrTok As String '12x				Desc: Take-over-token data from ICS (when ICS sets flag value to "Y")
        Dim Rsv1 As String '38x				Desc: Reserved, space filled
        Dim PyrDef As CorPayroll_Definition_Item_Struct '750				Desc: Payroll definition
        Dim Rsv2 As String '41				Desc: Reserved, space filled
        Dim CntFlg As String '1x	Specifies the encoding used for the counts (see note)
        Dim TypDatRet As String '4x	        Desc: Type of data being returned value “ENUM”
        Dim ActRecCnt As Integer '4n				Desc: Total number of employee records in the payroll
        Dim ActRecRet As Integer '4n				Desc: Actual number of employee records being returned
        Dim PayRec() As CorPayroll_Record_Struct '250				Desc:Payroll employee definition

        Public Function PackTable() As String
            If CntFlg Is Nothing OrElse CntFlg.Trim = "" Then CntFlg = CountFormatFlag
            Dim st As String = String.Empty
            st &= MsgReqDta.PackTable()
            st &= Pack.PackString(RspOvrTok, 12)
            st &= Pack.PackString(Rsv1, 38)
            st &= PyrDef.PackTable()
            st &= Pack.PackString(Rsv2, 41)
            st &= Pack.PackString(CntFlg, 1) 'CountFormatFlag '"X"
            st &= Pack.PackString(TypDatRet, 4)
            st &= CStr(IIf(CntFlg = "X", CNEP0100.NumEngClass.ConvertToBase64(ActRecCnt), Pack.PackNString(ActRecCnt.ToString, 4))) 'Pack.PackNString(ActRecCnt, 4)
            st &= CStr(IIf(CntFlg = "X", CNEP0100.NumEngClass.ConvertToBase64(ActRecRet), Pack.PackNString(ActRecRet.ToString, 4))) 'Pack.PackNString(ActRecRet, 4)
            If Not (PayRec Is Nothing) Then
                For idx As Integer = 0 To PayRec.Length - 1
                    st &= PayRec(idx).PackTable()
                Next
            End If
            Return st
        End Function
        Public Sub ReadTable(ByRef DataStream As String)
            Dim st As String
            MsgReqDta.ReadTable(DataStream)
            RspOvrTok = Pack.Strip(DataStream, 12)
            Rsv1 = Pack.Strip(DataStream, 38)
            PyrDef.ReadTable(DataStream)
            Rsv2 = Pack.Strip(DataStream, 41)
            CntFlg = Pack.Strip(DataStream, 1)
            TypDatRet = Pack.Strip(DataStream, 4)
            st = Pack.Strip(DataStream, 4) : ActRecCnt = CInt(IIf(CntFlg = "X", CNEP0100.NumEngClass.Base64toDecimal(st), AppInstance.ExInt(st))) 'ActRecCnt = Pack.Strip(DataStream, 4)
            st = Pack.Strip(DataStream, 4) : ActRecRet = AppInstance.ExInt(st) 'CInt(IIf(CntFlg = "X", CNEP0100.NumEngClass.Base64toDecimal(st), AppInstance.ExInt(st))) 'ActRecRet = Pack.Strip(DataStream, 4)
            Dim cnt As Integer = CInt(ActRecRet)
            If cnt <= 0 Then
                Erase PayRec
            Else
                ReDim PayRec(cnt - 1)
                For idx As Integer = 0 To cnt - 1
                    PayRec(idx).ReadTable(DataStream)
                Next
            End If
        End Sub
    End Structure

    Public Structure SavePrepareEmployees_Req_Struct '00x, App #AP0856, Msg #480240
        Dim DynCntDat As CorPayRoll_DynCntDat_Struct '128
        Dim Rsv1 As String '50x				Desc: Reserved, space filled
        Dim PyrDef As CorPayroll_Definition_Item_Struct '750				Desc: Payroll definition
        Dim Rsv2 As String '50x				Desc: Reserved, space filled
        Dim ActRecRet As String '4n				Desc: Actual number of employee records being returned
        Dim PayRec() As CorPayroll_Record_Struct '250				Desc:Payroll employee definition

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st = DynCntDat.PackTable()
            st &= Pack.PackString(Rsv1, 50)
            st &= PyrDef.PackTable()
            st &= Pack.PackString(Rsv2, 50)
            st &= Pack.PackNString(ActRecRet, 4)
            If Not (PayRec Is Nothing) Then
                For idx As Integer = 0 To PayRec.Length - 1
                    st &= PayRec(idx).PackTable()
                Next
            End If
            Return st
        End Function
        Public Sub ReadTable(ByRef DataStream As String)
            DynCntDat.ReadTable(DataStream)
            Rsv1 = Pack.Strip(DataStream, 50)
            PyrDef.ReadTable(DataStream)
            Rsv2 = Pack.Strip(DataStream, 50)
            ActRecRet = Pack.Strip(DataStream, 4)
            Dim cnt As Integer = CInt(ActRecRet)
            If cnt <= 0 Then
                Erase PayRec
            Else
                ReDim PayRec(cnt - 1)
                For idx As Integer = 0 To cnt - 1
                    PayRec(idx).ReadTable(DataStream)
                Next
            End If
        End Sub
    End Structure

    Public Structure SavePrepareEmployees_Rsp_Struct '00x, App #AP0856, Msg #480240
        Dim DynCntDat As CorPayRoll_DynCntDat_Struct '128
        Dim Rsv1 As String '50x				Desc: Reserved, space filled
        Dim PyrDef As CorPayroll_Definition_Item_Struct '750				Desc: Payroll definition
        Dim Rsv2 As String '41x				Desc: Reserved, space filled
        Dim CntFlg As String '1x	Specifies the encoding used for the counts (see note)
        Dim TypDatRet As String '4x	        Desc: Type of data being returned value “RESP”
        Dim CntErrRet As Integer '4n				Desc: Total number of employee records in the payroll
        Dim CntRecRet As Integer '4n				Desc: Actual number of employee records being returned
        Dim PayRec() As CorPayroll_Record_Struct '250				Desc:Payroll employee definition

        Public Function PackTable() As String
            If CntFlg Is Nothing OrElse CntFlg.Trim = "" Then CntFlg = CountFormatFlag
            Dim st As String = String.Empty
            st = DynCntDat.PackTable()
            st &= Pack.PackString(Rsv1, 50)
            st &= PyrDef.PackTable()
            st &= Pack.PackString(Rsv2, 41)
            st &= Pack.PackString(CntFlg, 1) 'CountFormatFlag '"X"
            st &= Pack.PackString(TypDatRet, 4)
            st &= CStr(IIf(CntFlg = "X", CNEP0100.NumEngClass.ConvertToBase64(CntErrRet), Pack.PackNString(CntErrRet.ToString, 4))) 'Pack.PackNString(CntErrRet, 4)
            st &= CStr(IIf(CntFlg = "X", CNEP0100.NumEngClass.ConvertToBase64(CntRecRet), Pack.PackNString(CntRecRet.ToString, 4))) 'Pack.PackNString(CntRecRet, 4)
            If Not (PayRec Is Nothing) Then
                For idx As Integer = 0 To PayRec.Length - 1
                    st &= PayRec(idx).PackTable()
                Next
            End If
            Return st
        End Function
        Public Sub ReadTable(ByRef DataStream As String)
            Dim st As String
            DynCntDat.ReadTable(DataStream)
            Rsv1 = Pack.Strip(DataStream, 50)
            PyrDef.ReadTable(DataStream)
            Rsv2 = Pack.Strip(DataStream, 41)
            CntFlg = Pack.Strip(DataStream, 1).ToUpper
            TypDatRet = Pack.Strip(DataStream, 4)
            st = Pack.Strip(DataStream, 4) : CntErrRet = CInt(IIf(CntFlg = "X", CNEP0100.NumEngClass.Base64toDecimal(st), AppInstance.ExInt(st))) 'CntErrRet = Pack.Strip(DataStream, 4)
            st = Pack.Strip(DataStream, 4) : CntRecRet = AppInstance.ExInt(st) 'CInt(IIf(CntFlg = "X", CNEP0100.NumEngClass.Base64toDecimal(st), AppInstance.ExInt(st))) 'CntRecRet = Pack.Strip(DataStream, 4)
            Dim cnt As Integer = CInt(CntRecRet)
            If cnt <= 0 Then
                Erase PayRec
            Else
                ReDim PayRec(cnt - 1)
                For idx As Integer = 0 To cnt - 1
                    PayRec(idx).ReadTable(DataStream)
                Next
            End If
        End Sub
    End Structure

    Public Structure EndPrepareEmployees_Struct '00x, App #AP0856, Msg #480240
        Dim DynCntDat As CorPayRoll_DynCntDat_Struct '128
        Dim Rsv1 As String '50x				Desc: Reserved, space filled
        Dim PyrDef As CorPayroll_Definition_Item_Struct '750				Desc: Payroll definition
        Dim Rsv2 As String '54x				Desc: Reserved, space filled

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st = DynCntDat.PackTable()
            st &= Pack.PackString(Rsv1, 50)
            st &= PyrDef.PackTable()
            st &= Pack.PackString(Rsv2, 54)
            Return st
        End Function
        Public Sub ReadTable(ByRef DataStream As String)
            DynCntDat.ReadTable(DataStream)
            Rsv1 = Pack.Strip(DataStream, 50)
            PyrDef.ReadTable(DataStream)
            Rsv2 = Pack.Strip(DataStream, 54)
        End Sub
    End Structure

    Public Structure SubmitPayrol_Rsp_Struct ' App #AP0856, Msg #480200
        Dim PayRecKey As CorPayroll_Key_Struct '28				
        Dim Rsv1 As String '23x				Desc: Reserved, space filled
        Dim CntFlg As String '1x Specifies the encoding used for the counts
        Dim PyrPrpSta As String '4x
        Dim ItmBad As Integer '4n
        Dim ItmCnt As Integer '4n
        Dim PayRec() As CorPayroll_PayRec_Struct '220

        Public Function PackTable() As String
            If CntFlg Is Nothing OrElse CntFlg.Trim = "" Then CntFlg = CountFormatFlag
            Dim st As String = String.Empty
            st &= PayRecKey.PackTable()
            st &= Pack.PackString(Rsv1, 23)
            st &= Pack.PackString(CntFlg, 1) 'CountFormatFlag '"X"
            st &= Pack.PackString(PyrPrpSta, 4)
            st &= CStr(IIf(CntFlg = "X", CNEP0100.NumEngClass.ConvertToBase64(ItmBad), Pack.PackNString(ItmBad.ToString, 4)))
            st &= CStr(IIf(CntFlg = "X", CNEP0100.NumEngClass.ConvertToBase64(ItmCnt), Pack.PackNString(ItmCnt.ToString, 4)))
            If Not (PayRec Is Nothing) Then
                For idx As Integer = 0 To PayRec.Length - 1
                    st &= PayRec(idx).PackTable()
                Next
            End If
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            Dim st As String
            PayRecKey.ReadTable(DataStream)
            Rsv1 = Pack.Strip(DataStream, 23)
            CntFlg = Pack.Strip(DataStream, 1)
            PyrPrpSta = Pack.Strip(DataStream, 4)
            st = Pack.Strip(DataStream, 4) : ItmBad = CInt(IIf(CntFlg = "X", CNEP0100.NumEngClass.Base64toDecimal(st), AppInstance.ExInt(st)))
            st = Pack.Strip(DataStream, 4) : ItmCnt = CInt(IIf(CntFlg = "X", CNEP0100.NumEngClass.Base64toDecimal(st), AppInstance.ExInt(st)))
            Dim cnt As Integer = CInt(ItmCnt)
            If cnt <= 0 Then
                Erase PayRec
            Else
                ReDim PayRec(cnt - 1)
                For idx As Integer = 0 To cnt - 1
                    PayRec(idx).ReadTable(DataStream)
                Next
            End If
        End Sub
    End Structure

#End Region

#Region "Messages..."

    '180500
    Public Function SendMessage_EnumerateFileUploadHistory(ByRef p_Struct As EnumerateFileUploadHistory_Req_Struct) As String
        Dim st As String = String.Empty
        st &= p_Struct.PackTable()
        Return AppInstance.SendMessageVisuallyEx("180500", st, "CUS", p_Struct.CusNum, "", "")
    End Function

    Public Function GetMessage_EnumerateFileUploadHistory(ByVal MsgId As String, ByRef MsgRspDat As EnumerateFileUploadHistory_Rsp_Struct) As Boolean
        Dim resp As String = String.Empty
        If Not (GetMessage_Common("180500", "", MsgId, &H80099999, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            MsgRspDat.ReadTable(resp)
        Catch ex As Exception
            HandleError(&H80099999, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function
    '480010
    Public Function SendMessage_EnumeratePayrollDefinitions(ByRef p_Struct As EnumeratePayrollDefinitions_Req_Struct) As String
        Dim st As String = String.Empty
        st &= p_Struct.PackTable()
        Return AppInstance.SendMessageVisuallyEx("480010", st, "CUS", p_Struct.CusNum, "", "")
    End Function

    Public Function GetMessage_EnumeratePayrollDefinitions(ByVal MsgId As String, ByRef MsgRspDat As EnumeratePayrollDefinitions_Rsp_Struct) As Boolean
        Dim resp As String = String.Empty
        If Not (GetMessage_Common("480010", "", MsgId, &H80099999, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            MsgRspDat.ReadTable(resp)
        Catch ex As Exception
            HandleError(&H80099999, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    '480020
    Public Function SendMessage_CreatePayrollDefinition(ByVal p_Struct As CreatePayrollDefinition_Req_Struct) As String

        Dim st As String = String.Empty

        st &= p_Struct.PackTable()

        Return AppInstance.SendMessageVisuallyEx("480020", st, "CUS", p_Struct.CorPayDef.CorPayDef.CusNum, "", "")
    End Function
    Public Function GetMessage_CreatePayrollDefinition(ByVal MsgId As String, ByRef MsgRspDat As CreatePayrollDefinition_Rsp_Struct) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("480020", "", MsgId, &H80099999, resp)) Then Return False
        Try

            AppInstance.strip(resp, 256)
            MsgRspDat.ReadTable(resp)

        Catch ex As Exception
            HandleError(&H80099999, "Error:", "Error", ex)
            Return False
        End Try
        Return True

    End Function

    '480030
    Public Function SendMessage_ModifyPayrollDefinition(ByVal p_Struct As CreatePayrollDefinition_Req_Struct) As String
        Dim st As String = String.Empty
        st &= p_Struct.PackTable()
        Return AppInstance.SendMessageVisuallyEx("480030", st, "CUS", p_Struct.CorPayDef.CorPayDef.CusNum, "", "")
    End Function
    Public Function GetMessage_ModifyPayrollDefinition(ByVal MsgId As String, ByRef MsgRspDat As CreatePayrollDefinition_Rsp_Struct) As Boolean
        Dim resp As String = String.Empty
        If Not (GetMessage_Common("480030", "", MsgId, &H81000627, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            MsgRspDat.ReadTable(resp)
        Catch ex As Exception
            HandleError(&H81000627, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    '480040
    Public Function SendMessage_DeletePayrollDefinition(ByVal p_Struct As CreatePayrollDefinition_Req_Struct) As String
        Dim st As String = String.Empty
        st &= p_Struct.PackTable()
        Return AppInstance.SendMessageVisuallyEx("480040", st, "CUS", "", "", "")
    End Function
    Public Function GetMessage_DeletePayrollDefinition(ByVal MsgId As String, ByRef MsgRspDat As CreatePayrollDefinition_Rsp_Struct) As Boolean
        Dim resp As String = String.Empty
        If Not (GetMessage_Common("480040", "", MsgId, &H81000628, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            MsgRspDat.ReadTable(resp)
        Catch ex As Exception
            HandleError(&H81000628, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    '480050
    Public Function SendMessage_EnumeratePayrollEmployees(ByVal p_Struct As EnumeratePayrollEmployees_Req_Struct) As String
        Dim st As String = String.Empty
        st &= p_Struct.PackTable()
        Return AppInstance.SendMessageVisuallyEx("480050", st, "CUS", p_Struct.CusNum, "", "")
    End Function
    Public Function GetMessage_EnumeratePayrollEmployees(ByVal MsgId As String, ByRef MsgRspDat As EnumeratePayrollEmployees_Rsp_Struct) As Boolean
        Dim resp As String = String.Empty
        If Not (GetMessage_Common("480050", "", MsgId, &H81000629, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            MsgRspDat.ReadTable(resp)
        Catch ex As Exception
            HandleError(&H81000629, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    '480060
    Public Function SendMessage_CreatePayrollEmployee(ByVal p_Struct As CreatePayrollEmployee_Req_Struct) As String
        Dim st As String = String.Empty
        st &= p_Struct.PackTable()
        Return AppInstance.SendMessageVisuallyEx("480060", st, "CUS", p_Struct.PayRecKey.CusNum, "", "")
    End Function
    Public Function GetMessage_CreatePayrollEmployee(ByVal MsgId As String, ByRef MsgRspDat As CreatePayrollEmployee_Rsp_Struct) As Boolean
        Dim resp As String = String.Empty
        If Not (GetMessage_Common("480060", "", MsgId, &H81000630, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            MsgRspDat.ReadTable(resp)

        Catch ex As Exception
            HandleError(&H81000630, "Error:", "Error", ex)
            Return False
        End Try
        Return True

    End Function

    '480070
    Public Function SendMessage_ModifyPayrollEmployee(ByVal p_Struct As CreatePayrollEmployee_Req_Struct) As String
        Dim st As String = String.Empty
        st &= p_Struct.PackTable()
        Return AppInstance.SendMessageVisuallyEx("480070", st, "CUS", p_Struct.PayRecKey.CusNum, "", "")
    End Function
    Public Function GetMessage_ModifyPayrollEmployee(ByVal MsgId As String, ByRef MsgRspDat As CreatePayrollEmployee_Req_Struct) As Boolean
        Dim resp As String = String.Empty
        If Not (GetMessage_Common("480070", "", MsgId, &H81000631, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            MsgRspDat.ReadTable(resp)
        Catch ex As Exception
            HandleError(&H81000631, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    '480080
    Public Function SendMessage_DeletePayrollEmployee(ByRef p_Struct As CreatePayrollEmployee_Req_Struct) As String
        Dim st As String = String.Empty
        st &= p_Struct.PackTable()
        Return AppInstance.SendMessageVisuallyEx("480080", st, "CUS", p_Struct.PayRecKey.CusNum, "", "")
    End Function
    Public Function GetMessage_DeletePayrollEmployee(ByVal MsgId As String, ByRef MsgRspDat As CreatePayrollEmployee_Req_Struct) As Boolean
        Dim resp As String = String.Empty
        If Not (GetMessage_Common("480080", "", MsgId, &H81000632, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            MsgRspDat.ReadTable(resp)
        Catch ex As Exception
            HandleError(&H81000632, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    '480090
    Public Function SendMessage_QueryPreparedPayrol(ByVal CusNum As String, ByVal PyrIde As String) As String
        Dim st As String = String.Empty
        st &= Pack.PackString(CusNum, 6)
        st &= Pack.PackString(PyrIde, 16)
        st &= Pack.PackString(" ", 10)
        Return AppInstance.SendMessageVisuallyEx("480090", st, "CUS", CusNum, "", "")
    End Function
    Public Function GetMessage_QueryPreparedPayrol(ByVal MsgId As String, ByRef MsgRspDat As QueryPreparedPayroll_Rsp_Struct) As Boolean
        Dim resp As String = String.Empty
        If Not (GetMessage_Common("480090", "", MsgId, &H81000628, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            MsgRspDat.ReadTable(resp)
        Catch ex As Exception
            HandleError(&H81000628, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    '480100
    Public Function SendMessage_EnumeratePayrollExecutions(ByVal p_Struct As EnumeratePayrollExecutions_Req_Struct) As String
        Dim st As String = String.Empty
        st &= p_Struct.PackTable()
        Return AppInstance.SendMessageVisuallyEx("480100", st, "CUS", p_Struct.CusNum, "", "")
    End Function
    Public Function GetMessage_EnumeratePayrollExecutions(ByVal MsgId As String, ByRef MsgRspDat As EnumeratePayrollExecutions_Rsp_Struct) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("480100", "", MsgId, &H80099999, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            MsgRspDat.ReadTable(resp)
        Catch ex As Exception
            HandleError(&H80099999, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function
    '480110
    Public Function SendMessage_EnumeratePayrollExecutionEmployees(ByVal p_Struct As EnumeratePayrollExecutionEmployees_Req_Struct) As String
        Dim st As String = String.Empty
        st &= p_Struct.PackTable()
        Return AppInstance.SendMessageVisuallyEx("480110", st, "CUS", p_Struct.CusNum, "", "")
    End Function
    Public Function GetMessage_EnumeratePayrollExecutionEmployees(ByVal MsgId As String, ByRef MsgRspDat As EnumeratePayrollExecutionEmployees_Rsp_Struct) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("480110", "", MsgId, &H80099999, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            MsgRspDat.ReadTable(resp)
        Catch ex As Exception
            HandleError(&H80099999, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function
    '480190
    Public Function SendMessage_ModifyPayrollInputControl(ByVal CusNum As String, ByVal PyrIde As String, ByVal p_Struct As CorPayroll_Definition_Item_Struct) As String
        Dim st As String = String.Empty
        st = Pack.PackString(CusNum, 6)
        st &= Pack.PackString(PyrIde, 16)
        st &= Space(10)
        st &= p_Struct.PackTable()
        Return AppInstance.SendMessageVisuallyEx("480190", st, "CUS", CusNum, "", "")
    End Function
    Public Function GetMessage_ModifyPayrollInputControl(ByVal MsgId As String, ByRef MsgRspDat As CorPayroll_Definition_Item_Struct) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("480190", "", MsgId, &H80099999, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 32)
            MsgRspDat.ReadTable(resp)
        Catch ex As Exception
            HandleError(&H80099999, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function
    '480200
    Public Function SendMessage_SubmitPayrol(ByVal p_Struct As CorPayroll_Key_Struct) As String
        Dim st As String = String.Empty
        st &= p_Struct.PackTable()
        st &= Pack.PackString(" ", 32)
        Return AppInstance.SendMessageVisuallyEx("480200", st, "CUS", p_Struct.CusNum, "", "")
    End Function
    Public Function GetMessage_SubmitPayrol(ByVal MsgId As String, ByRef MsgRspDat As SubmitPayrol_Rsp_Struct) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("480200", "", MsgId, &H80099999, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            MsgRspDat.ReadTable(resp)
        Catch ex As Exception
            HandleError(&H80099999, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

    '480210
    Public Function SendMessage_PreparePayrol(ByVal p_Struct As PreparePayrol_ReqEx_Struct) As String
        Dim st As String = String.Empty
        st &= p_Struct.PackTable()
        Return AppInstance.SendMessageVisuallyEx("480210", st, "CUS", p_Struct.CusNum, p_Struct.AccNum, "")
    End Function
    Public Function GetMessage_PreparePayrol(ByVal MsgId As String, ByRef MsgRspDat As PreparePayrol_Rsp_Struct, ByRef TakeOver As Boolean) As Boolean
        Dim MsgCde As String = "480210"
        Dim resp As String = String.Empty
        Dim MsgRes As Boolean = GetMessage_Common(MsgCde, "", MsgId, &H80099999, resp, True, True)
        If resp Is Nothing OrElse resp.Trim = "" Then Return False
        Dim ResCde As String = AppInstance.SafeSubString(resp, 83, 3)
        Dim ActCde As String = AppInstance.SafeSubString(resp, 86, 2)
        If (MsgRes = True) Or ActCde = "88" Then
            Try
                AppInstance.strip(resp, 256)
                MsgRspDat.ReadTable(resp)
            Catch ex As Exception
                HandleError(&H80099999, "Error:", "Error", ex)
                Return False
            End Try

            If ActCde = "88" Then
                TakeOver = MsgRspDat.RspOvrTok.Trim <> "" 'True if RspOvrTok is not spaces, otherwise, take over is not allowed
                Dim st As String
                Dim Rsp As DialogResult
                Select Case ResCde
                    Case "C01"
                        st = "Cannot create or prepare already submitted payroll (ICS.88.C01)\n" & _
                            "Payroll sequence <nnnn> was submitted on <ddMmmyy>\n" & _
                            "Status <code> indicating <desc>\n" & _
                            "Last preparation  activity on <ddMmmyy>\n" & _
                            "Preparation made by user <uuuu> of <cccc>\n\n"

                        st = st.Replace("\n", vbCrLf)
                        st = st.Replace("<nnnn>", MsgRspDat.PyrDef.CorPayDef.PyrSerNum.Trim)
                        st = st.Replace("<code>", MsgRspDat.PyrDef.CorPrpMod.PyrPrpSta)
                        st = st.Replace("<desc>", frmCorPayroll_Preparation.DecodePayoutStatus(MsgRspDat.PyrDef.CorPrpMod.PyrPrpSta, False))
                        st = st.Replace("<uuuu>", MsgRspDat.PyrDef.CorPrpMod.PrpUsrKey.Trim)
                        st = st.Replace("<cccc>", MsgRspDat.PyrDef.CorPrpMod.PrpCorKey.Trim)
                        st = st.Replace("<ddMmmyy>", AppInstance.UnpackDateEx(MsgRspDat.PyrDef.CorPrpMod.PrpStp, "ddMMMyyyy", " HH:mm:ss"))
                        ModalMessageBox(st, MessageBoxButtons.OK, , MessageBoxIcon.Exclamation, "Prepare Payout")
                    Case "C15"
                        st = "Preparation has already begun for sequence <nnnn>  (ICS.88.C15)\n" & _
                            "The prepartion was not ended in an orderly manner.\n" & _
                            "Status <code> indicating <desc>\n" & _
                            "Last preparation  activity on <ddMmmyy>\n" & _
                            "Preparation made by user <uuuu> of <cccc>\n\n"

                        st = st.Replace("\n", vbCrLf)
                        st = st.Replace("<nnnn>", MsgRspDat.PyrDef.CorPayDef.PyrSerNum.Trim)
                        st = st.Replace("<code>", MsgRspDat.PyrDef.CorPrpMod.PyrPrpSta)
                        st = st.Replace("<desc>", frmCorPayroll_Preparation.DecodePayoutStatus(MsgRspDat.PyrDef.CorPrpMod.PyrPrpSta, False))
                        st = st.Replace("<uuuu>", MsgRspDat.PyrDef.CorPrpMod.PrpUsrKey.Trim)
                        st = st.Replace("<cccc>", MsgRspDat.PyrDef.CorPrpMod.PrpCorKey.Trim)
                        st = st.Replace("<ddMmmyy>", AppInstance.UnpackDateEx(MsgRspDat.PyrDef.CorPrpMod.PrpStp, "ddMMMyyyy", " HH:mm:ss"))
                        If TakeOver Then
                            st &= "Press 'OK' to take over further preparation" & vbCrLf & "Press 'Cancel' to exit from preparation."
                            Rsp = ModalMessageBox(st, MessageBoxButtons.OKCancel, MessageBoxDefaultButton.Button2, MessageBoxIcon.Exclamation, "Prepare Payout")
                            TakeOver = (Rsp = DialogResult.OK)
                        Else
                            ModalMessageBox(st, MessageBoxButtons.OK, , MessageBoxIcon.Exclamation, "Prepare Payout")
                        End If
                    Case "C16"
                        st = "You have already begun preparations for sequence <nnnn> (ICS.88.C16) \n" & _
                            "Your  prepartion was not ended in an orderly manner.\n" & _
                            "Status <code> indicating <desc>\n" & _
                            "Last preparation  activity on <ddMmmyy>\n\n"

                        st = st.Replace("\n", vbCrLf)
                        st = st.Replace("<nnnn>", MsgRspDat.PyrDef.CorPayDef.PyrSerNum.Trim)
                        st = st.Replace("<code>", MsgRspDat.PyrDef.CorPrpMod.PyrPrpSta)
                        st = st.Replace("<desc>", frmCorPayroll_Preparation.DecodePayoutStatus(MsgRspDat.PyrDef.CorPrpMod.PyrPrpSta, False))
                        st = st.Replace("<ddMmmyy>", AppInstance.UnpackDateEx(MsgRspDat.PyrDef.CorPrpMod.PrpStp, "ddMMMyyyy", " HH:mm:ss"))
                        If TakeOver Then
                            st &= "Press 'OK' to continue your preparation." & vbCrLf & "Press 'Cancel' to exit from preparation."
                            Rsp = ModalMessageBox(st, MessageBoxButtons.OKCancel, MessageBoxDefaultButton.Button2, MessageBoxIcon.Exclamation, "Prepare Payout")
                            TakeOver = (Rsp = DialogResult.OK)
                        Else
                            ModalMessageBox(st, MessageBoxButtons.OK, , MessageBoxIcon.Exclamation, "Prepare Payout")
                        End If
                    Case "C17"
                        st = "Preparation has already begun for sequence <nnnn> (ICS.88.C17).\n" & _
                            "Status <code> indicating <desc>\n" & _
                            "Last preparation  activity on <ddMmmyy>\n" & _
                            "Preparation made by user <uuuu> of <cccc>\n\n"

                        st = st.Replace("\n", vbCrLf)
                        st = st.Replace("<nnnn>", MsgRspDat.PyrDef.CorPayDef.PyrSerNum.Trim)
                        st = st.Replace("<code>", MsgRspDat.PyrDef.CorPrpMod.PyrPrpSta)
                        st = st.Replace("<desc>", frmCorPayroll_Preparation.DecodePayoutStatus(MsgRspDat.PyrDef.CorPrpMod.PyrPrpSta, False))
                        st = st.Replace("<uuuu>", MsgRspDat.PyrDef.CorPrpMod.PrpUsrKey.Trim)
                        st = st.Replace("<cccc>", MsgRspDat.PyrDef.CorPrpMod.PrpCorKey.Trim)
                        st = st.Replace("<ddMmmyy>", AppInstance.UnpackDateEx(MsgRspDat.PyrDef.CorPrpMod.PrpStp, "ddMMMyyyy", " HH:mm:ss"))
                        If TakeOver Then
                            st &= "Press 'OK' to continue with further preparation." & vbCrLf & "Press 'Cancel' to exit from preparation."
                            Rsp = ModalMessageBox(st, MessageBoxButtons.OKCancel, MessageBoxDefaultButton.Button2, MessageBoxIcon.Exclamation, "Prepare Payout")
                            TakeOver = (Rsp = DialogResult.OK)
                        Else
                            ModalMessageBox(st, MessageBoxButtons.OK, , MessageBoxIcon.Exclamation, "Prepare Payout")
                        End If
                    Case "C20"
                        st = "Cannot prepare employes for an already submitted payroll (ICS.88.C20)\n" & _
                            "Payroll sequence <nnnn> was already submitted.\n" & _
                        "Status <code> indicating <desc>\n" & _
                        "Last preparation  activity on <ddMmmyy>\n" & _
                        "Preparation made by user <uuuu> of <cccc>"

                        st = st.Replace("\n", vbCrLf)
                        st = st.Replace("<nnnn>", MsgRspDat.PyrDef.CorPayDef.PyrSerNum.Trim)
                        st = st.Replace("<code>", MsgRspDat.PyrDef.CorPrpMod.PyrPrpSta)
                        st = st.Replace("<desc>", frmCorPayroll_Preparation.DecodePayoutStatus(MsgRspDat.PyrDef.CorPrpMod.PyrPrpSta, False))
                        st = st.Replace("<uuuu>", MsgRspDat.PyrDef.CorPrpMod.PrpUsrKey.Trim)
                        st = st.Replace("<cccc>", MsgRspDat.PyrDef.CorPrpMod.PrpCorKey.Trim)
                        st = st.Replace("<ddMmmyy>", AppInstance.UnpackDateEx(MsgRspDat.PyrDef.CorPrpMod.PrpStp, "ddMMMyyyy", " HH:mm:ss"))
                        ModalMessageBox(st, MessageBoxButtons.OK, , MessageBoxIcon.Exclamation, "Prepare Payout")
                    Case "C21"
                        st = "Cannot prepare employes for an already executed payroll (ICS.88.C21)\n" & _
                            "Payroll sequence <nnnn> was already executed."

                        st = st.Replace("\n", vbCrLf)
                        st = st.Replace("<nnnn>", MsgRspDat.PyrDef.CorPayDef.PyrSerNum.Trim)
                        ModalMessageBox(st, MessageBoxButtons.OK, , MessageBoxIcon.Exclamation, "Prepare Payout")
                    Case Else
                        HandleError(&H80002003, "Message " & MsgCde & ":Rejected, Result Code:" & ResCde & ",  Action Code:" & ActCde)
                        AppInstance.ShowHostError(MsgCde, MsgId, ResCde, ActCde)
                End Select
            End If 'ActCde = "88"
        Else
            HandleError(&H80002003, "Message " & MsgCde & ":Rejected, Result Code:" & ResCde & ",  Action Code:" & ActCde)
            AppInstance.ShowHostError(MsgCde, MsgId, ResCde, ActCde)
        End If
        Return MsgRes

    End Function

    '480220
    Public Function SendMessage_CancelPreparePayrol(ByVal p_Struct As CancelPreparePayrol_Req_Struct) As String
        Dim st As String = String.Empty
        st &= p_Struct.PackTable()
        Return AppInstance.SendMessageVisuallyEx("480220", st, "CUS", p_Struct.CusNum, "", "")
    End Function
    Public Function GetMessage_CancelPreparePayrol(ByVal MsgId As String, ByRef MsgRspDat As CancelPreparePayrol_Rsp_Struct, ByRef TakeOver As Boolean) As Boolean
        Dim MsgCde As String = "480220"
        Dim resp As String = String.Empty
        Dim MsgRes As Boolean = GetMessage_Common(MsgCde, "", MsgId, &H80099999, resp, True, True)
        If resp Is Nothing OrElse resp.Trim = "" Then Return False
        Dim ResCde As String = AppInstance.SafeSubString(resp, 83, 3)
        Dim ActCde As String = AppInstance.SafeSubString(resp, 86, 2)
        If (MsgRes = True) Or ActCde = "88" Then
            Try
                AppInstance.strip(resp, 256)
                MsgRspDat.ReadTable(resp)
            Catch ex As Exception
                HandleError(&H80099999, "Error:", "Error", ex)
                Return False
            End Try

            If ActCde = "88" Then
                TakeOver = MsgRspDat.RspOvrTok.Trim <> "" 'True if RspOvrTok is not spaces, otherwise, take over is not allowed
                Dim st As String
                Dim Rsp As DialogResult
                Select Case ResCde
                    Case "C15"
                        st = "Preparation has already begun for sequence <nnnn>  (ICS.88.C15)\n" & _
                            "The prepartion was not ended in an orderly manner.\n" & _
                            "Status <code> indicating <desc>\n" & _
                            "Last preparation  activity on <ddMmmyy>\n" & _
                            "Preparation made by user <uuuu> of <cccc>\n\n"

                        st = st.Replace("\n", vbCrLf)
                        st = st.Replace("<nnnn>", MsgRspDat.PyrDef.CorPayDef.PyrSerNum.Trim)
                        st = st.Replace("<code>", MsgRspDat.PyrDef.CorPrpMod.PyrPrpSta)
                        st = st.Replace("<desc>", frmCorPayroll_Preparation.DecodePayoutStatus(MsgRspDat.PyrDef.CorPrpMod.PyrPrpSta, False))
                        st = st.Replace("<uuuu>", MsgRspDat.PyrDef.CorPrpMod.PrpUsrKey.Trim)
                        st = st.Replace("<cccc>", MsgRspDat.PyrDef.CorPrpMod.PrpCorKey.Trim)
                        st = st.Replace("<ddMmmyy>", AppInstance.UnpackDateEx(MsgRspDat.PyrDef.CorPrpMod.PrpStp, "ddMMMyyyy", " HH:mm:ss"))
                        If TakeOver Then
                            st &= "Press 'OK' to take over and end the preparation." & vbCrLf & "Press 'Cancel' to exit."
                            Rsp = ModalMessageBox(st, MessageBoxButtons.OKCancel, MessageBoxDefaultButton.Button2, MessageBoxIcon.Exclamation, "Cancel Payout")
                            TakeOver = (Rsp = DialogResult.OK)
                        Else
                            ModalMessageBox(st, MessageBoxButtons.OK, , MessageBoxIcon.Exclamation, "Cancel Payout")
                        End If
                    Case "C16"
                        st = "You have already begun preparations for sequence <nnnn> (ICS.88.C16)\n" & _
                            "Your  prepartion was not ended in an orderly manner.\n" & _
                            "Status <code> indicating <desc>\n" & _
                            "Last preparation  activity on <ddMmmyy>\n\n"

                        st = st.Replace("\n", vbCrLf)
                        st = st.Replace("<nnnn>", MsgRspDat.PyrDef.CorPayDef.PyrSerNum.Trim)
                        st = st.Replace("<code>", MsgRspDat.PyrDef.CorPrpMod.PyrPrpSta)
                        st = st.Replace("<desc>", frmCorPayroll_Preparation.DecodePayoutStatus(MsgRspDat.PyrDef.CorPrpMod.PyrPrpSta, False))
                        st = st.Replace("<ddMmmyy>", AppInstance.UnpackDateEx(MsgRspDat.PyrDef.CorPrpMod.PrpStp, "ddMMMyyyy", " HH:mm:ss"))
                        If TakeOver Then
                            st &= "Press 'OK' to end the current preparation" & vbCrLf & "Press 'Cancel' to exit."
                            Rsp = ModalMessageBox(st, MessageBoxButtons.OKCancel, MessageBoxDefaultButton.Button2, MessageBoxIcon.Exclamation, "Cancel Payout")
                            TakeOver = (Rsp = DialogResult.OK)
                        Else
                            ModalMessageBox(st, MessageBoxButtons.OK, , MessageBoxIcon.Exclamation, "Cancel Payout")
                        End If
                    Case "C18"
                        st = "Cannot cancel an already submitted payroll (ICS.88.C18)\n" & _
                            "Payroll sequence <nnnn> was already submitted.\n"

                        st = st.Replace("\n", vbCrLf)
                        st = st.Replace("<nnnn>", MsgRspDat.PyrDef.CorPayDef.PyrSerNum.Trim)
                        ModalMessageBox(st, MessageBoxButtons.OK, , MessageBoxIcon.Exclamation, "Cancel Payout")
                    Case "C19"
                        st = "Cannot cancel an already executed payroll (ICS.88.C19)\n" & _
                            "Payroll sequence <nnnn> was already executed."

                        st = st.Replace("\n", vbCrLf)
                        st = st.Replace("<nnnn>", MsgRspDat.PyrDef.CorPayDef.PyrSerNum.Trim)
                        ModalMessageBox(st, MessageBoxButtons.OK, , MessageBoxIcon.Exclamation, "Cancel Payout")
                    Case Else
                        HandleError(&H80002003, "Message " & MsgCde & ":Rejected, Result Code:" & ResCde & ",  Action Code:" & ActCde)
                        AppInstance.ShowHostError(MsgCde, MsgId, ResCde, ActCde)
                End Select
            End If 'ActCde = "88"
        Else
            HandleError(&H80002003, "Message " & MsgCde & ":Rejected, Result Code:" & ResCde & ",  Action Code:" & ActCde)
            AppInstance.ShowHostError(MsgCde, MsgId, ResCde, ActCde)
        End If
        Return MsgRes
    End Function

    '480230
    Public Function SendMessage_BeginPrepareEmployees(ByVal p_Struct As BeginPrepareEmployees_Req_Struct) As String
        Dim st As String = String.Empty
        st &= p_Struct.PackTable()
        Return AppInstance.SendMessageVisuallyEx("480230", st, "CUS", p_Struct.DynCntDat.CusNum, "", "")
    End Function
    Public Function GetMessage_BeginPrepareEmployee(ByVal MsgId As String, ByRef MsgRspDat As BeginPrepareEmployees_Rsp_Struct, ByRef TakeOver As Boolean) As Boolean
        Dim MsgCde As String = "480230"
        Dim resp As String = String.Empty
        Dim MsgRes As Boolean = GetMessage_Common(MsgCde, "", MsgId, &H80099999, resp, True, True)
        If resp Is Nothing OrElse resp.Trim = "" Then Return False
        Dim ResCde As String = AppInstance.SafeSubString(resp, 83, 3)
        Dim ActCde As String = AppInstance.SafeSubString(resp, 86, 2)
        If (MsgRes = True) Or ActCde = "88" Then
            Try
                AppInstance.strip(resp, 256)
                MsgRspDat.ReadTable(resp)
            Catch ex As Exception
                HandleError(&H80099999, "Error:", "Error", ex)
                Return False
            End Try

            If ActCde = "88" Then
                TakeOver = MsgRspDat.RspOvrTok.Trim <> "" 'True if RspOvrTok is not spaces, otherwise, take over is not allowed
                Dim st As String
                Dim Rsp As DialogResult
                Select Case ResCde
                    Case "C15"
                        st = "Preparation has already begun for sequence <nnnn>  (ICS.88.C15)\n" & _
                            "The prepartion was not ended in an orderly manner.\n" & _
                            "Status <code> indicating <desc>\n" & _
                            "Last preparation  activity on <ddMmmyy>\n" & _
                            "Preparation made by user <uuuu> of <cccc>\n\n"

                        st = st.Replace("\n", vbCrLf)
                        st = st.Replace("<nnnn>", MsgRspDat.PyrDef.CorPayDef.PyrSerNum.Trim)
                        st = st.Replace("<code>", MsgRspDat.PyrDef.CorPrpMod.PyrPrpSta)
                        st = st.Replace("<desc>", frmCorPayroll_Preparation.DecodePayoutStatus(MsgRspDat.PyrDef.CorPrpMod.PyrPrpSta, False))
                        st = st.Replace("<uuuu>", MsgRspDat.PyrDef.CorPrpMod.PrpUsrKey.Trim)
                        st = st.Replace("<cccc>", MsgRspDat.PyrDef.CorPrpMod.PrpCorKey.Trim)
                        st = st.Replace("<ddMmmyy>", AppInstance.UnpackDateEx(MsgRspDat.PyrDef.CorPrpMod.PrpStp, "ddMMMyyyy", " HH:mm:ss"))
                        If TakeOver Then
                            st &= "Press 'OK' to take over further preparation." & vbCrLf & "Press 'Cancel' to exit from preparation."
                            Rsp = ModalMessageBox(st, MessageBoxButtons.OKCancel, MessageBoxDefaultButton.Button2, MessageBoxIcon.Exclamation, "Prepare Employees")
                            TakeOver = (Rsp = DialogResult.OK)
                        Else
                            ModalMessageBox(st, MessageBoxButtons.OK, , MessageBoxIcon.Exclamation, "Prepare Employees")
                        End If
                    Case "C16"
                        st = "You have already begun preparations for sequence <nnnn> (ICS.88.C16) \n" & _
                            "Your  prepartion was not ended in an orderly manner.\n" & _
                            "Status <code> indicating <desc>\n" & _
                            "Last preparation  activity on <ddMmmyy>\n\n"

                        st = st.Replace("\n", vbCrLf)
                        st = st.Replace("<nnnn>", MsgRspDat.PyrDef.CorPayDef.PyrSerNum.Trim)
                        st = st.Replace("<code>", MsgRspDat.PyrDef.CorPrpMod.PyrPrpSta)
                        st = st.Replace("<desc>", frmCorPayroll_Preparation.DecodePayoutStatus(MsgRspDat.PyrDef.CorPrpMod.PyrPrpSta, False))
                        st = st.Replace("<ddMmmyy>", AppInstance.UnpackDateEx(MsgRspDat.PyrDef.CorPrpMod.PrpStp, "ddMMMyyyy", " HH:mm:ss"))
                        If TakeOver Then
                            st &= "Press 'OK' to continue your preparation" & vbCrLf & "Press 'Cancel' to exit from preparation."
                            Rsp = ModalMessageBox(st, MessageBoxButtons.OKCancel, MessageBoxDefaultButton.Button2, MessageBoxIcon.Exclamation, "Prepare Employees")
                            TakeOver = (Rsp = DialogResult.OK)
                        Else
                            ModalMessageBox(st, MessageBoxButtons.OK, , MessageBoxIcon.Exclamation, "Prepare Employees")
                        End If
                    Case "C20"
                        st = "Cannot prepare employes for an already submitted payroll (ICS.88.C20)\n" & _
                            "Payroll sequence <nnnn> was already submitted.\n" & _
                        "Status <code> indicating <desc>\n" & _
                        "Last preparation  activity on <ddMmmyy>\n" & _
                        "Preparation made by user <uuuu> of <cccc>"

                        st = st.Replace("\n", vbCrLf)
                        st = st.Replace("<nnnn>", MsgRspDat.PyrDef.CorPayDef.PyrSerNum.Trim)
                        st = st.Replace("<code>", MsgRspDat.PyrDef.CorPrpMod.PyrPrpSta)
                        st = st.Replace("<desc>", frmCorPayroll_Preparation.DecodePayoutStatus(MsgRspDat.PyrDef.CorPrpMod.PyrPrpSta, False))
                        st = st.Replace("<uuuu>", MsgRspDat.PyrDef.CorPrpMod.PrpUsrKey.Trim)
                        st = st.Replace("<cccc>", MsgRspDat.PyrDef.CorPrpMod.PrpCorKey.Trim)
                        st = st.Replace("<ddMmmyy>", AppInstance.UnpackDateEx(MsgRspDat.PyrDef.CorPrpMod.PrpStp, "ddMMMyyyy", " HH:mm:ss"))
                        ModalMessageBox(st, MessageBoxButtons.OK, , MessageBoxIcon.Exclamation, "Prepare Employees")
                    Case "C21"
                        st = "Cannot prepare employes for an already executed payroll (ICS.88.C21)\n" & _
                            "Payroll sequence <nnnn> was already executed."

                        st = st.Replace("\n", vbCrLf)
                        st = st.Replace("<nnnn>", MsgRspDat.PyrDef.CorPayDef.PyrSerNum.Trim)
                        ModalMessageBox(st, MessageBoxButtons.OK, , MessageBoxIcon.Exclamation, "Prepare Employees")
                    Case Else
                        HandleError(&H80002003, "Message " & MsgCde & ":Rejected, Result Code:" & ResCde & ",  Action Code:" & ActCde)
                        AppInstance.ShowHostError(MsgCde, MsgId, ResCde, ActCde)
                End Select
            End If 'ActCde = "88"
        Else
            HandleError(&H80002003, "Message " & MsgCde & ":Rejected, Result Code:" & ResCde & ",  Action Code:" & ActCde)
            AppInstance.ShowHostError(MsgCde, MsgId, ResCde, ActCde)
        End If
        Return MsgRes
    End Function

    '480240
    Public Function SendMessage_SavePrepareEmployees(ByVal p_Struct As SavePrepareEmployees_Req_Struct) As String
        Dim st As String = String.Empty
        st &= p_Struct.PackTable()
        Return AppInstance.SendMessageVisuallyEx("480240", st, "CUS", p_Struct.PyrDef.CorPayDef.CusNum, "", "")
    End Function
    Public Function GetMessage_SavePrepareEmployee(ByVal MsgId As String, ByRef MsgRspDat As SavePrepareEmployees_Rsp_Struct) As Boolean
        Dim MsgCde As String = "480240"
        Dim resp As String = String.Empty
        Dim MsgRes As Boolean = GetMessage_Common(MsgCde, "", MsgId, &H80099999, resp, True, True)
        If resp Is Nothing OrElse resp.Trim = "" Then Return False
        Dim ResCde As String = AppInstance.SafeSubString(resp, 83, 3)
        Dim ActCde As String = AppInstance.SafeSubString(resp, 86, 2)
        If (MsgRes = True) Or ActCde = "88" Then
            Try
                AppInstance.strip(resp, 256)
                MsgRspDat.ReadTable(resp)
            Catch ex As Exception
                HandleError(&H80099999, "Error:", "Error", ex)
                Return False
            End Try

            If ActCde = "88" Then
                Dim st As String
                Dim Rsp As DialogResult
                Select Case ResCde
                    Case "C22"
                        st = "Payroll status prevents your saving of employee data (ICS.88.C22)\n" & _
                            "Payroll sequence <nnnn>\n" & _
                            "Status <code> indicating <desc>\n" & _
                            "Last preparation  activity on <ddMmmyy>\n" & _
                            "Preparation made by user <uuuu> of <cccc>\n"

                        st = st.Replace("\n", vbCrLf)
                        st = st.Replace("<nnnn>", MsgRspDat.PyrDef.CorPayDef.PyrSerNum.Trim)
                        st = st.Replace("<code>", MsgRspDat.PyrDef.CorPrpMod.PyrPrpSta)
                        st = st.Replace("<desc>", frmCorPayroll_Preparation.DecodePayoutStatus(MsgRspDat.PyrDef.CorPrpMod.PyrPrpSta, False))
                        st = st.Replace("<uuuu>", MsgRspDat.PyrDef.CorPrpMod.PrpUsrKey.Trim)
                        st = st.Replace("<cccc>", MsgRspDat.PyrDef.CorPrpMod.PrpCorKey.Trim)
                        st = st.Replace("<ddMmmyy>", AppInstance.UnpackDateEx(MsgRspDat.PyrDef.CorPrpMod.PrpStp, "ddMMMyyyy", " HH:mm:ss"))
                        ModalMessageBox(st, MessageBoxButtons.OK, , MessageBoxIcon.Exclamation, "Cancel Payout")
                    Case "C23"
                        st = "Another user is preparing the payroll (ICS.88.C23)\n" & _
                            "Payroll sequence <nnnn>\n" & _
                            "Status <code> indicating <desc>\n" & _
                            "Last preparation  activity on <ddMmmyy>\n" & _
                            "Preparation made by user <uuuu> of <cccc>\n"

                        st = st.Replace("\n", vbCrLf)
                        st = st.Replace("<nnnn>", MsgRspDat.PyrDef.CorPayDef.PyrSerNum.Trim)
                        st = st.Replace("<code>", MsgRspDat.PyrDef.CorPrpMod.PyrPrpSta)
                        st = st.Replace("<desc>", frmCorPayroll_Preparation.DecodePayoutStatus(MsgRspDat.PyrDef.CorPrpMod.PyrPrpSta, False))
                        st = st.Replace("<uuuu>", MsgRspDat.PyrDef.CorPrpMod.PrpUsrKey.Trim)
                        st = st.Replace("<cccc>", MsgRspDat.PyrDef.CorPrpMod.PrpCorKey.Trim)
                        st = st.Replace("<ddMmmyy>", AppInstance.UnpackDateEx(MsgRspDat.PyrDef.CorPrpMod.PrpStp, "ddMMMyyyy", " HH:mm:ss"))
                        ModalMessageBox(st, MessageBoxButtons.OK, , MessageBoxIcon.Exclamation, "Cancel Payout")
                    Case Else
                        HandleError(&H80002003, "Message " & MsgCde & ":Rejected, Result Code:" & ResCde & ",  Action Code:" & ActCde)
                        AppInstance.ShowHostError(MsgCde, MsgId, ResCde, ActCde)
                End Select
            End If 'ActCde = "88"
        Else
            HandleError(&H80002003, "Message " & MsgCde & ":Rejected, Result Code:" & ResCde & ",  Action Code:" & ActCde)
            AppInstance.ShowHostError(MsgCde, MsgId, ResCde, ActCde)
        End If
        Return MsgRes
    End Function

    '480250
    Public Function SendMessage_EndPrepareEmployees(ByVal p_Struct As EndPrepareEmployees_Struct) As String
        Dim st As String = String.Empty
        st &= p_Struct.PackTable()
        Return AppInstance.SendMessageVisuallyEx("480250", st, "CUS", p_Struct.PyrDef.CorPayDef.CusNum, "", "")
    End Function
    Public Function GetMessage_EndPrepareEmployee(ByVal MsgId As String, ByRef MsgRspDat As EndPrepareEmployees_Struct) As Boolean
        Dim resp As String = String.Empty
        If Not (GetMessage_Common("480250", "", MsgId, &H80099999, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            MsgRspDat.ReadTable(resp)
        Catch ex As Exception
            HandleError(&H80099999, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

#End Region

End Module

Public Module CardIssuance

    Public Structure EnumerateCardsForIssuance_Rsp_Struct '0 Msg #550221
        Dim MsgReqDat As EnumerateCardsForIssuance_Struct '64				Desc:Echoed request data
        Dim CrdIssSys As String '3x				Desc: Responding system, constant “ON2”
        Dim Rsv053 As String '53x				Desc: Reserved, space filled
        Dim FndCnt As String '4n				Desc: Number of records found by ON/2
        Dim RecCnt As String '4n				Desc: Number of record returned
        Dim RecItm() As EnumerateCardsForIssuance_RecItm_Struct '576 * FndCnt				Desc:Zero, one or several record items

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= MsgReqDat.PackTable()
            st &= Pack.PackNString(CrdIssSys, 3)
            st &= Pack.PackNString(Rsv053, 53)
            st &= Pack.PackNString(FndCnt, 4)
            st &= Pack.PackNString(RecCnt, 4)
            For ind As Integer = 0 To CInt(RecCnt) - 1 : st &= RecItm(ind).PackTable() : Next '300
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            MsgReqDat.ReadTable(DataStream)
            CrdIssSys = Pack.Strip(DataStream, 3)
            Rsv053 = Pack.Strip(DataStream, 53)
            FndCnt = Pack.Strip(DataStream, 4)
            RecCnt = Pack.Strip(DataStream, 4)
            If RecCnt.Trim = "" Then RecCnt = "0000"
            If CInt(RecCnt) > 0 Then
                ReDim RecItm(CInt(RecCnt) - 1)
                For ind As Integer = 0 To CInt(RecCnt) - 1 : RecItm(ind).ReadTable(DataStream) : Next
            End If
        End Sub


        Public Function GetMessage_EnumerateCardsForIssuance_Rsp(ByVal MsgId As String, ByRef MsgRspDat As EnumerateCardsForIssuance_Rsp_Struct) As Boolean
            Dim resp As String = String.Empty
            'AP0761
            If Not (GetMessage_Common("550220", "", MsgId, &H81000636, resp)) Then Return False
            Try
                AppInstance.strip(resp, 256)
                'resp = "YYYY     01010101553691001                                       000101015536910014567800200201222002012220020122200201222002012220020122S010155369100200A101Holder Name2345678901234567890AddressAAAA22345678901234567890AddressBBBB345678901234567890City01234567890123456789Saudia013456789Teli12345620020122203  Teli1234560123456789ICCEmbossingName0123456789123Y012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"
                'resp = "YYYY     01010101553691001                                       000201015536910014567800200201222002012220020122200201222002012220020122S010155369100200A101Holder Name2345678901234567890AddressAAAA22345678901234567890AddressBBBB345678901234567890City01234567890123456789Saudia013456789Teli12345620020122203  Teli1234560123456789ICCEmbossingName0123456789123Y012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"
                'resp &= "01015536910014567501200204252002042520020425200204252002042520020425P010155369100301E102Holder Name    678901234567890Address    23d45678901234567890AddressBBBB345678901234567890City    4567890123456789Saudia    56789Teli    5620020425301  Teli    560123456789M24EmbossingName    456789123N012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"
                'Debug.WriteLine(resp.Length.ToString)
                MsgRspDat.ReadTable(resp)

            Catch ex As Exception
                HandleError(&H81000636, "Error:", "Error", ex)
                Return False
            End Try
            Return True

        End Function
    End Structure

    Public Structure EnumerateCardsForIssuance_Struct '320 Msg #550220
        Dim CrdIssSys As String '3x				Desc: Card issuance system, constant “ON2”
        Dim IncCrdIss As String '1x				Desc: Include already issued (sent for embossing) cards when "Y"
        Dim IncCrdCan As String '1x				Desc: Include cancelled issuances when "Y"
        Dim IncAutIss As String '1x				Desc: Include auto-reissuance when "Y"
        Dim IncCamIss As String '1x				Desc: Include cards requested directly through CAMS when "Y"
        Dim SelTekCde As String '3x				Desc: Filter by technology code or spaces for all
        Dim SelCrdCls As String '2x				Desc: Fileter by product code or spaces for all
        Dim On2BrnCde As String '4x				Desc: Include only cards for pick-up at this branch or spaces for all
        Dim AccNum As EnumerateCardsForIssuance_AccNum_Struct '13				Desc:Branch, Customer and Suffix filters (see below)
        Dim BegDat As String '8x				Desc: Exclude requests before this date YYYYMMDD (today when spaces)
        Dim EndDat As String '8x				Desc: Exclude requests after this date YYYYMMDD (today when spaces)
        Dim IncWaiIss As String '1x	            Include cards awaiting personalisation when “Y”
        Dim IncIceIss As String '1x	            Include cards requested directly through ICE when "Y"
        Dim Rsv1 As String '17x				    Desc: Reserved for future use

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(CrdIssSys, 3)
            st &= Pack.PackString(IncCrdIss, 1)
            st &= Pack.PackString(IncCrdCan, 1)
            st &= Pack.PackString(IncAutIss, 1)
            st &= Pack.PackString(IncCamIss, 1)
            st &= Pack.PackString(SelTekCde, 3)
            st &= Pack.PackString(SelCrdCls, 2) 'PackNString
            st &= Pack.PackString(On2BrnCde, 4) 'PackNString
            st &= AccNum.PackTable()
            st &= Pack.PackDate(BegDat, True)
            st &= Pack.PackDate(EndDat, True)
            st &= Pack.PackString(IncWaiIss, 1)
            st &= Pack.PackString(IncIceIss, 1)
            st &= Pack.PackString(Rsv1, 17)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            CrdIssSys = Pack.Strip(DataStream, 3)
            IncCrdIss = Pack.Strip(DataStream, 1)
            IncCrdCan = Pack.Strip(DataStream, 1)
            IncAutIss = Pack.Strip(DataStream, 1)
            IncCamIss = Pack.Strip(DataStream, 1)
            SelTekCde = Pack.Strip(DataStream, 3)
            SelCrdCls = Pack.Strip(DataStream, 2)
            On2BrnCde = Pack.Strip(DataStream, 4)
            AccNum.ReadTable(DataStream)
            BegDat = Pack.Strip(DataStream, 8)
            EndDat = Pack.Strip(DataStream, 8)
            IncWaiIss = Pack.Strip(DataStream, 1)
            IncIceIss = Pack.Strip(DataStream, 1)
            Rsv1 = Pack.Strip(DataStream, 17)
        End Sub

        'AP0761: Msg# 550220
        Public Function SendMessage_EnumerateCardsForIssuance(ByVal p_Struct As EnumerateCardsForIssuance_Struct) As String

            Dim st As String = String.Empty

            st &= p_Struct.PackTable()
            'AP0761
            Return AppInstance.SendMessageVisuallyEx("550220", st, "GEN", "", "", "")
        End Function

    End Structure

    Public Structure EnumerateCardsForIssuance_AccNum_Struct '13 Msg #5502201
        Dim AccBrnNum As String '4x				Desc: Include account branch number or spaces for all
        Dim AccCusNum As String '6x				Desc: Include only this customer or spaces for all
        Dim AccSfxNum As String '3x				Desc: Include only this account suffix or spaces for all

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(AccBrnNum, 4)
            st &= Pack.PackString(AccCusNum, 6)
            st &= Pack.PackString(AccSfxNum, 3)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            AccBrnNum = Pack.Strip(DataStream, 4)
            AccCusNum = Pack.Strip(DataStream, 6)
            AccSfxNum = Pack.Strip(DataStream, 3)
        End Sub

        Public Sub Clear()
            AccBrnNum = String.Empty
            AccCusNum = String.Empty
            AccSfxNum = String.Empty
        End Sub
    End Structure

    Public Structure EnumerateCardsForIssuance_RecItm_Struct '300 Msg #5502211
        Dim CrdIssRsp As CrdIssRsp_Struct '576x				Desc:·	Response from the issuing system

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= CrdIssRsp.PackTable()
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            CrdIssRsp.ReadTable(DataStream)
        End Sub

    End Structure

    '''Knowen Calling Messages: 550230
    Public Structure CrdIssRsp_Struct '576x, App #AP0761, Msg #550230
        Dim On2CamExt As On2CamExt_Struct '400				Desc:
        Dim Rsv40 As String '176x				Desc: Reserved, space filled

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= On2CamExt.PackTable() '400x
            st &= Pack.PackString(Rsv40, 176)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            On2CamExt.ReadTable(DataStream) '400x
            Rsv40 = Pack.Strip(DataStream, 176)
        End Sub

        Public Sub Clear()
            On2CamExt.Clear()
            Rsv40 = String.Empty
        End Sub

    End Structure

    Public Structure On2CamStd_Struct '300 Msg #5502212
        Dim On2CamDat As On2CamDat_Struct '240				Desc:Standard CAMS data structure
        Dim On2ExtTel As String '20x				Desc: Extended ON/2 telephone number
        Dim CrdTekCde As String '3x				Desc: Card technology code:M=magnetic stripe C=chip card
        Dim CrdEmbNam As String '26x				Desc: ON/2 embossed name (as embossed)
        Dim CrdSelEmb As String '1x				Desc: Flag (Y/N) indicating card has been selected for embossing
        Dim On2CusNum As String '6x				Desc: Customer number
        Dim CrdPrdCde As String '4x				Desc: •	Card Product Code (filled by AS/400)

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= On2CamDat.PackTable()
            st &= Pack.PackString(On2ExtTel, 20)
            st &= Pack.PackString(CrdTekCde, 3)
            st &= Pack.PackString(CrdEmbNam, 26)
            st &= Pack.PackString(CrdSelEmb, 1)
            st &= Pack.PackString(On2CusNum, 6)
            st &= Pack.PackString(CrdPrdCde, 4)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            On2CamDat.ReadTable(DataStream)
            On2ExtTel = Pack.Strip(DataStream, 20)
            CrdTekCde = Pack.Strip(DataStream, 3)
            CrdEmbNam = Pack.Strip(DataStream, 26)
            CrdSelEmb = Pack.Strip(DataStream, 1)
            On2CusNum = Pack.Strip(DataStream, 6)
            CrdPrdCde = Pack.Strip(DataStream, 4)
        End Sub

        Public Sub Clear()
            On2CamDat.Clear()
            On2ExtTel = String.Empty
            CrdTekCde = String.Empty
            CrdEmbNam = String.Empty
            CrdSelEmb = String.Empty
            On2CusNum = String.Empty
            CrdPrdCde = String.Empty
        End Sub

    End Structure

    Public Structure On2CamExt_Struct '400 Msg #5502212, AP0774
        Dim On2CamStd As On2CamStd_Struct '300				Desc:Standard CAMS data structure
        Dim CrdLfeCde As String '2x	            Desc: Card life state or spaces if not requested.
        Dim On2Rsv90 As String '98x				Desc: Reserved, space filled

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= On2CamStd.PackTable()
            st &= Pack.PackString(CrdLfeCde, 2)
            st &= Pack.PackString(On2Rsv90, 98)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            On2CamStd.ReadTable(DataStream)
            CrdLfeCde = Pack.Strip(DataStream, 2)
            On2Rsv90 = Pack.Strip(DataStream, 98)
        End Sub

        Public Sub Clear()
            On2CamStd.Clear()
            On2Rsv90 = String.Empty
        End Sub
    End Structure

    Public Structure On2CamDat_Struct '240 Msg #5502213 AP0774
        Dim On2CrdNum As String '18x				Desc: Card number.
        Dim On2CrdSta As String '2x				Desc: Card status code
        Dim On2CrdIssOrg As String '8n				Desc: Original issuance (original data entry) date (YYYYMMDD)
        Dim On2CrdIssCur As String '8n				Desc: Current issuance (most recent embossing) date (YYYYMMDD)
        Dim On2CrdLstUse As String '8n				Desc: Date card was last used (YYYYMMDD)
        Dim On2CrdClsDte As String '8n				Desc: Date card was closed (YYYYMMDD)
        Dim On2CrdUpdDte As String '8n				Desc: Date card was last maintained (YYYYMMDD)
        Dim On2CrdExp As String '8n				Desc: Card Expiry date (YYYYMMDD)
        Dim On2CrdFlg As String '1x				Desc: Card type flagP = Primary, S = Secondary, A = AlternateOther values indicate unspecified type
        Dim On2CrdAcc As String '13x				Desc: Related account number (within ON/2)
        Dim On2AccSta As String '2x				Desc: Card account status code
        Dim On2LngCde As String '1x				Desc: ON/2 Card language code
        Dim On2BrnCde As String '3x				Desc: Card branch code (where cards are picked up)
        Dim On2CamNam As String '30x				Desc: CAMS cardholder name (source of embossed name)
        Dim On2CamAdd() As String '2 * 30x				Desc: CAMS cardholder address lines 1 and 2
        Dim On2CamCty As String '24x				Desc: CAMS cardholder city
        Dim On2CamLnd As String '15x				Desc: CAMS cardholder country
        Dim On2CamTel As String '10x				Desc: CAMS cardholder telephone number
        Dim On2PinDte As String '8x				Desc: Date the PIN was printed (YYYYMMDD)
        Dim On2PinErr As String '1n				Desc: Number of consecutive bad PINs
        Dim On2CrdCls As String '2x				Desc: Card class: 01=Saudi Express, 03=Alasalah
        Dim On2Rsv2 As String '2x				Desc: Reserved (space filled)

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(On2CrdNum, 18)
            st &= Pack.PackString(On2CrdSta, 2)
            st &= Pack.PackDate(On2CrdIssOrg)
            st &= Pack.PackDate(On2CrdIssCur)
            st &= Pack.PackDate(On2CrdLstUse)
            st &= Pack.PackDate(On2CrdClsDte)
            st &= Pack.PackDate(On2CrdUpdDte)
            st &= Pack.PackDate(On2CrdExp)
            st &= Pack.PackString(On2CrdFlg, 1)
            st &= Pack.PackString(On2CrdAcc, 13)
            st &= Pack.PackString(On2AccSta, 2)
            st &= Pack.PackString(On2LngCde, 1)
            st &= Pack.PackString(On2BrnCde, 3)
            st &= Pack.PackString(On2CamNam, 30)
            For ind As Integer = 0 To 1 : st &= Pack.PackString(On2CamAdd(ind), 30) : Next
            st &= Pack.PackString(On2CamCty, 24)
            st &= Pack.PackString(On2CamLnd, 15)
            st &= Pack.PackString(On2CamTel, 10)
            st &= Pack.PackDate(On2PinDte)
            st &= Pack.PackNString(On2PinErr, 1)
            st &= Pack.PackString(On2CrdCls, 2)
            st &= Pack.PackString(On2Rsv2, 2)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            On2CrdNum = Pack.Strip(DataStream, 18)
            On2CrdSta = Pack.Strip(DataStream, 2)
            On2CrdIssOrg = Pack.Strip(DataStream, 8)
            On2CrdIssCur = Pack.Strip(DataStream, 8)
            On2CrdLstUse = Pack.Strip(DataStream, 8)
            On2CrdClsDte = Pack.Strip(DataStream, 8)
            On2CrdUpdDte = Pack.Strip(DataStream, 8)
            On2CrdExp = Pack.Strip(DataStream, 8)
            On2CrdFlg = Pack.Strip(DataStream, 1)
            On2CrdAcc = Pack.Strip(DataStream, 13)
            On2AccSta = Pack.Strip(DataStream, 2)
            On2LngCde = Pack.Strip(DataStream, 1)
            On2BrnCde = Pack.Strip(DataStream, 3)
            On2CamNam = Pack.Strip(DataStream, 30)
            ReDim On2CamAdd(1)
            For ind As Integer = 0 To 1 : On2CamAdd(ind) = Pack.Strip(DataStream, 30) : Next
            On2CamCty = Pack.Strip(DataStream, 24)
            On2CamLnd = Pack.Strip(DataStream, 15)
            On2CamTel = Pack.Strip(DataStream, 10)
            On2PinDte = Pack.Strip(DataStream, 8)
            On2PinErr = Pack.Strip(DataStream, 1)
            On2CrdCls = Pack.Strip(DataStream, 2)
            On2Rsv2 = Pack.Strip(DataStream, 2)
        End Sub

        Public Sub Clear()
            On2CrdNum = String.Empty
            On2CrdSta = String.Empty
            On2CrdIssOrg = String.Empty
            On2CrdIssCur = String.Empty
            On2CrdLstUse = String.Empty
            On2CrdClsDte = String.Empty
            On2CrdUpdDte = String.Empty
            On2CrdExp = String.Empty
            On2CrdFlg = String.Empty
            On2CrdAcc = String.Empty
            On2AccSta = String.Empty
            On2LngCde = String.Empty
            On2BrnCde = String.Empty
            On2CamNam = String.Empty
            On2CamAdd = Nothing
            On2CamCty = String.Empty
            On2CamLnd = String.Empty
            On2CamTel = String.Empty
            On2PinDte = String.Empty
            On2PinErr = String.Empty
            On2CrdCls = String.Empty
            On2Rsv2 = String.Empty
        End Sub

    End Structure

    '''Knowen Calling Messages: 550231
    Public Structure IssueNewCard_Rsp_Struct '768x, App #, Msg #550231
        Dim MsgReqDat As IssueNewCard_Struct '128				Desc:
        Dim CrdIssSys As String '3x				Desc: Card issuing platform that is responding
        Dim Rsv10 As String '61x				Desc: Reserved, space filled
        Dim CrdIssRsp As CrdIssRsp_Struct '576				Desc:ON2 card issuing platform response

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= MsgReqDat.PackTable() '128x
            st &= Pack.PackString(CrdIssSys, 3)
            st &= Pack.PackString(Rsv10, 61)
            st &= CrdIssRsp.PackTable() '576x
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            MsgReqDat.ReadTable(DataStream) '128x
            CrdIssSys = Pack.Strip(DataStream, 3)
            Rsv10 = Pack.Strip(DataStream, 61)
            CrdIssRsp.ReadTable(DataStream) '576x
        End Sub

        Public Sub Clear()
            MsgReqDat.Clear()
            CrdIssSys = String.Empty
            Rsv10 = String.Empty
            CrdIssRsp.Clear()
        End Sub

        '''Description: 
        Public Function GetMessage_IssueNewCard_Rsp(ByVal MsgId As String, ByRef MsgRspDat As IssueNewCard_Rsp_Struct) As Boolean
            Dim resp As String = String.Empty

            'App #
            If Not (GetMessage_Common("550230", New StackFrame().GetMethod.Name, MsgId, &H80099999, resp)) Then Return False
            Try

                AppInstance.strip(resp, 256)
                MsgRspDat.ReadTable(resp) '640x

            Catch ex As Exception
                HandleError(&H80099999, New StackFrame().GetMethod.Name & ":" & ex.Message, , ex)
                Return False
            End Try
            Return True

        End Function

        '''Description: 
        Public Function GetMessage_CancelCard_Rsp(ByVal MsgId As String, ByRef MsgRspDat As IssueNewCard_Rsp_Struct) As Boolean
            Dim resp As String = String.Empty

            'App #
            If Not (GetMessage_Common("550250", New StackFrame().GetMethod.Name, MsgId, &H80099999, resp)) Then Return False
            Try

                AppInstance.strip(resp, 256)
                MsgRspDat.ReadTable(resp) '640x

            Catch ex As Exception
                HandleError(&H80099999, New StackFrame().GetMethod.Name & ":" & ex.Message, , ex)
                Return False
            End Try
            Return True

        End Function

        '''Description: 
        Public Function GetMessage_ModifyCard_Rsp(ByVal MsgId As String, ByRef MsgRspDat As IssueNewCard_Rsp_Struct) As Boolean
            Dim resp As String = String.Empty

            'App #
            If Not (GetMessage_Common("550240", New StackFrame().GetMethod.Name, MsgId, &H80099999, resp)) Then Return False
            Try

                AppInstance.strip(resp, 256)
                MsgRspDat.ReadTable(resp) '640x

            Catch ex As Exception
                HandleError(&H80099999, New StackFrame().GetMethod.Name & ":" & ex.Message, , ex)
                Return False
            End Try
            Return True

        End Function
    End Structure

    '''Knowen Calling Messages: 550230
    Public Structure IssueNewCard_Struct '128x, App #, Msg #550230
        Dim AccNum As EnumerateCardsForIssuance_AccNum_Struct '13				Desc:
        Dim CrdPan As String '18x				Desc: Card PAN (obliterated)
        Dim CrdIssSys As String '3x				Desc: Card issuing platform (refer to AP0774)
        Dim CrdExpDte As String '8n				Desc: Expiry date YYYYMMDD or spaces
        Dim CrdCrdFlg As String '1x				Desc: Card type P=primary, S=secondary, A=alternate
        Dim CrdLngCde As String '1x				Desc: Card language required (A, E or space).
        Dim CrdBrnCde As String '4x				Desc: Branch where card is to be picked up or spaces
        Dim CrdPrdCde As String '4x				Desc: Card product code (refer to AP0774)
        Dim CrdPrdTek As String '1x				Desc: Card technology (refer to AP0774)
        Dim CrdPrdLif As String '2n				Desc: Card product life in motnhs (refer to AP0774)
        Dim CrdEmbNam As String '26x				Desc: Card embossing name
        Dim CusNum As String '6x				Desc: Customer number
        Dim Rsv1 As String '41x				Desc: Reserved for future use

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= AccNum.PackTable() '13x
            st &= Pack.PackString(CrdPan, 18)
            st &= Pack.PackString(CrdIssSys, 3)
            st &= Pack.PackDate(CrdExpDte, True)
            st &= Pack.PackString(CrdCrdFlg, 1)
            st &= Pack.PackString(CrdLngCde, 1)
            st &= Pack.PackString(CrdBrnCde, 4)
            st &= Pack.PackString(CrdPrdCde, 4)
            st &= Pack.PackString(CrdPrdTek, 1)
            st &= Pack.PackNString(CrdPrdLif, 2)
            st &= Pack.PackString(CrdEmbNam, 26)
            st &= Pack.PackString(CusNum, 6)
            st &= Pack.PackString(Rsv1, 41)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            AccNum.ReadTable(DataStream) '13x
            CrdPan = Pack.Strip(DataStream, 18)
            CrdIssSys = Pack.Strip(DataStream, 3)
            CrdExpDte = Pack.Strip(DataStream, 8)
            CrdCrdFlg = Pack.Strip(DataStream, 1)
            CrdLngCde = Pack.Strip(DataStream, 1)
            CrdBrnCde = Pack.Strip(DataStream, 4)
            CrdPrdCde = Pack.Strip(DataStream, 4)
            CrdPrdTek = Pack.Strip(DataStream, 1)
            CrdPrdLif = Pack.Strip(DataStream, 2)
            CrdEmbNam = Pack.Strip(DataStream, 26)
            CusNum = Pack.Strip(DataStream, 6)
            Rsv1 = Pack.Strip(DataStream, 41)
        End Sub

        'AP0761: 550230
        Public Function SendMessage_IssueNewCard(ByVal p_Struct As IssueNewCard_Struct) As String

            Dim st As String = String.Empty

            st &= p_Struct.PackTable()
            Dim Acc As String
            Acc = p_Struct.AccNum.AccBrnNum & p_Struct.AccNum.AccCusNum & p_Struct.AccNum.AccSfxNum
            'AP0761: 550230
            Return AppInstance.SendMessageVisuallyEx("550230", st, "ACC", p_Struct.AccNum.AccCusNum, Acc, "")
        End Function

        'AP0761: 550240
        Public Function SendMessage_ModifyCard(ByVal p_Struct As IssueNewCard_Struct) As String

            Dim st As String = String.Empty

            st &= p_Struct.PackTable()
            Dim Acc As String
            Acc = p_Struct.AccNum.AccBrnNum & p_Struct.AccNum.AccCusNum & p_Struct.AccNum.AccSfxNum
            'AP0761
            Return AppInstance.SendMessageVisuallyEx("550240", st, "CRD", p_Struct.AccNum.AccCusNum, Acc, p_Struct.CrdPan)
        End Function


        Public Sub Clear()
            AccNum.Clear()
            CrdPan = String.Empty
            CrdIssSys = String.Empty
            CrdExpDte = String.Empty
            CrdCrdFlg = String.Empty
            CrdLngCde = String.Empty
            CrdBrnCde = String.Empty
            CrdPrdCde = String.Empty
            CrdPrdTek = String.Empty
            CrdPrdLif = String.Empty
            CrdEmbNam = String.Empty
            CusNum = String.Empty
            Rsv1 = String.Empty
        End Sub

    End Structure

    Public Structure CancelCard_Struct '128x, App #AP0761, Msg #550250
        Dim AccNum As EnumerateCardsForIssuance_AccNum_Struct '13				Desc:
        Dim CrdPan As String '18x				Desc: Card PAN (obliterated)
        Dim CrdIssSys As String '3x				Desc: Card issuing platform (refer to AP0774)
        Dim Rsv3 As String '47x				Desc: Card issuing platform (refer to AP0774)
        Dim CusNum As String '6x				Desc: Customer number
        Dim Rsv1 As String '41x				Desc: Reserved for future use

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= AccNum.PackTable() '13x
            st &= Pack.PackString(CrdPan, 18)
            st &= Pack.PackString(CrdIssSys, 3)
            st &= Pack.PackString(Rsv3, 47)
            st &= Pack.PackString(CusNum, 6)
            st &= Pack.PackString(Rsv1, 41)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            AccNum.ReadTable(DataStream) '13x
            CrdPan = Pack.Strip(DataStream, 18)
            CrdIssSys = Pack.Strip(DataStream, 3)
            Rsv3 = Pack.Strip(DataStream, 47)
            CusNum = Pack.Strip(DataStream, 6)
            Rsv1 = Pack.Strip(DataStream, 41)
        End Sub

        Public Sub Clear()
            AccNum.Clear()
            CrdPan = String.Empty
            CrdIssSys = String.Empty
            Rsv3 = String.Empty
            CusNum = String.Empty
            Rsv1 = String.Empty
        End Sub

        '''App # AP0761: Msg# 550250
        '''Description: This service allows a card to be cancelled (existing or requested new card) or marked as hot. A warning should be given to the user if the card is already sent for embossing / personalisation. This message is normally issued after an enumeration of c
        Public Function SendMessage_CancelCard(ByVal p_Struct As CancelCard_Struct) As String

            Dim st As String = String.Empty

            st &= p_Struct.PackTable() '128x

            'App #AP0761
            Return AppInstance.SendMessageVisuallyEx("550250", st, "CUS", p_Struct.CusNum, "", "")
        End Function

    End Structure

End Module
''' -----------------------------------------------------------------------------
''' <summary>
''' module for MQ messages related to Customer contact tracking
''' </summary>
''' <remarks>
''' </remarks>
''' <history>
''' 	[Y309abso]	20/05/2009	Created
''' </history>
''' -----------------------------------------------------------------------------
Public Module CustomerTracking

    Public Enum CseCodes
        SAGSRCIDE
        SAGTRGIDE
        SAGCATCDE
        SAGSTAMAJ
        SAGSTAMIN
        EVTCHNTYP
        EVTCHNDIR
        EVTTYPCDE
        SAGTOPCDE
        SAGCLSCDE
        SAGOWNDEP
        SAGOWNBRN
    End Enum

    Public CseCodesString() As String = {"SAGSRCIDE", "SAGTRGIDE", "SAGCATCDE", "SAGSTAMAJ", "SAGSTAMIN", _
    "EVTCHNTYP", "EVTCHNDIR", "EVTTYPCDE", "SAGTOPCDE", "SAGCLSCDE", "SAGOWNDEP", "SAGOWNBRN"}

    Public Enum CseTopClsCode
        IDDOC
    End Enum
    Public CseTopClsCodes() As String = {"IDDOC"}


    Public Function DecodeCseCde(ByVal CseCdeNam As String, ByVal CseCdeCde As String) As String
        Dim idx As Integer
        Dim st As String
        idx = LocateCseCde(Trim(CseCdeNam), Trim(CseCdeCde))
        If idx >= 0 Then
            st = CasSysCdeTable(idx).CdeEngDsc
            If st = "" Then st = CasSysCdeTable(idx).CdeAraDsc
            Return st
        End If
        Return ""
    End Function

    Public Function LocateCseDesc(ByVal CseCdeDesc As String, ByVal CseCdeCde As CustomerTracking.CseCodes) As Integer
        Dim i As Integer
        If (CasSysCdeTable Is Nothing) Then Return -1

        For i = 0 To CasSysCdeTable.Length - 1
            If (CasSysCdeTable(i).CdeEngDsc.ToUpper = CseCdeDesc.ToUpper) Then
                If CasSysCdeTable(i).CdeNam.ToUpper = CseCodesString(CseCdeCde) Then
                    Return i

                End If
            End If
        Next
        Return -1
    End Function

    Public Function LocateCseCde(ByVal CseCdeNam As String, ByVal CseCdeCde As String) As Integer
        Dim i As Integer
        If (CasSysCdeTable Is Nothing) Then Return -1

        For i = 0 To CasSysCdeTable.Length - 1
            If (CasSysCdeTable(i).CdeNam.ToUpper = CseCdeNam.ToUpper) Then
                If CasSysCdeTable(i).CdeCde.ToUpper = CseCdeCde.ToUpper Then
                    Return i

                End If
            End If
        Next
        Return -1
    End Function

    Public Structure CoreSys_CasSysCde '0 Msg #910260
        Dim CdeNam As String     '10x Name of the code
        Dim CdeCde As String     '8x  Code value (followed by spaces as needed)
        Dim CdeEngDsc As String  '30x English description
        Dim CdeAraDsc As String  '30x Arabic descripton
        Dim CdeDepCde As String  '8x Code dependency (or spaces)
        Dim Rsv100 As String     '12x Reserved, space filled
    End Structure
    ''' -----------------------------------------------------------------------------
    ''' Project	 : ICEP0100
    ''' Struct	 : CustomerTracking.CusConTrk
    ''' 
    ''' -----------------------------------------------------------------------------
    ''' <summary>
    ''' 
    ''' </summary>
    ''' <remarks>
    ''' </remarks>
    ''' <history>
    ''' 	[y309abso]	25/05/2009	Created
    ''' </history>
    ''' -----------------------------------------------------------------------------
    Public Structure CusConTrk
        Dim TabRowVer As String
        Dim ConTrkDat As CustomerTracking.CusConTrk.ConTrkDatStruct
        Dim ConTrkWho As CustomerTracking.CusConTrk.ConTrkWhoStruct
        Dim CusNamEng As String
        Dim CusNamAra As String

        Public Sub ReadTable(ByRef DataStream As String)
            TabRowVer = Pack.Strip(DataStream, 12)
            ConTrkDat.ReadTable(Pack.Strip(DataStream, 58))
            Pack.Strip(DataStream, 48)   'Rsv100
            ConTrkWho.ReadTable(Pack.Strip(DataStream, 72))
            CusNamEng = Pack.Strip(DataStream, 35)
            CusNamAra = Pack.Strip(DataStream, 35)
            Pack.Strip(DataStream, 40)   'Rsv200
        End Sub
        ''' -----------------------------------------------------------------------------
        ''' Project	 : ICEP0100
        ''' Struct	 : CustomerTracking.CusConTrk.ConTrkDatStruct
        ''' 
        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' Contact tracking data
        '''  ConTrkDat	34	Structure (used in messages) – as below
        '''     CusNum	6x	Customer number
        '''     SagIde	13	Case identifier (entire case carries this identifier)
        '''     SagSrcIde	3x	•	Code indicating the source of this case
        '''     SagSerNum	10x	•	Unique reference (serial number) number within source
        '''     SagTrgCde	4x	Triggering party
        '''     SagCatCde	4x	Category code 
        '''     SagTopCde	6x	Topic code
        '''     SagStaMaj	4x	Case major status code
        '''     SagStaMin	4x	Case minor status code
        '''     SagNumEng	3n	Event numbering engine within this case (starts at 001)

        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
        ''' 	[y309abso]	25/05/2009	Created
        ''' </history>
        ''' -----------------------------------------------------------------------------
        Public Structure ConTrkDatStruct
            Dim CusNum As String    '6x	Customer number
            Dim SagIde As String    '13	Case identifier (entire case carries this identifier)
            Dim SagTrgCde As String '4x	Triggering party
            Dim SagCatCde As String '4x	Category code 
            Dim SagClsCde As String '6x	Classification code for the topic
            Dim SagTopCde As String '6x	Topic code
            Dim SagStaMaj As String '4x	Case major status code
            Dim SagStaMin As String '4x	Case minor status code
            Dim SagNumEng As String '3n	Event numbering engine within this case (starts at 001)
            Dim SagOwnDep As String '4x	Department owning the case (or spaces if no owner)
            Dim SagOwnBrn As String '4x	Area within department owning the case (or spaces)

            Public Sub ReadTable(ByRef DataStream As String)
                CusNum = Pack.Strip(DataStream, 6)
                SagIde = Pack.Strip(DataStream, 13)
                SagTrgCde = Pack.Strip(DataStream, 4)
                SagCatCde = Pack.Strip(DataStream, 4)
                SagClsCde = Pack.Strip(DataStream, 6)
                SagTopCde = Pack.Strip(DataStream, 6)
                SagStaMaj = Pack.Strip(DataStream, 4)
                SagStaMin = Pack.Strip(DataStream, 4)
                SagNumEng = Pack.Strip(DataStream, 3)
                SagOwnDep = Pack.Strip(DataStream, 4)
                SagOwnBrn = Pack.Strip(DataStream, 4)
            End Sub
        End Structure
        ''' -----------------------------------------------------------------------------
        ''' Project	 : ICEP0100
        ''' Struct	 : CustomerTracking.CusConTrk.ConTrkWhoStruct
        ''' 
        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' contact tracking history structure:
        '''     SagBegStp	14x	Date and time case started (event 001)
        '''     SagBegWho	10x	User identity of the creating user
        '''     SagEvtStp	14x	Date and time of last event on this case
        '''     SagEvtWho	10x	User identity causing or associated with the last event
        '''     SagEndStp	14x	Date and time the case was closed
        ''''    SagEndWho	10x	User identity of the closing user

        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
        ''' 	[y309abso]	25/05/2009	Created
        ''' </history>
        ''' -----------------------------------------------------------------------------
        Public Structure ConTrkWhoStruct
            Dim SagBegStp As String '14x	Date and time case started (event 001)
            Dim SagBegWho As String '10x	User identity of the creating user
            Dim SagEvtStp As String '14x	Date and time of last event on this case
            Dim SagEvtWho As String '10x	User identity causing or associated with the last event
            Dim SagEndStp As String '14x	Date and time the case was closed
            Dim SagEndWho As String '10x	User identity of the closing user

            Public Sub ReadTable(ByRef DataStream As String)
                SagBegStp = Pack.Strip(DataStream, 14)
                SagBegWho = Pack.Strip(DataStream, 10)
                SagEvtStp = Pack.Strip(DataStream, 14)
                SagEvtWho = Pack.Strip(DataStream, 10)
                SagEndStp = Pack.Strip(DataStream, 14)
                SagEndWho = Pack.Strip(DataStream, 10)
            End Sub
        End Structure
    End Structure

    ''' -----------------------------------------------------------------------------
    ''' Project	 : ICEP0100
    ''' Struct	 : CustomerTracking.ConEvtDat
    ''' 
    ''' -----------------------------------------------------------------------------
    ''' <summary>
    ''' Event data structure:
    '''     SagIde	13x	Case identifier (entire case carries this identifier)
    '''     EvtNum	3n	Event number within this case (from the case number engine)
    '''     EvtStp	14n	Event date and time (YYYYMMDDhhmmss)
    '''     EvtWho	10x	User identity making or recording this event.
    '''     EvtTypCde	6x	Type of event taking place
    '''     CasTopDat	128x	Case topic data associated with this event
    '''     ChnCnt	1n	Number of channels in use (maximum four)
    '''     ChnItm[4]	4*32 = 128	Four channels used to exchange information (when relevant)
    '''         EvtChnTyp	3x	•	Channel type used (or spaces if none)
    '''         EvtChnDir	3x	•	Channel direction
    '''         EvtChnIde	26x	•	Channel identification data (with trailing spaces)
    '''     ChnFutStr	21x	Future use string (constant spaces)
    '''     EvtTrgIde	4x	Event triggering party
    '''     ConEvtMsg	320	Event message text  - structure follows
    '''         MsgSze	3n	Size of the associated message or zeros if none
    '''         MsgLng	2n	Language “EN”=English only, “AR”=Arabic or mixed
    '''         MsgDat	0..315x	Message text (maximum is 315 filled bytes)

    ''' </summary>
    ''' <remarks>
    ''' </remarks>
    ''' <history>
    ''' 	[y309abso]	25/05/2009	Created
    ''' </history>
    ''' -----------------------------------------------------------------------------
    Public Structure ConEvtDat
        Dim TabRowVer As String
        Dim SagIde As String
        Dim EvtNum As String
        Dim EvtStp As String
        Dim EvtWho As String
        Dim EvtTypCde As String
        Dim CasTopDat As CustomerTracking.ConEvtDat.CasTopDataStruct
        Dim ChnCnt As Integer
        Dim ChnItm() As CustomerTracking.ConEvtDat.ChnItmStruct
        Dim ChnFutStr As String
        Dim EvtTrgIde As String
        Dim ConEvtMsg As CustomerTracking.ConEvtDat.ConEvtMsgStruct

        Public Sub ReadTable(ByRef DataStream As String)
            Dim lChnCount As Integer
            Dim i As Integer
            Dim Str As String

            TabRowVer = Pack.Strip(DataStream, 12)
            SagIde = Pack.Strip(DataStream, 13)
            EvtNum = Pack.Strip(DataStream, 3)
            EvtStp = Pack.Strip(DataStream, 14)
            EvtWho = Pack.Strip(DataStream, 10)
            EvtTypCde = Pack.Strip(DataStream, 6)
            CasTopDat.ReadTable(Pack.Strip(DataStream, 150))
            lChnCount = CType(Pack.Strip(DataStream, 1), Integer)
            ChnCnt = lChnCount
            Str = Pack.Strip(DataStream, 128)
            If lChnCount > 0 Then
                ReDim ChnItm(lChnCount - 1)
                For i = 0 To lChnCount - 1
                    ChnItm(i).ReadTable(Pack.Strip(Str, 32))
                Next
            End If
            ChnFutStr = Pack.Strip(DataStream, 21)
            EvtTrgIde = Pack.Strip(DataStream, 4)
            AppInstance.strip(DataStream, 38)
            ConEvtMsg.ReadTable(Pack.Strip(DataStream, 320))
            AppInstance.strip(DataStream, 30)
        End Sub
        ''' -----------------------------------------------------------------------------
        ''' Project	 : ICEP0100
        ''' Struct	 : CustomerTracking.ConEvtDat.ChnItmStruct
        ''' 
        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' channels used  to exchange information structure:
        '''     EvtChnTyp	3x	•	Channel type used (or spaces if none)
        '''     EvtChnDir	3x	•	Channel direction
        '''     EvtChnIde	26x	•	Channel identification data (with trailing spaces)    
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
        ''' 	[y309abso]	25/05/2009	Created
        ''' </history>
        ''' -----------------------------------------------------------------------------
        Public Structure ChnItmStruct
            Dim EvtChnTyp As String
            Dim EvtChnDir As String
            Dim EvtChnIde As String

            Public Sub ReadTable(ByRef DataStream As String)
                EvtChnTyp = Pack.Strip(DataStream, 3)
                EvtChnDir = Pack.Strip(DataStream, 3)
                EvtChnIde = Pack.Strip(DataStream, 26)
            End Sub

            Public Function PackTable() As String
                Dim st As String = String.Empty

                st &= Pack.PackString(EvtChnTyp, 3)
                st &= Pack.PackString(EvtChnDir, 3)
                st &= Pack.PackString(EvtChnIde, 26)
                Return st
            End Function

        End Structure
        ''' -----------------------------------------------------------------------------
        ''' Project	 : ICEP0100
        ''' Struct	 : CustomerTracking.ConEvtDat.CasTopDatStruct
        ''' 
        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
        ''' 	[Y309abso]	04/08/2009	Created
        ''' 
        '''         ''' </history>
        ''' -----------------------------------------------------------------------------
        Public Structure CasTopDataStruct

            Dim CaseTopicHeader As CasTopHdr
            Dim CaseTopicData As CasTopData

            Public Sub ReadTable(ByRef DataStream As String)
                CaseTopicHeader.ReadTable(Pack.Strip(DataStream, 50))
                'Topic variable data will be extracted based on classification code
                CaseTopicData.ReadTable(Pack.Strip(DataStream, 100), CaseTopicHeader.ClsCde.Trim)
            End Sub

            Public Function PackTable() As String
                Dim st As String = String.Empty
                st = CaseTopicHeader.PackTable
                st &= CaseTopicData.PackTable(CaseTopicHeader.ClsCde.Trim)
                Return st
            End Function
        End Structure
        '***************************
        ' Topic header definition
        '***************************
        Structure CasTopHdr
            Dim TopCde As String '6x	•	Topic code value (always IDEXPY or IDNONE or IDERRS)
            Dim ClsCde As String '6x	•	Classification code (IDDOC)
            Dim ReaCde As String '3x    •	Error reason code
            Dim Rsv001 As String '8x	•	Reserved for future use
            Dim TopKeySiz As String '2n	•	Topic active key data size (always 6)
            Dim TopKeyVal As String  '25x	•	Topic key value (always customer number)

            Public Sub ReadTable(ByRef DataStream As String)
                TopCde = Pack.Strip(DataStream, 6)
                ClsCde = Pack.Strip(DataStream, 6)
                ReaCde = Pack.Strip(DataStream, 3)
                Rsv001 = Pack.Strip(DataStream, 8)
                TopKeySiz = Pack.Strip(DataStream, 2)
                TopKeyVal = Pack.Strip(DataStream, 25)
            End Sub

            Public Function PackTable() As String
                Dim st As String = String.Empty
                st &= Pack.PackString(TopCde, 6)
                st &= Pack.PackString(ClsCde, 6)
                st &= Pack.PackString(ReaCde, 3)
                st &= Pack.PackString(String.Empty, 8) 'Rsv001
                st &= Pack.PackNString(TopKeySiz, 2)
                st &= Pack.PackString(TopKeyVal, 25)
                Return st

            End Function
        End Structure
        '***************************
        ' Topic variable data
        '***************************
        Structure CasTopData
            Dim lCasTopData As CasTopIDData

            Public Sub ReadTable(ByRef DataStream As String, ByVal pTopCls As String)
                If pTopCls.Trim = "" Then pTopCls = CseTopClsCodes(CseTopClsCode.IDDOC)
                Select Case pTopCls
                    Case CseTopClsCodes(CseTopClsCode.IDDOC)
                        lCasTopData.ReadTable(DataStream)
                End Select
            End Sub

            Public Function PackTable(ByVal pTopCls As String) As String
                If pTopCls.Trim = "" Then pTopCls = CseTopClsCodes(CseTopClsCode.IDDOC)
                Select Case pTopCls
                    Case CseTopClsCodes(CseTopClsCode.IDDOC)
                        Return lCasTopData.PackTable()
                End Select
            End Function
        End Structure
        '***************************
        ' Topic variable data for Classification code (IDDOC)
        '***************************
        Structure CasTopIDData
            Dim NatCde As String '2x	•	Nationality code
            Dim DocTyp As String '2x	•	Document type
            Dim DocVal As String '10x	•	Document serial
            Dim DocExp As String '8x	•	Expiry date (format YYYYMMDD)
            Dim Rsv002 As String '65x	•	Reserved, space filled
            Dim Dte2Go As String '8x	•	Date days to go was calculated (format YYYYYMMDD)
            Dim Day2Go As String '4ns	•	Number of days validity remaining

            Public Sub ReadTable(ByRef DataStream As String)
                NatCde = Pack.Strip(DataStream, 2)
                DocTyp = Pack.Strip(DataStream, 2)
                DocVal = Pack.Strip(DataStream, 10)
                DocExp = Pack.Strip(DataStream, 8)
                Rsv002 = Pack.Strip(DataStream, 65)
                Dte2Go = Pack.Strip(DataStream, 8)
                Day2Go = Pack.Strip(DataStream, 5)
            End Sub

            Public Function PackTable() As String
                Dim st As String = String.Empty
                st &= Pack.PackString(NatCde, 2)
                st &= Pack.PackString(DocTyp, 2)
                st &= Pack.PackString(DocVal, 10)
                st &= Pack.PackDate(DocExp)
                st &= Pack.PackString(String.Empty, 65) 'Rsv002
                st &= Pack.PackDate(Dte2Go)
                st &= Pack.PackString(Day2Go, 5)
                Return st
            End Function
        End Structure

        ''' -----------------------------------------------------------------------------
        ''' Project	 : ICEP0100
        ''' Struct	 : CustomerTracking.ConEvtDat.ConEvtMsgStruct
        ''' 
        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
        ''' 	[y309abso]	25/05/2009	Created
        ''' </history>
        ''' -----------------------------------------------------------------------------
        Public Structure ConEvtMsgStruct
            Dim MsgSze As String
            Dim MsgLng As String
            Dim MsgDat As String

            Public Sub ReadTable(ByRef DataStream As String)
                MsgSze = Pack.Strip(DataStream, 3)
                MsgLng = Pack.Strip(DataStream, 2)
                MsgDat = Pack.Strip(DataStream, 315)
            End Sub

            Public Function PackTable() As String
                Dim st As String = String.Empty

                st &= Pack.PackString(MsgSze, 3)
                st &= Pack.PackString(MsgLng, 2)
                st &= Pack.PackString(MsgDat, 315)
                Return st
            End Function

        End Structure

    End Structure
    ''' -----------------------------------------------------------------------------
    ''' Project	 : ICEP0100
    ''' Struct	 : CustomerTracking.CusReqStructure
    ''' 
    ''' -----------------------------------------------------------------------------
    ''' <summary>
    ''' Enumerate customer cases request structure:
    '''     CusNum	6n	Customer number (or spaces for all)
    '''     ReqSrcIde	3x	Case source code or spaces for all
    '''     ReqSerNum	10x	Case serial or spaces for all
    '''     ReqTrgIde	4x	Case triggering party or spaces for all
    '''     ReqCatCde	4x	Case category code or spaces for all
    '''     ReqTopCde	6x	Case topic code or spaces for all
    '''     ReqStaMaj	4x	Case major status or spaces for all
    '''     ReqStaMin	4x	Case minor status or spaces for all
    '''     ReqBegDte	8x	Include cases with events on or after this date
    '''     ReqEndDte	8x	Include cases with events on or before this date
    '''     Rsv01	23x	Reserved, space filled

    ''' </summary>
    ''' <remarks>
    ''' </remarks>
    ''' <history>
    ''' 	[y309abso]	26/05/2009	Created
    ''' </history>
    ''' -----------------------------------------------------------------------------
    Public Structure CusReqStructure
        Dim CusNum As String    '6n	Customer number (or spaces for all)
        Dim ReqSrcIde As String '3x	Case source code or spaces for all
        Dim ReqSerNum As String '10x Case serial or spaces for all
        Dim ReqTrgIde As String '4x	Case triggering party or spaces for all
        Dim ReqCatCde As String '4x	Case category code or spaces for all
        Dim ReqClsCde As String '6x	Case class code or spaces for all
        Dim ReqTopCde As String '6x	Case topic code or spaces for all
        Dim ReqStaMaj As String '4x	Case major status or spaces for all
        Dim ReqStaMin As String '4x	Case minor status or spaces for all
        Dim ReqBegDte As String '8x	Include cases with events on or after this date
        Dim ReqEndDte As String '8x	Include cases with events on or before this date
        Dim ReqOwnDep As String '4x	Owning department or spaces for all
        Dim ReqOwnBrn As String '4x	Owning department or branch or spaces for all
        Dim ReqEvtAct As String '1x	Include cases with events in this category
        Dim ReqEvtPas As String '1x	Include cases with events in this category
        Dim ReqEvtNom As String '1x	Include cases with events in this category
        Dim Rsv01 As String     '6x	Reserved, space filled

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(CusNum, 6)
            st &= Pack.PackString(ReqSrcIde, 3)
            st &= Pack.PackString(ReqSerNum, 10)
            st &= Pack.PackString(ReqTrgIde, 4)
            st &= Pack.PackString(ReqCatCde, 4)
            st &= Pack.PackString(ReqClsCde, 6)
            st &= Pack.PackString(ReqTopCde, 6)
            st &= Pack.PackString(ReqStaMaj, 4)
            st &= Pack.PackString(ReqStaMin, 4)
            st &= Pack.PackDate(ReqBegDte)
            st &= Pack.PackDate(ReqEndDte)
            st &= Pack.PackString(ReqOwnDep, 4)
            st &= Pack.PackString(ReqOwnBrn, 4)
            st &= Pack.PackString(ReqEvtAct, 1)
            st &= Pack.PackString(ReqEvtPas, 1)
            st &= Pack.PackString(ReqEvtNom, 1)
            st &= Pack.PackString(String.Empty, 6)
            Return st

        End Function

    End Structure
    ''' -----------------------------------------------------------------------------
    ''' <summary>
    '''     ''' Enumerate Case system codes (send message)
    ''' </summary>
    ''' <returns>message ID</returns>
    ''' <remarks>
    ''' </remarks>
    ''' <history>
    ''' 	[y309abso]	24/05/2009	Created
    ''' </history>
    ''' -----------------------------------------------------------------------------
    Public Function SendMessage_EnumerateCaseSystemCodes(Optional ByVal p_IncludeBranch As String = "Y") As String
        Dim st As String
        st = String.Empty
        st = Pack.PackString(p_IncludeBranch, 1)
        Return AppInstance.SendMessageVisuallyEx("910260", st, "GEN", "", "", "")
    End Function
    ''' -----------------------------------------------------------------------------
    ''' <summary>
    ''' Enumerate Case system codes (get message)
    ''' </summary>
    ''' <returns></returns>
    ''' <remarks>
    ''' </remarks>
    ''' <history>
    ''' 	[Y309abso]	20/05/2009	Created
    ''' </history>
    ''' -----------------------------------------------------------------------------
    Public Function GetMessage_EnumerateCaseSystemCodes(ByVal MsgId As String, ByRef mADO As AdoAccess) As Boolean
        Dim resp As String = String.Empty
        Dim verStr As String
        Dim i, count As Integer
        Dim verRec As CoreSys_VerItm
        Dim row As DataRow

        If Not (GetMessage_Common("910260", "", MsgId, &H81000645, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 16 + 12 + 16) '16x: Echoed from input,12x:Table Row version,16x:Reserved (Rsv050)
            count = CType(AppInstance.strip(resp, 4), Integer)
            If count <= 0 Then
                '''HandleError(&H80002051, SIBL0100.Util.Debug.getStackFrame(New StackTrace(True).GetFrame(0)) & ": No data received", "ICE Communications")
                '''Return False
                Erase CasSysCdeTable
                mADO.DeleteTable("CasCdeTab")
                Return True
            End If
            ReDim CasSysCdeTable(count - 1)
            mADO.DeleteTable("CasCdeTab")
            For i = 0 To CasSysCdeTable.Length - 1
                verStr = AppInstance.strip(resp, 100)
                With CasSysCdeTable(i)
                    .CdeNam = Trim(AppInstance.strip(verStr, 10))
                    AppInstance.strip(verStr, 2) 'Position to be used later
                    .CdeCde = Trim(AppInstance.strip(verStr, 8))
                    .CdeEngDsc = Trim(AppInstance.strip(verStr, 30))
                    .CdeAraDsc = Trim(AppInstance.strip(verStr, 30))
                    .CdeDepCde = Trim(AppInstance.strip(verStr, 8))
                    .Rsv100 = Trim(AppInstance.strip(verStr, 12))
                    mADO.AddRowToTable("CasCdeTab", "Values (""" & .CdeNam & " "",""" & _
                                       .CdeCde & " "",""" & .CdeEngDsc & " "",""" & .CdeAraDsc & " "",""" & .CdeDepCde & " "")")
                End With
            Next
        Catch ex As Exception
            HandleError(&H81000644, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function
    ''' -----------------------------------------------------------------------------
    ''' <summary>
    ''' 
    ''' </summary>
    ''' <param name="pCusReq"></param>
    ''' <returns></returns>
    ''' <remarks>
    ''' </remarks>
    ''' <history>
    ''' 	[y309abso]	30/05/2009	Created
    ''' </history>
    ''' -----------------------------------------------------------------------------
    Public Function SendMessage_EnumerateCustomerCases(ByVal pCusReq As CusReqStructure) As String
        Dim st As String = String.Empty

        st &= pCusReq.PackTable()

        Return AppInstance.SendMessageVisuallyEx("616000", st, "CUS", "", "", "")
    End Function
    ''' -----------------------------------------------------------------------------
    ''' <summary>
    ''' 
    ''' </summary>
    ''' <param name="MsgId"></param>
    ''' <param name="pCusCon"></param>
    ''' <returns></returns>
    ''' <remarks>
    ''' </remarks>
    ''' <history>
    ''' 	[y309abso]	30/05/2009	Created
    ''' </history>
    ''' -----------------------------------------------------------------------------
    Public Function GetMessage_EnumerateCustomerCases(ByVal MsgId As String, ByRef pCusCon() As CusConTrk, ByRef nFound As Integer) As Boolean
        Dim resp As String = String.Empty
        Dim lCount As Integer
        Dim i As Integer
        Dim Temp As String

        If Not (GetMessage_Common("616000", "", MsgId, &H81000647, resp)) Then Return False
        Try

            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 80) 'Echoed request data
            AppInstance.strip(resp, 30) 'Reserved, space filled
            nFound = AppInstance.ExInt(AppInstance.strip(resp, 6))
            lCount = AppInstance.ExInt(AppInstance.strip(resp, 4))
            If lCount <= 0 Then
                Return False
                Erase pCusCon
            End If
            ReDim pCusCon(lCount - 1)
            For i = 0 To lCount - 1
                Temp = AppInstance.strip(resp, 300)
                pCusCon(i).ReadTable(Temp)
            Next
            Return True

        Catch ex As Exception
            HandleError(&H81000647, "Error:", "Error", ex)
            Return False
        End Try
        Return True


    End Function
    ''' -----------------------------------------------------------------------------
    ''' <summary>
    ''' 
    ''' </summary>
    ''' <param name="pReqSrcIde"></param>
    ''' <param name="pReqSerNum"></param>
    ''' <returns></returns>
    ''' <remarks>
    ''' </remarks>
    ''' <history>
    ''' 	[y309abso]	31/05/2009	Created
    ''' </history>
    ''' -----------------------------------------------------------------------------
    Public Function SendMessage_EnumerateCaseEvents(ByVal pReqSagSrcIde As String) As String
        Dim st As String = String.Empty

        st &= AppInstance.PackString(String.Empty, 6)             'Rsv00  reserved, space filled
        st &= AppInstance.PackString(pReqSagSrcIde, 13)     'Case source code or spaces + Case serial or spaces for all
        st &= AppInstance.PackString(String.Empty, 61)            'Rsv01  reserved, space filled

        Return AppInstance.SendMessageVisuallyEx("616010", st, "GEN", "", "", "")
    End Function
    ''' -----------------------------------------------------------------------------
    ''' <summary>
    ''' 
    ''' </summary>
    ''' <param name="MsgId"></param>
    ''' <param name="pCaseEvents"></param>
    ''' <returns></returns>
    ''' <remarks>
    ''' </remarks>
    ''' <history>
    ''' 	[y309abso]	31/05/2009	Created
    ''' </history>
    ''' -----------------------------------------------------------------------------
    Public Function GetMessage_EnumerateCaseEvents(ByVal MsgId As String, ByRef pCaseEvents() As ConEvtDat) As Boolean
        Dim resp As String = String.Empty
        Dim lCount As Integer
        Dim i As Integer
        Dim Temp As String

        If Not (GetMessage_Common("616010", "", MsgId, &H81000648, resp)) Then Return False
        Try

            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 80) 'Echoed request data
            AppInstance.strip(resp, 36) 'Reserved, space filled
            lCount = AppInstance.ExInt(AppInstance.strip(resp, 4))
            If lCount <= 0 Then

                Erase pCaseEvents
                Return False
            End If
            ReDim pCaseEvents(lCount - 1)
            For i = 0 To lCount - 1
                Temp = AppInstance.strip(resp, 750)
                pCaseEvents(i).ReadTable(Temp)

            Next
            Return True

        Catch ex As Exception
            HandleError(&H81000649, "Error:", "Error", ex)
            Return False
        End Try
        Return True

    End Function

    Public Structure CaseCreateMsgReqDat
        Dim Rsv000 As String
        Dim ConTrkDat As CreateConTrkDat
        Dim Rsv150 As String '230x	Reserved, space filled
        Dim EvtItmItm As EvtItm

        Public Sub ReadTable(ByVal DataStream As String)
            Rsv000 = Pack.Strip(DataStream, 12)
            ConTrkDat.ReadTable(Pack.Strip(DataStream, 150))
            Rsv000 = Pack.Strip(DataStream, 230)
            EvtItmItm.ReadTable(Pack.Strip(DataStream, 150))
        End Sub

        Public Function PackTable() As String
            Dim st As String = String.Empty

            st &= Pack.PackString(String.Empty, 12)
            st &= ConTrkDat.PackTable
            st &= Pack.PackString(String.Empty, 230)
            st &= EvtItmItm.PackTable
            Return st
        End Function

        Structure EvtItm
            Dim Rsv700 As String  '12x	Reserved, space filled
            Dim Rsv710 As String '46x	•	Reserved, space filled
            Dim CasTopDat As CustomerTracking.ConEvtDat.CasTopDataStruct
            Dim ChnCnt As Integer
            Dim ChnItm() As CustomerTracking.ConEvtDat.ChnItmStruct
            Dim Rsv720 As String '21x	•	Reserved, space filled
            Dim CasTrgIde As String '4x	•	Triggering party
            Dim ConEvtMsg As CustomerTracking.ConEvtDat.ConEvtMsgStruct 'Varies	Event message data

            Sub ReadTable(ByRef DataStream As String)
                Dim temStr As String
                Dim i As Integer

                Rsv700 = Pack.Strip(DataStream, 6)
                Rsv710 = Pack.Strip(DataStream, 13)
                CasTopDat.ReadTable(Pack.Strip(DataStream, 150))
                ChnCnt = AppInstance.ExInt(Pack.Strip(DataStream, 1))
                temStr = Pack.Strip(DataStream, 128)
                If ChnCnt > 0 Then
                    ReDim ChnItm(ChnCnt - 1)
                    For i = 0 To ChnCnt - 1
                        ChnItm(i).ReadTable(Pack.Strip(temStr, 32))
                    Next
                End If
                Rsv720 = Pack.Strip(DataStream, 21)
                CasTrgIde = Pack.Strip(DataStream, 4)
                ConEvtMsg.ReadTable(DataStream)
            End Sub

            Function PackTable() As String
                Dim st As String = String.Empty
                st &= Pack.PackString(String.Empty, 12) 'Rsv700
                st &= Pack.PackString(String.Empty, 46) 'Rsv710
                st &= CasTopDat.PackTable
                st &= Pack.PackNString(CType(ChnCnt, String), 1)
                For i As Integer = 0 To 3 'ChnCnt - 1
                    st &= ChnItm(i).PackTable()
                Next

                st &= Pack.PackString(String.Empty, 21) 'Rsv720
                st &= Pack.PackString(CasTrgIde, 4)
                st &= ConEvtMsg.PackTable

                Return st

            End Function
        End Structure

        Structure CreateConTrkDat
            Dim CusNum As String        '6n	•	Customer number (or spaces for all)
            Dim Rsv010 As String        '13x	Reserved, space filled
            Dim CasTrgIde As String     '4x	•	Triggering party
            Dim CasCatCde As String     '4x	•	Category code
            Dim Rsv020 As String        '6x	•	Reserved, space filled
            Dim SagTopCde As String     '6x	•	Case topic code
            Dim Rsv030 As String        '4x	•	Reserved, space filled
            Dim SagStaMin As String     '4x	•	Minor status code
            Dim Rsv040 As String        '11x	Reserved, space filled

            Sub ReadTable(ByRef DataStream As String)
                CusNum = Pack.Strip(DataStream, 6)
                Rsv010 = Pack.Strip(DataStream, 13)
                CasTrgIde = Pack.Strip(DataStream, 4)
                CasCatCde = Pack.Strip(DataStream, 4)
                Rsv020 = Pack.Strip(DataStream, 6)
                SagTopCde = Pack.Strip(DataStream, 6)
                Rsv030 = Pack.Strip(DataStream, 4)
                SagStaMin = Pack.Strip(DataStream, 4)
                Rsv040 = Pack.Strip(DataStream, 11)
            End Sub

            Function PackTable() As String
                Dim st As String = String.Empty
                st &= Pack.PackString(CusNum, 6)
                st &= Pack.PackString(String.Empty, 13) 'Rsv010
                st &= Pack.PackString(CasTrgIde, 4)
                st &= Pack.PackString(CasCatCde, 4)
                st &= Pack.PackString(String.Empty, 6) 'Rsv020
                st &= Pack.PackString(SagTopCde, 6)
                st &= Pack.PackString(String.Empty, 4) 'Rsv030
                st &= Pack.PackString(SagStaMin, 4)
                st &= Pack.PackString(String.Empty, 11) 'Rsv040
                Return st

            End Function

        End Structure
    End Structure

    Public Structure CaseCreateMsgResDat
        Dim CasRowVer As String                                         '12x	Table row version of the case
        Dim ConTrkDat As CustomerTracking.CusConTrk.ConTrkDatStruct     '58x	Case tracking data structure
        Dim Rsv100 As String                                            '48x	Reserved, space filled
        Dim ConTrkWho As CustomerTracking.CusConTrk.ConTrkWhoStruct     '72x	Case tracking data structure
        Dim CusNamEng As String
        Dim CusNamAra As String
        Dim Rsv200 As String                                            '40x	Reserved, space filled
        Dim ConEvtDat As CustomerTracking.ConEvtDat                     'Event Data structure + Event message data structure

        Public Sub ReadTable(ByVal DataStream As String)
            CasRowVer = Pack.Strip(DataStream, 12)
            ConTrkDat.ReadTable(Pack.Strip(DataStream, 58))
            Rsv100 = Pack.Strip(DataStream, 48)
            ConTrkWho.ReadTable(Pack.Strip(DataStream, 72))
            CusNamEng = Pack.Strip(DataStream, 35)
            CusNamAra = Pack.Strip(DataStream, 35)
            Rsv200 = Pack.Strip(DataStream, 40)
            ConEvtDat.ReadTable(DataStream)
        End Sub
    End Structure

    Public Function SendMessage_CreateCustomerCases(ByVal pCusReq As CaseCreateMsgReqDat) As String
        Dim st As String = String.Empty

        st &= pCusReq.PackTable()

        Return AppInstance.SendMessageVisuallyEx("616030", st, "CUS", "", "", "")
    End Function

    Public Function GetMessage_CreateCustomerCases(ByVal MsgId As String, ByRef pCreatedCase As CaseCreateMsgResDat) As Boolean
        Dim resp As String = String.Empty
        Dim lCount As Integer
        Dim i As Integer
        Dim Temp As String

        If Not (GetMessage_Common("616030", "", MsgId, &H81000648, resp)) Then Return False
        Try

            AppInstance.strip(resp, 256)

            pCreatedCase.ReadTable(resp)
            Return True

        Catch ex As Exception
            HandleError(&H81000649, "Error:", "Error", ex)
            Return False
        End Try
        Return True

    End Function
End Module

Public Module HRPayrollPosting

    Public Structure SCREC
        Public RecTyp As String ' Detail record identifier value 00, 10 and 90
        Public RecSeq As String ' The record sequence number starts at 000001 (file header) and increments by 1 for every record throughout the file. The sequence in the file trailer record shall be the same as the number of records in the file (including the trailer record).
        Public SalMon As String ' The salary month in the format YYYYMM.
        Public SalRunDte As String ' Salaries run date. This is the date on which the file was generated by HRD system in the format YYYYMMDD
        Public SalValDte As String ' Value date in the format YYYYMMDD
        Public AccNum As String ' The account number of the of the account to be posted.
        Public EmpIdNum As String ' The employee ID number in HRD system
        Public SpnCde As String ' New:Sponser code SAIB/ARSAN
        Public CstCtrCod As String ' The cost centre code
        Public CstCtrNam As String ' Cost centre name
        Public SalItmCod As String ' Salary Item code, This is a code assigned by HRD system to the salary items.
        Public SalItmDsc As String ' Description of the salary component
        Public EmpLvlCod As String ' The employee level
        Public EmpLvlDes As String ' The employee level description
        Public EmpNat As String ' New:Employee Nationlaity
        Public EmpCat As String ' Employee catogary code
        Public PstAmt As String ' Posting amount represented in the lowest currency units (in Halalah)
        Public PstDirCod As String ' Debit/Credit indicator (DR: Debit, CR: Credit)
        '    EmpCat      As String * 50  ' Employee category
        Public PstRecCod As String ' The posting reconciliation code. This is a code used to indicate the level of reconciliation on Equation for the posting.
        Public CrtUsrId As String ' Id for the user generated the file
        Public CrtDte As String ' Creation date
        Public CrtTim As String ' Creation Time
        Public PstUsrId As String ' Id for the user posted the file. This field is populated by the utility which will deliver the file to the QDLS folder and invoke the AS/400 posting programs
        Public PstDte As String ' Posting date This field is populated by the utility which will deliver the file to the QDLS folder and invoke the AS/400 posting programs
        Public PstTim As String ' Posting Time This field is populated by the utility which will deliver the file to the QDLS folder and invoke the AS/400 posting programs
        Public Rsv1 As String ' Reserved for future use (zeros filled)

        Public Sub ReadTable(ByRef DataStream As String)
            RecTyp = Pack.Strip(DataStream, 2)
            RecSeq = Pack.Strip(DataStream, 6)
            SalMon = Pack.Strip(DataStream, 6)
            SalRunDte = Pack.Strip(DataStream, 8)
            SalValDte = Pack.Strip(DataStream, 8)
            AccNum = Pack.Strip(DataStream, 13)
            EmpIdNum = Pack.Strip(DataStream, 4)
            SpnCde = Pack.Strip(DataStream, 5)
            CstCtrCod = Pack.Strip(DataStream, 10)
            CstCtrNam = Pack.Strip(DataStream, 50)
            SalItmCod = Pack.Strip(DataStream, 3)
            SalItmDsc = Pack.Strip(DataStream, 50)
            EmpLvlCod = Pack.Strip(DataStream, 10)
            EmpLvlDes = Pack.Strip(DataStream, 50)
            EmpNat = Pack.Strip(DataStream, 3)
            EmpCat = Pack.Strip(DataStream, 50)
            PstAmt = Pack.Strip(DataStream, 11)
            PstDirCod = Pack.Strip(DataStream, 2)
            PstRecCod = Pack.Strip(DataStream, 6)
            CrtUsrId = Pack.Strip(DataStream, 10)
            CrtDte = Pack.Strip(DataStream, 8)
            CrtTim = Pack.Strip(DataStream, 6)
            PstUsrId = Pack.Strip(DataStream, 10)
            PstDte = Pack.Strip(DataStream, 8)
            PstTim = Pack.Strip(DataStream, 6)
            Rsv1 = Pack.Strip(DataStream, 55)

        End Sub

        Public Function PackTable() As String
            'Dim st As String = String.Empty

            'st &= Pack.PackString(EvtChnTyp, 3)
            'st &= Pack.PackString(EvtChnDir, 3)
            'st &= Pack.PackString(EvtChnIde, 26)
            'Return st

        End Function
    End Structure
    '480950 Inbound Request – Process HRMS files
    'FilDte	8x	File Date format YYYYMMDD	
    'FilTyp	10x	File type
    'DAILY: Daily file
    'MONTHLY: Monthly file	
    'PrcTyp	4x	Process type needed on the file
    'POST: post the file
    'VRFY: verify the file only	
    'TotDebTrx	15n	Total debit transaction amount in currency least unit	
    'TotCreTrx	15n	Total Credit transaction amount in currency least unit	
    'Rsv01	204x	Reserved	
    Public Structure HRPayrollProcess_Struct '0 Msg #480950
        Dim FilDte As String '8x				Desc: File Date format YYYYMMDD	
        Dim FilTyp As String '10x				Desc: File type DAILY: Daily file MONTHLY: Monthly file
        Dim PrcTyp As String '4x				Desc: Process type needed on the file POST: post the file, VRFY: verify the file only	
        Dim TotDebTrx As String '15n				Desc: Total debit transaction amount in currency least unit	
        Dim TotCreTrx As String '15n				Desc: Total Credit transaction amount in currency least unit
        Dim FilCmpCde As String '4x	                Desc: File company code SAIB: SAIB staff EMS  : Insource staff 
        Dim Rsv1 As String '200x				Desc: 204x	Reserved

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(FilDte, 8)
            st &= Pack.PackString(FilTyp, 10)
            st &= Pack.PackString(PrcTyp, 4)
            st &= Pack.PackNString(TotDebTrx, 15)
            st &= Pack.PackNString(TotCreTrx, 15)
            st &= Pack.PackString(FilCmpCde, 4)
            st &= Pack.PackString(Rsv1, 200)

            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            FilDte = Pack.Strip(DataStream, 8)
            FilTyp = Pack.Strip(DataStream, 10)
            PrcTyp = Pack.Strip(DataStream, 4)
            TotDebTrx = Pack.StripN(DataStream, 15)
            TotCreTrx = Pack.StripN(DataStream, 15)
            FilCmpCde = Pack.Strip(DataStream, 4)
            Rsv1 = Pack.Strip(DataStream, 200)

        End Sub

    End Structure



    '480951 Outbound Response – Process HRMS files
    'Field Name	Size	Description	Notes
    'MsgRspHdr	256	Message header (refer to AP0757)	
    'MsgRspDat	512	Message Response Data Area	
    'MsgReqDat	256x	Request data	E
    'Rsv03	256x	•	Reserved, space filled	


    Public Function SendMessage_HRPayrollPost(ByRef HRFile As HRPayrollProcess_Struct) As String
        Dim MsgData As String

        Try
            MsgData = HRFile.PackTable

        Catch ex As Exception
            Return Nothing
        End Try
        Return AppInstance.SendMessageVisuallyEx("480950", MsgData, "GEN", "", "", "")
    End Function

    Public Function GetMessage_HRPayrollPost(ByVal MsgId As String, ByRef HRFile As HRPayrollProcess_Struct) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("480950", "", MsgId, &H81000330, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)

            HRFile.ReadTable(resp)

        Catch ex As Exception
            HandleError(&H81000331, "Error:", "Error", ex)
            Return False
        End Try
        Return True

    End Function

    '480960 Inbound Request – Obtain HRMS File Processing Status
    'Field Name	Size	Description	Notes
    'MsgReqHdr	256	Message header (refer to AP0757)	
    'MsgReqDat	256	Message Response Data Area	
    'FilDte	8x	File Date format YYYYMMDD	
    'FilTyp	10x	File type
    'DAILY: Daily file
    'MONTHLY: Monthly file	
    'Rsv01	238x	Reserved	
    '	512		


    '480961 Outbound Response – Obtain HRMS File Processing Status
    'Field Name	Size	Description	Notes
    'MsgRspHdr	256	Message header (refer to AP0757)	
    'MsgRspDat	512	Message Response Data Area	
    'FilDte	8x	File Date format YYYYMMDD	E
    'FilTyp	10x	File type
    'DAILY: Daily file
    'MONTHLY: Monthly file	E
    'FilPrcSts	4x	File status
    'NFND: file not found in ICS records
    'VRFF: File verifivication failed
    'VRFY: file is verified successfully
    'PSTF: File postimg failed
    'POST: File posted and completed


    Public Structure HRPayrollProcessObtainStatusReq_Struct '0 Msg #480960
        Dim FilDte As String '8x				Desc: File Date format YYYYMMDD	
        Dim FilTyp As String '10x				Desc: File type DAILY: Daily file MONTHLY: Monthly file 
        Dim FilCmpCde As String '4x				Desc: File company code SAIB: SAIB staff EMS  : Insource staff 
        Dim Rsv1 As String '20x				    Desc: 238x	Reserved


        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(FilDte, 8)
            st &= Pack.PackString(FilTyp, 10)
            st &= Pack.PackString(FilCmpCde, 4)
            st &= Pack.PackString(Rsv1, 234)

            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            FilDte = Pack.Strip(DataStream, 8)
            FilTyp = Pack.Strip(DataStream, 10)
            FilCmpCde = Pack.Strip(DataStream, 4)
            Rsv1 = Pack.Strip(DataStream, 234)

        End Sub

    End Structure


    Public Structure HRPayrollProcessObtainStatusRsp_Struct '0 Msg #480950
        Dim FilDte As String '8x				Desc: File Date format YYYYMMDD	
        Dim FilTyp As String '10x				Desc: File type DAILY: Daily file MONTHLY: Monthly file
        Dim FilPrcSts As String  ' 4x             Desc File status
        Dim SalValDte As String '8x				Desc: File value date Spaces if not found
        Dim TotDebTrx As String '15n				Desc: Total debit transaction amount in currency least unit Zero if not found
        Dim TotCreTrx As String '15n				Desc: Total debit transaction amount in currency least unit Zero if not found
        Dim FilRecNum As String ' 9n				Desc: File number of records Or zero if not found
        Dim HstVfyDte As String '8x				Desc: File verification date Or spaces if not found
        Dim HstVfyTim As String '6x				Desc: File verificsation time Or spaces if not found
        Dim HstVfyUsr As String '10x				Desc: File verificsation user Or spaces if not found
        Dim FilVfySts As String '1x				Desc: File verification status  ' ‘ file not found F: Failed S:Succeed
        Dim HstPstDte As String '8				Desc: File posting date Or spaces if not found
        Dim HstPstTim As String '6				Desc: File posting time Or spaces if not found
        Dim HstPstUsr As String '10x				Desc: File posting user Or spaces if not found
        Dim FilPstSts As String '1x				Desc: File posting status         ' ‘ file not found F: Failed S: Succeed
        Dim Rsv03 As String '137x				Desc: 204x	Reserved

        Public Sub ReadTable(ByRef DataStream As String)
            FilDte = Pack.Strip(DataStream, 8)
            FilTyp = Pack.Strip(DataStream, 10)
            FilPrcSts = Pack.Strip(DataStream, 4)
            SalValDte = Pack.Strip(DataStream, 8)
            TotDebTrx = Pack.StripN(DataStream, 15)
            TotCreTrx = Pack.StripN(DataStream, 15)
            FilRecNum = Pack.StripN(DataStream, 9)
            HstVfyDte = Pack.Strip(DataStream, 8)
            HstVfyTim = Pack.Strip(DataStream, 6)
            HstVfyUsr = Pack.Strip(DataStream, 10)
            FilVfySts = Pack.Strip(DataStream, 1)
            HstPstDte = Pack.Strip(DataStream, 8)
            HstPstTim = Pack.Strip(DataStream, 6)
            HstPstUsr = Pack.Strip(DataStream, 10)
            FilPstSts = Pack.Strip(DataStream, 1)
            Rsv03 = Pack.Strip(DataStream, 137)


        End Sub

    End Structure

    Public Function SendMessage_HRPayrollProcessObtainStatus(ByRef HRFile As HRPayrollProcessObtainStatusReq_Struct) As String
        Dim MsgData As String

        Try
            MsgData = HRFile.PackTable

        Catch ex As Exception
            Return Nothing
        End Try
        Return AppInstance.SendMessageVisuallyEx("480960", MsgData, "GEN", "", "", "")
    End Function

    Public Function GetMessage_HRPayrollProcessObtainStatus(ByVal MsgId As String, ByRef HRFile As HRPayrollProcessObtainStatusRsp_Struct) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("480960", "", MsgId, &H81000330, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)

            HRFile.ReadTable(resp)

        Catch ex As Exception
            HandleError(&H81000331, "Error:", "Error", ex)
            Return False
        End Try
        Return True

    End Function


End Module

'''Calling Messages: 990490
Public Structure Enumerate_Loan_Prf_Struct '00x, App #AP0761-407, Msg #990490
    Dim s As String

    '''Description: This message obtains a list of Equation Loan Status (Performance) Codes from the core system. The table is under CstVerTab control.
    Public Function SendMessage_Enumerate_Loan_Prf(ByVal p_Struct As Enumerate_Loan_Prf_Struct) As String

        'App #AP0761
        Return AppInstance.SendMessageVisuallyEx("990490", "", "GEN", "", "", "")
    End Function

End Structure

'''Calling Messages: 990490
Public Structure Enumerate_Loan_Prf_Rsp_Struct '00x, App #AP0761-407, Msg #990490
    Dim Rsv100 As String '14x				Desc: Reserved, space filled
    Dim PrfItmCnt As String '2n				Desc: Number of codes (items) returned [j]
    Dim PrfItm() As Enumerate_Loan_Prf_Itm_Struct '48 * 				Desc:This message obtains a list of Equation Loan Status (Performance) Codes from the core system. The table is under CstVerTab control.

    Public Function PackTable() As String
        Dim st As String = String.Empty
        st &= Pack.PackNString(Rsv100, 14)
        st &= Pack.PackNString(PrfItmCnt, 2)
        For ind As Integer = 0 To CInt(PrfItmCnt) - 1 : st &= PrfItm(ind).PackTable() : Next '48x
        Return st
    End Function

    Public Sub ReadTable(ByRef DataStream As String)
        Rsv100 = Pack.Strip(DataStream, 14)
        PrfItmCnt = Pack.Strip(DataStream, 2)
        ReDim PrfItm(CInt(PrfItmCnt) - 1)
        For ind As Integer = 0 To CInt(PrfItmCnt) - 1 : PrfItm(ind).ReadTable(DataStream) : Next '48x
    End Sub

    Public Sub Clear()
        PrfItmCnt = String.Empty
        PrfItm = Nothing
    End Sub

    Public Function GetMessage_Enumerate_Loan_Prf_Rsp(ByVal MsgId As String, ByRef MsgRspDat As Enumerate_Loan_Prf_Rsp_Struct) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("990490", New StackFrame().GetMethod.Name, MsgId, &H80099999, resp)) Then Return False
        Try

            AppInstance.strip(resp, 256)
            MsgRspDat.ReadTable(resp) '0x

        Catch ex As Exception
            HandleError(&H80099999, New StackFrame().GetMethod.Name & ":" & ex.Message)
            Return False
        End Try
        Return True

    End Function

    Public Function GetMessage_Enumerate_Loan_Prf_Codes_Rsp(ByVal MsgId As String, ByRef mADO As AdoAccess) As Boolean
        Dim oRsp As Enumerate_Loan_Prf_Rsp_Struct
        Const C_Table As String = "EqnLoaPrf"

        If Not oRsp.GetMessage_Enumerate_Loan_Prf_Rsp(MsgId, oRsp) Then Return False

        Try
            If oRsp.PrfItm.Length <= 0 Then
                Erase LoaPrfTable.PrfItm
                mADO.DeleteTable(C_Table)
                Return True
            End If

            LoaPrfTable = oRsp

            Dim sColumns As String = "TabRowVer, PrfCde, PrfDay, PrfTxtEng, PrfTxtAra, NonAcc"
            Dim sValues As String = ""

            mADO.DeleteTable(C_Table)
            For i As Integer = 0 To LoaPrfTable.PrfItm.Length - 1
                With LoaPrfTable.PrfItm(i)
                    sValues = "Values('" & SQLOleDB.fixSQL(.TabRowVer) & "','" & SQLOleDB.fixSQL(.PrfCde) & "','" & SQLOleDB.fixSQL(.PrfDay) & "','" & _
                                            SQLOleDB.fixSQL(.PrfTxtEng) & "','" & SQLOleDB.fixSQL(.PrfTxtAra) & "','" & _
                                            SQLOleDB.fixSQL(.NonAcc) & "')"

                    mADO.AddRowToTable(C_Table, sColumns, sValues)
                End With
            Next

        Catch ex As Exception
            HandleError(&H81000644, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

End Structure

'''Calling Messages: 990490
Public Structure Enumerate_Loan_Prf_Itm_Struct '48x, App #AP0761-407, Msg #990490
    Dim TabRowVer As String '12n				Desc: Table row version
    Dim PrfCde As String '2x				    Desc: Loan status (performance) code
    Dim PrfDay As String '3x				    Desc: Days overdue
    Dim PrfTxtEng As String '15x				Desc: Code description English[1]
    Dim PrfTxtAra As String '15x				Desc: Code description Arabic[2]
    Dim NonAcc As String '1x				    Desc: Flag (Y/N) indicating non-accrual

    Public Function PackTable() As String
        Dim st As String = String.Empty
        st &= Pack.PackNString(TabRowVer, 12)
        st &= Pack.PackString(PrfCde, 2)
        st &= Pack.PackString(PrfDay, 3)
        st &= Pack.PackString(PrfTxtEng, 15)
        st &= Pack.PackString(PrfTxtAra, 15)
        st &= Pack.PackString(NonAcc, 1)

        Return st
    End Function

    Public Sub ReadTable(ByRef DataStream As String)
        TabRowVer = Pack.Strip(DataStream, 12)
        PrfCde = Pack.Strip(DataStream, 2)
        PrfDay = Pack.Strip(DataStream, 3)
        PrfTxtEng = Pack.Strip(DataStream, 15)
        PrfTxtAra = Pack.Strip(DataStream, 15)
        NonAcc = Pack.Strip(DataStream, 1)
    End Sub

    Public Sub Clear()
        TabRowVer = String.Empty
        PrfCde = String.Empty
        PrfDay = String.Empty
        PrfTxtEng = String.Empty
        PrfTxtAra = String.Empty
        NonAcc = String.Empty
    End Sub

End Structure

'''Knowen Calling Messages: 990470
Public Structure Enumerate_ON2_Product_Codes_Struct '00x, App #AP0761-354, Msg #990470
    Dim s As String

    '''Description: This message obtains a list of ON/2 product codes and their properties. It is used by the ICe system during card issuance. The table is under CstVerTab control.
    Public Function SendMessage_Enumerate_ON2_Product_Codes(ByVal p_Struct As Enumerate_ON2_Product_Codes_Struct) As String

        'App #AP0761
        Return AppInstance.SendMessageVisuallyEx("990470", "", "GEN", "", "", "")
    End Function

End Structure

'''Knowen Calling Messages: 990470
Public Structure Enumerate_ON2_Product_Codes_Rsp_Struct '00x, App #AP0761-354, Msg #990470
    Dim On2ItmCnt As String '4n				Desc: Number of codes (items) returned [j]
    Dim On2Itm() As Enumerate_ON2_Product_Codes_On2Itm_Struct '82 * On2ItmCnt				Desc:This message obtains a list of ON/2 product codes and their properties. It is used by the ICe system during card issuance. The table is under CstVerTab control

    Public Function PackTable() As String
        Dim st As String = String.Empty
        st &= Pack.PackNString(On2ItmCnt, 4)
        For ind As Integer = 0 To CInt(On2ItmCnt) - 1 : st &= On2Itm(ind).PackTable() : Next '82x
        Return st
    End Function

    Public Sub ReadTable(ByRef DataStream As String)
        On2ItmCnt = Pack.Strip(DataStream, 4)
        ReDim On2Itm(CInt(On2ItmCnt) - 1)
        For ind As Integer = 0 To CInt(On2ItmCnt) - 1 : On2Itm(ind).ReadTable(DataStream) : Next '82x
    End Sub

    Public Sub Clear()
        On2ItmCnt = String.Empty
        On2Itm = Nothing
    End Sub

    '''Description: This message obtains a list of ON/2 product codes and their properties. It is used by the ICe system during card issuance. The table is under CstVerTab control.
    Public Function GetMessage_Enumerate_ON2_Product_Codes_Rsp(ByVal MsgId As String, ByRef MsgRspDat As Enumerate_ON2_Product_Codes_Rsp_Struct) As Boolean
        Dim resp As String = String.Empty

        'App #AP0761-354
        If Not (GetMessage_Common("990470", New StackFrame().GetMethod.Name, MsgId, &H80099999, resp)) Then Return False
        Try

            AppInstance.strip(resp, 256)
            MsgRspDat.ReadTable(resp) '0x

        Catch ex As Exception
            HandleError(&H80099999, New StackFrame().GetMethod.Name & ":" & ex.Message)
            Return False
        End Try
        Return True

    End Function

    ''' -----------------------------------------------------------------------------
    ''' <summary>
    ''' Enumerate Case system codes (get message)
    ''' </summary>
    ''' <returns></returns>
    ''' <remarks>
    ''' </remarks>
    ''' <history>
    ''' 	[Y309abso]	20/05/2009	Created
    ''' </history>
    ''' -----------------------------------------------------------------------------
    Public Function GetMessage_Enumerate_ON2_Product_Codes_Rsp(ByVal MsgId As String, ByRef mADO As AdoAccess) As Boolean
        Dim oRsp As Enumerate_ON2_Product_Codes_Rsp_Struct
        Const C_Table As String = "On2PrdTab"

        If Not oRsp.GetMessage_Enumerate_ON2_Product_Codes_Rsp(MsgId, oRsp) Then Return False

        Try
            If oRsp.On2Itm.Length <= 0 Then
                '''HandleError(&H80002051, SIBL0100.Util.Debug.getStackFrame(New StackTrace(True).GetFrame(0)) & ": No data received", "ICE Communications")
                '''Return False
                Erase On2PrdTable.On2Itm
                mADO.DeleteTable(C_Table)
                Return True
            End If

            'ReDim On2PrdTable.On2Itm(oRsp.On2Itm.Length - 1)
            On2PrdTable = oRsp

            Dim sColumns As String = "TabRowVer, On2PrdCde, On2PrdNam, On2PrdTek, On2PrdLif, IssEmp, IssCus, On2BegDte, On2EndDte"
            Dim sValues As String = ""

            mADO.DeleteTable(C_Table)
            For i As Integer = 0 To On2PrdTable.On2Itm.Length - 1
                With On2PrdTable.On2Itm(i)
                    sValues = "Values('" & SQLOleDB.fixSQL(.TabRowVer) & "','" & SQLOleDB.fixSQL(.On2PrdCde) & "','" & SQLOleDB.fixSQL(.On2PrdNam) & "','" & _
                                            SQLOleDB.fixSQL(.On2PrdTek) & "','" & SQLOleDB.fixSQL(.On2PrdLif) & "','" & _
                                            SQLOleDB.fixSQL(.IssEmp) & "','" & SQLOleDB.fixSQL(.IssCus) & "','" & _
                                            SQLOleDB.fixSQL(.On2BegDte) & "','" & SQLOleDB.fixSQL(.On2EndDte) & "')"

                    mADO.AddRowToTable(C_Table, sColumns, sValues)
                End With
            Next

        Catch ex As Exception
            HandleError(&H81000644, "Error:", "Error", ex)
            Return False
        End Try
        Return True
    End Function

End Structure

'''Knowen Calling Messages: 990470
Public Structure Enumerate_ON2_Product_Codes_On2Itm_Struct '82x, App #AP0761-354, Msg #990470
    Dim TabRowVer As String '12n				Desc: Table row version
    Dim On2PrdCde As String '4x				Desc: Product code
    Dim On2PrdNam As String '30x				Desc: Product name (English only)
    Dim On2PrdTek As String '1x				Desc: Technology (M=Magnetic, C=Chip)
    Dim On2PrdLif As String '2x				Desc: Life in months

    'Dim On2PrdRes As String '10x				Desc: Restrictions (space filled) for future use
    Dim IssEmp As String    '1x		        Flag (Y or space/N) issue to employees
    Dim IssCus As String    '1x		        Flag (Y or space/N) issue to customers
    Dim Rsv090 As String    '8x		        Reserved, space filled

    Dim On2BegDte As String '8x				Desc: Allowed to be issued from date (YYYYMMDD) or spaces
    Dim On2EndDte As String '8x				Desc: Stop issuance from date (YYYYMMDD) or spaces
    Dim Rsv100 As String '25x				Desc: Reserved, space filled

    Public Function PackTable() As String
        Dim st As String = String.Empty
        st &= Pack.PackNString(TabRowVer, 12)
        st &= Pack.PackString(On2PrdCde, 4)
        st &= Pack.PackString(On2PrdNam, 30)
        st &= Pack.PackString(On2PrdTek, 1)
        st &= Pack.PackString(On2PrdLif, 2)

        st &= Pack.PackString(IssEmp, 1)
        st &= Pack.PackString(IssCus, 1)
        st &= Pack.PackString(Rsv090, 8)

        st &= Pack.PackDate(On2BegDte)
        st &= Pack.PackDate(On2EndDte)
        st &= Pack.PackString(Rsv100, 25)
        Return st
    End Function

    Public Sub ReadTable(ByRef DataStream As String)
        TabRowVer = Pack.Strip(DataStream, 12)
        On2PrdCde = Pack.Strip(DataStream, 4)
        On2PrdNam = Pack.Strip(DataStream, 30)
        On2PrdTek = Pack.Strip(DataStream, 1)
        On2PrdLif = Pack.Strip(DataStream, 2)

        IssEmp = Pack.Strip(DataStream, 1)
        IssCus = Pack.Strip(DataStream, 1)
        Rsv090 = Pack.Strip(DataStream, 8)

        On2BegDte = Pack.Strip(DataStream, 8)
        On2EndDte = Pack.Strip(DataStream, 8)
        Rsv100 = Pack.Strip(DataStream, 25)
    End Sub

    Public Sub Clear()
        TabRowVer = String.Empty
        On2PrdCde = String.Empty
        On2PrdNam = String.Empty
        On2PrdTek = String.Empty
        On2PrdLif = String.Empty

        IssEmp = String.Empty
        IssCus = String.Empty
        Rsv090 = String.Empty

        On2BegDte = String.Empty
        On2EndDte = String.Empty
        Rsv100 = String.Empty
    End Sub

End Structure

'------------------------------------------------------------------------------------------------

''' -----------------------------------------------------------------------------
''' <summary>
''' module for MQ messages related to CMR
''' </summary>
''' <remarks>
''' </remarks>
''' <history>
''' 	[Y309abso]	26/12/2009	Created
''' </history>
''' -----------------------------------------------------------------------------
Public Module CMR

    Public Structure CmrPayDatStruct 'PayCmrStp	56	CMR payment data

        Dim PayCapSer As String '16x	Capture station reference (payment)
        Dim PayCmrSer As String '12x	CMR central reference (payment)
        Dim PayEqnDte As String '8x	    Equation date of payment (YYYYMMDD)
        Dim PayTrmIde As String '10x	Terminal identity for payment
        Dim PayUsrIde As String '10x	User making payment

        Public Function PackTable() As String
            Dim st As String = String.Empty

            st &= Pack.PackString(PayCapSer, 16)
            st &= Pack.PackString(PayCmrSer, 12)
            st &= Pack.PackString(PayEqnDte, 8)
            st &= Pack.PackString(PayTrmIde, 10)
            st &= Pack.PackString(PayUsrIde, 10)

            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            PayCapSer = Pack.Strip(DataStream, 16)
            PayCmrSer = Pack.Strip(DataStream, 12)
            PayEqnDte = Pack.Strip(DataStream, 8)
            PayTrmIde = Pack.Strip(DataStream, 10)
            PayUsrIde = Pack.Strip(DataStream, 10)

        End Sub

        Public Sub Clear()
            PayCapSer = String.Empty
            PayCmrSer = String.Empty
            PayEqnDte = String.Empty
            PayTrmIde = String.Empty
            PayUsrIde = String.Empty

        End Sub

    End Structure

    Public Structure CmrRevDatStruct ' RevCmrStp	56	CMR reversal data

        Dim RevCapSer As String ' 16x	Capture station reference (reversal) or spaces
        Dim RevCmrSer As String ' 12x	CMR central reference (reversal)
        Dim RevEqnDte As String ' 8x	Equation date of reversal (YYYYMMDD)
        Dim RevTrmIde As String ' 10x	Terminal identity for reversal
        Dim RevUsrIde As String ' 10x	User making reversal

        Public Function PackTable() As String
            Dim st As String = String.Empty

            st &= Pack.PackString(RevCapSer, 16)
            st &= Pack.PackString(RevCmrSer, 12)
            st &= Pack.PackString(RevEqnDte, 8)
            st &= Pack.PackString(RevTrmIde, 10)
            st &= Pack.PackString(RevUsrIde, 10)

            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            RevCapSer = Pack.Strip(DataStream, 16)
            RevCmrSer = Pack.Strip(DataStream, 12)
            RevEqnDte = Pack.Strip(DataStream, 8)
            RevTrmIde = Pack.Strip(DataStream, 10)
            RevUsrIde = Pack.Strip(DataStream, 10)

        End Sub

        Public Sub Clear()
            RevCapSer = String.Empty
            RevCmrSer = String.Empty
            RevEqnDte = String.Empty
            RevTrmIde = String.Empty
            RevUsrIde = String.Empty

        End Sub
    End Structure

    Public Structure CmrPayDat
        Dim CmrPayTyp As String             ' 2x	Type of payment
        Dim SibChqNum As String             ' 6x	SAIB cheque or draft number
        Dim DebAccNum As String             ' 13x	Account number to be debited (or spaces)
        Dim PayNam As String                ' 35x	Name of cardholder when known or spaces
        Dim DssPan As String                ' 19x	Obliterated PAN value
        Dim PayCmrStp As CmrPayDatStruct    ' 56	CMR payment data
        Dim RevCmrStp As CmrRevDatStruct       ' 56	CMR reversal data

        Public Function PackTable() As String
            Dim st As String = String.Empty

            st &= Pack.PackString(CmrPayTyp, 2)
            st &= Pack.PackString(SibChqNum, 6)
            st &= Pack.PackString(DebAccNum, 13)
            st &= Pack.PackString(PayNam, 35)
            st &= Pack.PackString(DssPan, 19)
            st &= PayCmrStp.PackTable()
            st &= RevCmrStp.PackTable()
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            CmrPayTyp = Pack.Strip(DataStream, 2)
            SibChqNum = Pack.Strip(DataStream, 6)
            DebAccNum = Pack.Strip(DataStream, 13)
            PayNam = Pack.Strip(DataStream, 35)
            DssPan = Pack.Strip(DataStream, 19)
            PayCmrStp.ReadTable(DataStream)
            RevCmrStp.ReadTable(DataStream)
        End Sub

        Public Sub Clear()
            CmrPayTyp = String.Empty
            SibChqNum = String.Empty
            DebAccNum = String.Empty
            PayNam = String.Empty
            DssPan = String.Empty
            PayCmrStp.Clear()
            RevCmrStp.Clear()
        End Sub
    End Structure

    Public Structure Enquire_Amex_BIN_Struct
        Dim CusNum As String '6x	Customer number or spaces
        Dim Rsv1 As String   '12x	Reserved, space filled
        Dim DssPan As String '19x	Obliterated PAN value
        Dim Rsv140 As String '61x	Reserved, space filled

        Public Function PackTable() As String
            Dim st As String = String.Empty

            st &= Pack.PackString(CusNum, 6)
            st &= Pack.PackString(String.Empty, 12)
            st &= Pack.PackString(DssPan, 19)
            st &= Pack.PackString(String.Empty, 61)

            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            CusNum = Pack.Strip(DataStream, 2)
            Rsv1 = Pack.Strip(DataStream, 12)
            DssPan = Pack.Strip(DataStream, 19)
            Rsv140 = Pack.Strip(DataStream, 61)

        End Sub
    End Structure

    Public Structure Enquire_Amex_BIN_Rsp_Struct
        Dim IsoBinSze As String '1x	Size of the BIN number (4 or 6)
        Dim IsoBinCde As String '6x	The BIN number
        Dim BinPrtCde As String '4x	The partner code for this BIN (for decoding see AmxPrtCde)
        Dim BinBilCcy As String '3x	The billing currency for the BIN
        Dim SibCcyCnt As String '1n	Number of acceptable payment currencies (up to 3)
        Dim SibCcy() As String '3*3x	Three bank acceptable payment currencies or space
        Dim CrdSchCde As String '4x	Card scheme code
        Dim SibCmrFlg As String '1x	Flag (Y/N) indicating supported by CMR
        Dim SibCmrFee As String '5n	CMR fee in SAR (lowest currency units)
        Dim SibAmtFlg As String '1x	Flag (Y/N) indicating that billing amounts and date are present
        Dim CmrAmtDue As String '13n	Billed amount
        Dim CmrAmtMin As String '13n	Minimum payment amount
        Dim CmrDteDue As String '8x	Payment due date (format YYYYMMDD)
        Dim Rsv200 As String    '31x	Reserved, space filled.

        Public Sub ReadTable(ByRef DataStream As String)
            Dim i As Integer

            IsoBinSze = Pack.Strip(DataStream, 1)
            IsoBinCde = Pack.Strip(DataStream, 6)
            BinPrtCde = Pack.Strip(DataStream, 4)
            BinBilCcy = Pack.Strip(DataStream, 3)

            SibCcyCnt = Pack.Strip(DataStream, 1)
            ReDim SibCcy(2)
            For i = 0 To 2
                SibCcy(i) = Pack.Strip(DataStream, 3)
            Next
            CrdSchCde = Pack.Strip(DataStream, 4)
            SibCmrFlg = Pack.Strip(DataStream, 1)
            SibCmrFee = Pack.Strip(DataStream, 5)
            SibAmtFlg = Pack.Strip(DataStream, 1)
            CmrAmtDue = Pack.Strip(DataStream, 13)
            CmrAmtMin = Pack.Strip(DataStream, 13)
            CmrDteDue = Pack.Strip(DataStream, 8)
            Rsv200 = Pack.Strip(DataStream, 31)

        End Sub

    End Structure
    '600080 - Request  Enquire Amex (BIN)ISO BIN Billing Information
    '''Description: This message allows the channel to request billing information for any ISO or American Express BIN (obliterated card) known to the central ICS BIN tables.
    Public Function SendMessage_Enquire_Amex_BIN(ByVal p_Struct As Enquire_Amex_BIN_Struct) As String

        'App #AP1141
        Dim st As String
        st = p_Struct.PackTable
        Return AppInstance.SendMessageVisuallyEx("600080", st, "GEN", "", "", "")

    End Function

    Public Function GetMessage_Enquire_Amex_BIN(ByVal MsgId As String, ByRef p_Struct As Enquire_Amex_BIN_Rsp_Struct) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("600080", New StackFrame().GetMethod.Name, MsgId, &H80099999, resp)) Then Return False
        Try

            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 100) 'Echoed data
            p_Struct.ReadTable(resp) '0x

        Catch ex As Exception
            HandleError(&H80099999, New StackFrame().GetMethod.Name & ":" & ex.Message)
            Return False
        End Try
        Return True
    End Function
    '''Description: Channels issue this message to notify the host that an Amex cardmember payment is being made and to register the payment within the host-based CMR tables
    Public Function SendMessage_Amex_Payment(ByVal p_Struct As Enquire_Amex_BIN_Struct) As String

        'App #AP1141
        Dim st As String
        st = p_Struct.PackTable
        Return AppInstance.SendMessageVisuallyEx("600090", st, "GEN", "", "", "")

    End Function

    Public Function GetMessage_Amex_Payment(ByVal MsgId As String, ByRef p_Struct As Enquire_Amex_BIN_Rsp_Struct) As Boolean
        Dim resp As String = String.Empty

        If Not (GetMessage_Common("600090", New StackFrame().GetMethod.Name, MsgId, &H80099999, resp)) Then Return False
        Try

            AppInstance.strip(resp, 256)
            AppInstance.strip(resp, 100) 'Echoed data
            p_Struct.ReadTable(resp) '0x

        Catch ex As Exception
            HandleError(&H80099999, New StackFrame().GetMethod.Name & ":" & ex.Message)
            Return False
        End Try
        Return True
    End Function

End Module

'''Knowen Calling Messages: 910280
Public Structure ExtendedEnumerateInterfaceResultCodes_Rsp_Struct '292x, App #AP0761, Msg #910280
    Dim MsgReqDat As ExtendedEnumerateInterfaceResultCodes_Struct '16				Desc:This is the extended version (910280) of the standard message (910080) that provides a response message with longer reason code text. The message allows the request to be broken up into multiple returns by allowing the starting point and the maximum 
    Dim IntResCnt As String '4n				Desc: Number of string items being returned
    Dim MorResFlg As String '1x				Desc: Flag (Y/N) indicating if there are more results not yet returned
    Dim MorResCde As String '3x				Desc: Code of the next result code that follows those being returned
    Dim Rsv1 As String '8x				Desc: Reserved, space filled
    Dim ReaStrLen As String '5n				Desc: The overall number of bytes in the following reason text strings
    Dim ReaStrVar() As ExtendedEnumerateInterfaceResultCodes_ReaStrVar_Struct '262 * ReaStrLen				Desc:Response messages cobntain variable length strings (ReaStrVar) consisting of a reason code and a language code followed by a 3-byte length field (count of the number of bytes in the text that follows), and finally followd by the reason text itself.


    Public Function PackTable() As String
        Dim st As String = String.Empty
        st &= MsgReqDat.PackTable() '16x
        st &= Pack.PackNString(IntResCnt, 4)
        st &= Pack.PackString(MorResFlg, 1)
        st &= Pack.PackString(MorResCde, 3)
        st &= Pack.PackString(Rsv1, 8)
        st &= Pack.PackNString(ReaStrLen, 5)
        For ind As Integer = 0 To CInt(IntResCnt) - 1 : st &= ReaStrVar(ind).PackTable() : Next '262x
        Return st
    End Function

    Public Sub ReadTable(ByRef DataStream As String)
        MsgReqDat.ReadTable(DataStream) '16x
        IntResCnt = Pack.StripN(DataStream, 4)
        MorResFlg = Pack.Strip(DataStream, 1)
        MorResCde = Pack.Strip(DataStream, 3)
        Rsv1 = Pack.Strip(DataStream, 8)
        ReaStrLen = Pack.StripN(DataStream, 5)
        ReDim ReaStrVar(CInt(IntResCnt) - 1)
        For ind As Integer = 0 To CInt(IntResCnt) - 1 : ReaStrVar(ind).ReadTable(DataStream) : Next '262x
    End Sub

    Public Sub Clear()
        MsgReqDat.Clear()
        IntResCnt = String.Empty
        MorResFlg = String.Empty
        MorResCde = String.Empty
        Rsv1 = String.Empty
        ReaStrLen = String.Empty
        ReaStrVar = Nothing
    End Sub

    Public Function GetMessage_ExtendedEnumerateInterfaceResultCodes_Rsp(ByVal MsgId As String, ByRef MsgRspDat As ExtendedEnumerateInterfaceResultCodes_Rsp_Struct, ByRef mADO As AdoAccess) As Boolean
        Dim resp As String = String.Empty
        Dim i, count As Integer
        Dim verRec As CoreSys_VerItm
        Dim mdbTableName As String

        mdbTableName = "IntResCde"

        MsgRspDat.Clear()

        If Not (GetMessage_Common("910280", New StackFrame().GetMethod.Name, MsgId, &H80099999, resp)) Then Return False
        Try
            AppInstance.strip(resp, 256)
            MsgRspDat.ReadTable(resp) '0x

            count = CInt(MsgRspDat.IntResCnt)
            If count <= 0 Then
                Return True
            End If

            For i = 0 To MsgRspDat.ReaStrVar.Length - 1
                With MsgRspDat.ReaStrVar(i)
                    mADO.AddRowToTable(mdbTableName, "ReaCde, ReaLng, ReaLen, ReaTxt" _
                         , "Values('" & SQLOleDB.fixSQL(.ReaCde) & "','" & SQLOleDB.fixSQL(.ReaLng) & "','" & SQLOleDB.fixSQL(.ReaLen) & "','" & _
                                       SQLOleDB.fixSQL(.ReaTxt) & "')")
                End With
            Next
        Catch ex As Exception
            HandleError(&H81000775, "Error:" & vbCrLf & ex.Message, "Error", ex)
            Return False
        End Try
        Return True
    End Function

    '''App # AP0761: Msg# 9102801
    '''Description: Response messages cobntain variable length strings (ReaStrVar) consisting of a reason code and a language code followed by a 3-byte length field (count of the number of bytes in the text that follows), and finally followd by the reason text itself.
    Public Function GetMessage_ExtendedEnumerateInterfaceResultCodes_Rsp(ByVal MsgId As String, ByRef MsgRspDat As ExtendedEnumerateInterfaceResultCodes_Rsp_Struct) As Boolean
        Dim resp As String = String.Empty

        'App #AP0761
        If Not (GetMessage_Common("910280", New StackFrame().GetMethod.Name, MsgId, &H80099999, resp)) Then Return False
        Try

            AppInstance.strip(resp, 256)
            MsgRspDat.ReadTable(resp) '292x

        Catch ex As Exception
            HandleError(&H80099999, New StackFrame().GetMethod.Name & ":" & ex.Message, , ex)
            Return False
        End Try
        Return True

    End Function


End Structure

'''Knowen Calling Messages: 910280
Public Structure ExtendedEnumerateInterfaceResultCodes_Struct '16x, App #AP0761, Msg #910280
    Dim ReqBeg As String '3x				Desc: Starting code value to return or spaces for from the beginning
    Dim ReqCnt As String '4n				Desc: Number of string items to be returned in the response
    Dim Rsv10 As String '9x				Desc: Reserved, space filled

    Public Function PackTable() As String
        Dim st As String = String.Empty
        st &= Pack.PackString(ReqBeg, 3)
        st &= Pack.PackNString(ReqCnt, 4)
        st &= Pack.PackString(Rsv10, 9)
        Return st
    End Function

    Public Sub ReadTable(ByRef DataStream As String)
        ReqBeg = Pack.Strip(DataStream, 3)
        ReqCnt = Pack.StripN(DataStream, 4)
        Rsv10 = Pack.Strip(DataStream, 9)
    End Sub

    Public Sub Clear()
        ReqBeg = String.Empty
        ReqCnt = String.Empty
        Rsv10 = String.Empty
    End Sub

    '''App # AP0761: Msg# 910280
    '''Description: This is the extended version (910280) of the standard message (910080) that provides a response message with longer reason code text. The message allows the request to be broken up into multiple returns by allowing the starting point and the maximum 
    Public Sub ExtendedEnumerateInterfaceResultCodes_All(ByRef mADO As AdoAccess)
        Dim msgID As String = String.Empty
        Dim oSend As ExtendedEnumerateInterfaceResultCodes_Struct
        Dim oResult As ExtendedEnumerateInterfaceResultCodes_Rsp_Struct

        ResultCodesTable = Nothing
        mADO.DeleteTable("IntResCde")
        With oSend
            .ReqBeg = String.Empty
            .ReqCnt = "0500"
        End With

        oResult.MorResFlg = "Y"
        Dim NewLen As Integer = 0
        While oResult.MorResFlg = "Y"
            oResult.Clear()
            msgID = SendMessage_ExtendedEnumerateInterfaceResultCodes(oSend)
            If IsValidMid(msgID) Then
                If oResult.GetMessage_ExtendedEnumerateInterfaceResultCodes_Rsp(msgID, oResult, mADO) Then
                    If oResult.ReaStrVar.Length > 0 Then
                        Dim iInd As Integer = NewLen
                        NewLen += oResult.ReaStrVar.Length
                        ReDim Preserve ResultCodesTable(NewLen - 1)
                        For i As Integer = iInd To NewLen - 1
                            ResultCodesTable(i) = oResult.ReaStrVar(i - iInd)
                        Next
                    End If
                End If
            End If
            oSend.ReqBeg = oResult.MorResCde
        End While


        'msgID = SendMessage_ExtendedEnumerateInterfaceResultCodes(oSend)
        'If IsValidMid(msgID) Then
        '    If oResult.GetMessage_ExtendedEnumerateInterfaceResultCodes_Rsp(msgID, oResult, mADO) Then
        '        ResultCodesTable = oResult.ReaStrVar
        '        While nz(oResult.MorResFlg) = "Y"
        '            With oSend
        '                .ReqBeg = oResult.MorResCde
        '                .ReqCnt = "0500"
        '            End With

        '            oResult.Clear()
        '            msgID = SendMessage_ExtendedEnumerateInterfaceResultCodes(oSend)
        '            If IsValidMid(msgID) Then
        '                If oResult.GetMessage_ExtendedEnumerateInterfaceResultCodes_Rsp(msgID, oResult, mADO) Then
        '                    If oResult.ReaStrVar.Length > 0 Then
        '                        Dim iInd As Integer = 0
        '                        iInd = ResultCodesTable.Length
        '                        ReDim Preserve ResultCodesTable(ResultCodesTable.Length + oResult.ReaStrVar.Length - 1)
        '                        For i As Integer = iInd To ResultCodesTable.Length - 1
        '                            ResultCodesTable(i) = oResult.ReaStrVar(i - iInd)
        '                        Next
        '                    End If
        '                End If
        '            End If
        '        End While
        '    End If
        'Else
        '    '

        'End If

        Build_ResCdeTable()
    End Sub

    Public Sub Build_ResCdeTable()
        ResCdeTable = Nothing
        Dim oList As New SortedList

        For i As Integer = 0 To ResultCodesTable.Length - 1
            Dim oResCde As CoreSys_ResCde
            If oList.Contains(ResultCodesTable(i).ReaCde) Then
                oResCde = DirectCast(oList.Item(ResultCodesTable(i).ReaCde), CoreSys_ResCde)
            Else
                oResCde.Clear()
            End If

            oResCde.IntResCde = ResultCodesTable(i).ReaCde
            oResCde.Rsv = String.Empty
            If ResultCodesTable(i).ReaLng = "E" Then
                With oResCde
                    .IntResEng = ResultCodesTable(i).ReaTxt
                    'Format string for proper handling of (")
                    .IntResEng = .IntResEng.Replace("""", """""")
                End With
            Else
                With oResCde
                    .IntResAra = ResultCodesTable(i).ReaTxt
                    'Format string for proper handling of (")
                    .IntResAra = .IntResAra.Replace("""", """""")
                End With
            End If
            oList.Item(ResultCodesTable(i).ReaCde) = oResCde
        Next

        ReDim ResCdeTable(oList.Count - 1)

        For iInd As Integer = 0 To oList.Count - 1
            ResCdeTable(iInd) = DirectCast(oList.GetByIndex(iInd), CoreSys_ResCde)
        Next
    End Sub

    Public Function readFromDBTable(ByVal ADO As AdoAccess, ByVal ds As DataSet) As Boolean
        Try

            ADO.ReadTable("IntResCde", ds)
            ResultCodesTable = Nothing
            ReDim ResultCodesTable(ds.Tables(0).Rows.Count - 1)
            For i As Integer = 0 To ds.Tables(0).Rows.Count - 1
                With ResultCodesTable(i)
                    .ReaCde = SQLOleDB.DBCStr(ds.Tables(0).Rows(i).Item("ReaCde"))
                    .ReaLen = SQLOleDB.DBCStr(ds.Tables(0).Rows(i).Item("ReaLen"))
                    .ReaLng = SQLOleDB.DBCStr(ds.Tables(0).Rows(i).Item("ReaLng"))
                    .ReaTxt = SQLOleDB.DBCStr(ds.Tables(0).Rows(i).Item("ReaTxt"))
                End With
            Next

            Build_ResCdeTable()
        Catch ex As Exception
            HandleError(&H80002088, "ICE cannot continue. Ice couldn't load IntResCde table! (" & ex.Message & ")", "Loading Databases")
            Return False
        End Try
        Return True
    End Function
    '''App # AP0761: Msg# 910280
    '''Description: This is the extended version (910280) of the standard message (910080) that provides a response message with longer reason code text. The message allows the request to be broken up into multiple returns by allowing the starting point and the maximum 
    Public Function SendMessage_ExtendedEnumerateInterfaceResultCodes(ByVal p_Struct As ExtendedEnumerateInterfaceResultCodes_Struct) As String

        Dim st As String = String.Empty

        st &= p_Struct.PackTable() '16x

        'App #AP0761
        Return AppInstance.SendMessageVisuallyEx("910280", st, "CUS", "", "", "")
    End Function

End Structure

'''Knowen Calling Messages: 910280
Public Structure ExtendedEnumerateInterfaceResultCodes_ReaStrVar_Struct '262x, App #AP0761, Msg #910280
    Dim ReaCde As String '3x				Desc: Reason code
    Dim ReaLng As String '1x				Desc: Language code (E=English, A=Arabic)
    Dim ReaLen As String '3n				Desc: Number of text bytes that follow
    Dim ReaTxt As String '255x				Desc: Variable length text (number of bytes in ReaLen)

    Public Function PackTable() As String
        Dim st As String = String.Empty
        st &= Pack.PackString(ReaCde, 3)
        st &= Pack.PackString(ReaLng, 1)
        st &= Pack.PackNString(ReaLen, 3)
        st &= Pack.PackString(ReaTxt, CInt(ReaLen))
        Return st
    End Function

    Public Sub ReadTable(ByRef DataStream As String)
        ReaCde = Pack.Strip(DataStream, 3)
        ReaLng = Pack.Strip(DataStream, 1)
        ReaLen = Pack.StripN(DataStream, 3)
        ReaTxt = Pack.Strip(DataStream, CInt(ReaLen))
    End Sub

    Public Sub Clear()
        ReaCde = String.Empty
        ReaLng = String.Empty
        ReaLen = String.Empty
        ReaTxt = String.Empty
    End Sub

End Structure

'---------------------------------------------------------------------------------------------------------------------------------------------
'---------------------------------------------------------------------------------------------------------------------------------------------

Public Module CustomerManagement
    '''Knowen Calling Messages: 770101
    Public Structure GetFreeCustomerNumbers_Rsp_Struct '00x, App #761, Msg #770101
        Dim MsgReqDat As GetFreeCustomerNumbers_Struct '48				Desc:This function queries ICS host tables to provide one or more free customer numbers as per the criteria supplied in the request.
        Dim CntHit As String '2n				Desc: Number of hits being returned [j]
        Dim Rsv200 As String '30n				Desc: Reserved, space filled
        Dim CusNum() As String 'CntHit * CntHit

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= MsgReqDat.PackTable() '48x
            st &= Pack.PackNString(CntHit, 2)
            st &= Pack.PackNString(Rsv200, 30)
            For ind As Integer = 0 To CInt(CntHit) - 1 : st &= Pack.PackString(CusNum(ind), 6) : Next
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            MsgReqDat.ReadTable(DataStream) '48x
            CntHit = Pack.StripN(DataStream, 2)
            Rsv200 = Pack.StripN(DataStream, 30)
            ReDim CusNum(CInt(CntHit) - 1)
            For ind As Integer = 0 To CInt(CntHit) - 1 : CusNum(ind) = Pack.Strip(DataStream, 6) : Next
        End Sub

        Public Sub Clear()
            MsgReqDat.Clear()
            CntHit = String.Empty
            Rsv200 = String.Empty
            CusNum = Nothing
        End Sub


        '''App # 761: Msg# 770101
        '''Description: ICS responds with a message containing zero, one or several (up to 40) free customer numbers.
        Public Function GetMessage_GetFreeCustomerNumbers_Rsp(ByVal MsgId As String, ByRef MsgRspDat As GetFreeCustomerNumbers_Rsp_Struct) As Boolean
            Dim resp As String

            'App #761
            If Not (GetMessage_Common("770100", New StackFrame().GetMethod.Name, MsgId, &H80099999, resp)) Then Return False
            Try

                AppInstance.strip(resp, 256)
                MsgRspDat.ReadTable(resp) '0x

            Catch ex As Exception
                HandleError(&H80099999, New StackFrame().GetMethod.Name & ":" & ex.Message, , ex)
                Return False
            End Try
            Return True

        End Function
    End Structure

    '''Knowen Calling Messages: 770100
    Public Structure GetFreeCustomerNumbers_Struct '48x, App #761, Msg #770100
        Dim RetMax As String '2n				Desc: Maximum number of hits to be returned
        Dim SelVrb As String '8x				Desc: Selection verb to be used to find numbers:   "Contains" = Select values containing the data,   "Begins" = Select values starting with the data,   "Exact" = Select a single value that matches the data
        Dim SelDat As String '6x				Desc: Selection data (digits and question marks only)
        Dim BndTyp As String '3x				Desc: Band type to be searched:   "CUS" = customer bands,   "EMP" = staff bands
        Dim Rsv100 As String '29x				Desc: Reserved, space filled

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackNString(RetMax, 2)
            st &= Pack.PackString(SelVrb, 8)
            st &= Pack.PackString(SelDat, 6)
            st &= Pack.PackString(BndTyp, 3)
            st &= Pack.PackString(Rsv100, 29)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            RetMax = Pack.StripN(DataStream, 2)
            SelVrb = Pack.Strip(DataStream, 8)
            SelDat = Pack.Strip(DataStream, 6)
            BndTyp = Pack.Strip(DataStream, 3)
            Rsv100 = Pack.Strip(DataStream, 29)
        End Sub

        Public Sub Clear()
            RetMax = String.Empty
            SelVrb = String.Empty
            SelDat = String.Empty
            BndTyp = String.Empty
            Rsv100 = String.Empty
        End Sub

        '''App # 761: Msg# 770100
        '''Description: This function queries ICS host tables to provide one or more free customer numbers as per the criteria supplied in the request.
        Public Function SendMessage_GetFreeCustomerNumbers(ByVal p_Struct As GetFreeCustomerNumbers_Struct) As String

            Dim st As String = String.Empty

            st &= p_Struct.PackTable() '48x

            'App #761
            Return AppInstance.SendMessageVisuallyEx("770100", st, "", "", "", "")
        End Function

    End Structure

    '''Knowen Calling Messages: 770111
    Public Structure QueryReservedCustomerNumbers_Rsp_Struct '00x, App #761, Msg #770111
        Dim MsgReqDat As QueryReservedCustomerNumbers_Struct '96				Desc:This message allows the an authorised end-user to query previously reserved customer numbers and allows criteria to be specified to narrow down the search.
        Dim CntHit As String '4n				Desc: Number of entries being returned
        Dim Rsv200 As String '28x				Desc: Reserved, space filled
        Dim RsvItm As QueryReservedCustomerNumbers_RsvItm_Struct '120				Desc:reservation items

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= MsgReqDat.PackTable() '96x
            st &= Pack.PackNString(CntHit, 4)
            st &= Pack.PackString(Rsv200, 28)
            st &= RsvItm.PackTable() '120x
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            MsgReqDat.ReadTable(DataStream) '96x
            CntHit = Pack.StripN(DataStream, 4)
            Rsv200 = Pack.Strip(DataStream, 28)
            RsvItm.ReadTable(DataStream) '120x
        End Sub

        Public Sub Clear()
            MsgReqDat.Clear()
            CntHit = String.Empty
            Rsv200 = String.Empty
            RsvItm.Clear()
        End Sub


        '''App # 761: Msg# 770111
        '''Description: This message allows the an authorised end-user to query previously reserved customer numbers and allows criteria to be specified to narrow down the search.
        Public Function GetMessage_QueryReservedCustomerNumbers_Rsp(ByVal MsgId As String, ByRef MsgRspDat As QueryReservedCustomerNumbers_Rsp_Struct) As Boolean
            Dim resp As String

            'App #761
            If Not (GetMessage_Common("770110", New StackFrame().GetMethod.Name, MsgId, &H80099999, resp)) Then Return False
            Try

                AppInstance.strip(resp, 256)
                MsgRspDat.ReadTable(resp) '0x

            Catch ex As Exception
                HandleError(&H80099999, New StackFrame().GetMethod.Name & ":" & ex.Message, , ex)
                Return False
            End Try
            Return True

        End Function
    End Structure

    '''Knowen Calling Messages: 770110
    Public Structure QueryReservedCustomerNumbers_Struct '96x, App #761, Msg #770110
        Dim SelUsrIde As String '10x				Desc: User identity or spaces for all
        Dim SelRsvBeg As String '8x				Desc: Start date (YYYYMMDD) or spaces for all
        Dim SelRsvEnd As String '8x				Desc: End date (YYYYMMDD) or spaces for all
        Dim SelRsvNam As String '35x				Desc: Name search mask or spaces
        Dim SelRsvCid As String '10x				Desc: National identity mask or spaces
        Dim Rsv100 As String '25x				Desc: Reserved, space filled

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(SelUsrIde, 10)
            st &= Pack.PackDate(SelRsvBeg, True)
            st &= Pack.PackDate(SelRsvEnd, True)
            st &= Pack.PackString(SelRsvNam, 35)
            st &= Pack.PackString(SelRsvCid, 10)
            st &= Pack.PackString(Rsv100, 25)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            SelUsrIde = Pack.Strip(DataStream, 10)
            SelRsvBeg = Pack.Strip(DataStream, 8)
            SelRsvEnd = Pack.Strip(DataStream, 8)
            SelRsvNam = Pack.Strip(DataStream, 35)
            SelRsvCid = Pack.Strip(DataStream, 10)
            Rsv100 = Pack.Strip(DataStream, 25)
        End Sub

        Public Sub Clear()
            SelUsrIde = String.Empty
            SelRsvBeg = String.Empty
            SelRsvEnd = String.Empty
            SelRsvNam = String.Empty
            SelRsvCid = String.Empty
            Rsv100 = String.Empty
        End Sub

        '''App # 761: Msg# 770110
        '''Description: This message allows the an authorised end-user to query previously reserved customer numbers and allows criteria to be specified to narrow down the search.
        Public Function SendMessage_QueryReservedCustomerNumbers(ByVal p_Struct As QueryReservedCustomerNumbers_Struct) As String

            Dim st As String = String.Empty

            st &= p_Struct.PackTable() '96x

            'App #761
            Return AppInstance.SendMessageVisuallyEx("770110", st, "", "", "", "")
        End Function

    End Structure

    '''Knowen Calling Messages: 770111
    Public Structure QueryReservedCustomerNumbers_RsvItm_Struct '120x, App #761, Msg #770111
        Dim CusNum As String '6n				Desc: Reserved customer number
        Dim CusNam As String '35x				Desc: Reserved for customer name (English or Arabic)
        Dim CusCid As String '10x				Desc: Reserved for customer national identity (or spaces)
        Dim RsvWho As String '10x				Desc: Reserved by user identity
        Dim RsvStp As String '12x				Desc: Date and time reserved (YYYYMMDDhhmm)
        Dim ExtWho As String '10x				Desc: Extended by user identity (or spaces)
        Dim ExtStp As String '12x				Desc: Date and time extended (YYYYMMDDhhmm)
        Dim RsvExp As String '6x				Desc: Date that the reservation will expire or has expired
        Dim Rsv300 As String '21x				Desc: Reserved, space filled

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackNString(CusNum, 6)
            st &= Pack.PackString(CusNam, 35)
            st &= Pack.PackString(CusCid, 10)
            st &= Pack.PackString(RsvWho, 10)
            st &= Pack.PackString(RsvStp, 12)
            st &= Pack.PackString(ExtWho, 10)
            st &= Pack.PackString(ExtStp, 12)
            st &= Pack.PackString(RsvExp, 6)
            st &= Pack.PackString(Rsv300, 21)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            CusNum = Pack.StripN(DataStream, 6)
            CusNam = Pack.Strip(DataStream, 35)
            CusCid = Pack.Strip(DataStream, 10)
            RsvWho = Pack.Strip(DataStream, 10)
            RsvStp = Pack.Strip(DataStream, 12)
            ExtWho = Pack.Strip(DataStream, 10)
            ExtStp = Pack.Strip(DataStream, 12)
            RsvExp = Pack.Strip(DataStream, 6)
            Rsv300 = Pack.Strip(DataStream, 21)
        End Sub

        Public Sub Clear()
            CusNum = String.Empty
            CusNam = String.Empty
            CusCid = String.Empty
            RsvWho = String.Empty
            RsvStp = String.Empty
            ExtWho = String.Empty
            ExtStp = String.Empty
            RsvExp = String.Empty
            Rsv300 = String.Empty
        End Sub


    End Structure
    '''Knowen Calling Messages: 770121
    Public Structure ReserveCustomerNumber_Rsp_Struct '250x, App #761, Msg #770121
        Dim MsgReqDat As ReserveCustomerNumber_Struct '96				Desc:This message allows an authorised end-user to reserve a customer number. This message is normally issued after requesting an enumeration of free customer numbers (770100).
        Dim Rsv200 As String '32x				Desc: Reserved, space filled
        Dim CusNum As String '6n				Desc: Reserved customer number
        Dim CusNam As String '35x				Desc: Reserved for customer name (English or Arabic)
        Dim CusCid As String '10x				Desc: Reserved for customer national identity (or spaces)
        Dim RsvWho As String '10x				Desc: Reserved by user identity
        Dim RsvStp As String '12x				Desc: Date and time reserved (YYYYMMDDhhmm)
        Dim ExtWho As String '10x				Desc: Extended by user identity (or spaces)
        Dim ExtStp As String '12x				Desc: Date and time extended (YYYYMMDDhhmm)
        Dim RsvExp As String '6x				Desc: Date that the reservation will expire or has expired
        Dim Rsv300 As String '21x				Desc: Reserved, space filled

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= MsgReqDat.PackTable() '96x
            st &= Pack.PackString(Rsv200, 32)
            st &= Pack.PackNString(CusNum, 6)
            st &= Pack.PackString(CusNam, 35)
            st &= Pack.PackString(CusCid, 10)
            st &= Pack.PackString(RsvWho, 10)
            st &= Pack.PackString(RsvStp, 12)
            st &= Pack.PackString(ExtWho, 10)
            st &= Pack.PackString(ExtStp, 12)
            st &= Pack.PackString(RsvExp, 6)
            st &= Pack.PackString(Rsv300, 21)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            MsgReqDat.ReadTable(DataStream) '96x
            Rsv200 = Pack.Strip(DataStream, 32)
            CusNum = Pack.StripN(DataStream, 6)
            CusNam = Pack.Strip(DataStream, 35)
            CusCid = Pack.Strip(DataStream, 10)
            RsvWho = Pack.Strip(DataStream, 10)
            RsvStp = Pack.Strip(DataStream, 12)
            ExtWho = Pack.Strip(DataStream, 10)
            ExtStp = Pack.Strip(DataStream, 12)
            RsvExp = Pack.Strip(DataStream, 6)
            Rsv300 = Pack.Strip(DataStream, 21)
        End Sub

        Public Sub Clear()
            MsgReqDat.Clear()
            Rsv200 = String.Empty
            CusNum = String.Empty
            CusNam = String.Empty
            CusCid = String.Empty
            RsvWho = String.Empty
            RsvStp = String.Empty
            ExtWho = String.Empty
            ExtStp = String.Empty
            RsvExp = String.Empty
            Rsv300 = String.Empty
        End Sub


        '''App # 761: Msg# 770121
        '''Description: This message allows an authorised end-user to reserve a customer number. This message is normally issued after requesting an enumeration of free customer numbers (770100).
        Public Function GetMessage_ReserveCustomerNumber_Rsp(ByVal MsgId As String, ByRef MsgRspDat As ReserveCustomerNumber_Rsp_Struct) As Boolean
            Dim resp As String

            'App #761
            If Not (GetMessage_Common("770120", New StackFrame().GetMethod.Name, MsgId, &H80099999, resp)) Then Return False
            Try

                AppInstance.strip(resp, 256)
                MsgRspDat.ReadTable(resp) '250x

            Catch ex As Exception
                HandleError(&H80099999, New StackFrame().GetMethod.Name & ":" & ex.Message, , ex)
                Return False
            End Try
            Return True

        End Function
    End Structure

    '''Knowen Calling Messages: 770120
    Public Structure ReserveCustomerNumber_Struct '96x, App #761, Msg #770120
        Dim Rsv100 As String '2x				Desc: Reserved, space filled
        Dim CusNum As String '6n				Desc: Customer number to be reserved
        Dim CusNam As String '35x				Desc: Reserved for customer name (English or Arabic)
        Dim CusCid As String '10x				Desc: Reserved for national identity (or spaces)
        Dim Rsv101 As String '43x				Desc: Reserved, space filled

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(Rsv100, 2)
            st &= Pack.PackNString(CusNum, 6)
            st &= Pack.PackString(CusNam, 35)
            st &= Pack.PackString(CusCid, 10)
            st &= Pack.PackString(Rsv101, 43)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            Rsv100 = Pack.Strip(DataStream, 2)
            CusNum = Pack.StripN(DataStream, 6)
            CusNam = Pack.Strip(DataStream, 35)
            CusCid = Pack.Strip(DataStream, 10)
            Rsv101 = Pack.Strip(DataStream, 43)
        End Sub

        Public Sub Clear()
            Rsv100 = String.Empty
            CusNum = String.Empty
            CusNam = String.Empty
            CusCid = String.Empty
            Rsv101 = String.Empty
        End Sub

        '''App # 761: Msg# 770120
        '''Description: This message allows an authorised end-user to reserve a customer number. This message is normally issued after requesting an enumeration of free customer numbers (770100).
        Public Function SendMessage_ReserveCustomerNumber(ByVal p_Struct As ReserveCustomerNumber_Struct) As String

            Dim st As String = String.Empty

            st &= p_Struct.PackTable() '96x

            'App #761
            Return AppInstance.SendMessageVisuallyEx("770120", st, "CUS", p_Struct.CusNum, "", "")
        End Function

    End Structure

    '''Knowen Calling Messages: 770131
    Public Structure ExtendReservationCustomerNumber_Rsp_Struct '250x, App #761, Msg #770131
        Dim MsgReqDat As ExtendReservationCustomerNumber_Struct '96				Desc:This message allows an authorised end-user to extend a reservation of a customer number such that expiry is avoided. This message is normally issued after requesting an enumeration of free customer numbers (770100).
        Dim Rsv200 As String '32x				Desc: Reserved, space filled
        Dim CusNum As String '6n				Desc: Reserved customer number
        Dim CusNam As String '35x				Desc: Reserved for customer name (English or Arabic)
        Dim CusCid As String '10x				Desc: Reserved for customer national identity (or spaces)
        Dim RsvWho As String '10x				Desc: Reserved by user identity
        Dim RsvStp As String '12x				Desc: Date and time reserved (YYYYMMDDhhmm)
        Dim ExtWho As String '10x				Desc: Extended by user identity (or spaces)
        Dim ExtStp As String '12x				Desc: Date and time extended (YYYYMMDDhhmm)
        Dim RsvExp As String '6x				Desc: Date that the reservation will expire or has expired
        Dim Rsv300 As String '21x				Desc: Reserved, space filled

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= MsgReqDat.PackTable() '96x
            st &= Pack.PackString(Rsv200, 32)
            st &= Pack.PackNString(CusNum, 6)
            st &= Pack.PackString(CusNam, 35)
            st &= Pack.PackString(CusCid, 10)
            st &= Pack.PackString(RsvWho, 10)
            st &= Pack.PackString(RsvStp, 12)
            st &= Pack.PackString(ExtWho, 10)
            st &= Pack.PackString(ExtStp, 12)
            st &= Pack.PackString(RsvExp, 6)
            st &= Pack.PackString(Rsv300, 21)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            MsgReqDat.ReadTable(DataStream) '96x
            Rsv200 = Pack.Strip(DataStream, 32)
            CusNum = Pack.StripN(DataStream, 6)
            CusNam = Pack.Strip(DataStream, 35)
            CusCid = Pack.Strip(DataStream, 10)
            RsvWho = Pack.Strip(DataStream, 10)
            RsvStp = Pack.Strip(DataStream, 12)
            ExtWho = Pack.Strip(DataStream, 10)
            ExtStp = Pack.Strip(DataStream, 12)
            RsvExp = Pack.Strip(DataStream, 6)
            Rsv300 = Pack.Strip(DataStream, 21)
        End Sub

        Public Sub Clear()
            MsgReqDat.Clear()
            Rsv200 = String.Empty
            CusNum = String.Empty
            CusNam = String.Empty
            CusCid = String.Empty
            RsvWho = String.Empty
            RsvStp = String.Empty
            ExtWho = String.Empty
            ExtStp = String.Empty
            RsvExp = String.Empty
            Rsv300 = String.Empty
        End Sub


        '''App # 761: Msg# 770131
        '''Description: This message allows an authorised end-user to extend a reservation of a customer number such that expiry is avoided.
        Public Function GetMessage_ExtendReservationCustomerNumber_Rsp(ByVal MsgId As String, ByRef MsgRspDat As ExtendReservationCustomerNumber_Rsp_Struct) As Boolean
            Dim resp As String

            'App #761
            If Not (GetMessage_Common("770130", New StackFrame().GetMethod.Name, MsgId, &H80099999, resp)) Then Return False
            Try

                AppInstance.strip(resp, 256)
                MsgRspDat.ReadTable(resp) '250x

            Catch ex As Exception
                HandleError(&H80099999, New StackFrame().GetMethod.Name & ":" & ex.Message, , ex)
                Return False
            End Try
            Return True

        End Function
    End Structure

    '''Knowen Calling Messages: 770130
    Public Structure ExtendReservationCustomerNumber_Struct '96x, App #761, Msg #770130
        Dim Rsv100 As String '2x				Desc: Reserved, space filled
        Dim CusNum As String '6n				Desc: Customer number reservation to be extended
        Dim Rsv101 As String '88x				Desc: Reserved, space filled

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(Rsv100, 2)
            st &= Pack.PackNString(CusNum, 6)
            st &= Pack.PackString(Rsv101, 88)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            Rsv100 = Pack.Strip(DataStream, 2)
            CusNum = Pack.StripN(DataStream, 6)
            Rsv101 = Pack.Strip(DataStream, 88)
        End Sub

        Public Sub Clear()
            Rsv100 = String.Empty
            CusNum = String.Empty
            Rsv101 = String.Empty
        End Sub

        '''App # 761: Msg# 770130
        '''Description: This message allows an authorised end-user to extend a reservation of a customer number such that expiry is avoided. This message is normally issued after requesting an enumeration of free customer numbers (770100).
        Public Function SendMessage_ExtendReservationCustomerNumber(ByVal p_Struct As ExtendReservationCustomerNumber_Struct) As String

            Dim st As String = String.Empty

            st &= p_Struct.PackTable() '96x

            'App #761
            Return AppInstance.SendMessageVisuallyEx("770130", st, "CUS", p_Struct.CusNum, "", "")
        End Function

    End Structure

    '''Knowen Calling Messages: 770141
    Public Structure ReleaseReservationCustomerNumber_Rsp_Struct '250x, App #761, Msg #770141
        Dim MsgReqDat As ReleaseReservationCustomerNumber_Struct '96				Desc:This message allows an authorised end-user to release a reservation of a customer number such that the customer number becomes free.
        Dim Rsv200 As String '32x				Desc: Reserved, space filled
        Dim CusNum As String '6n				Desc: Reserved customer number
        Dim CusNam As String '35x				Desc: Reserved for customer name (English or Arabic)
        Dim CusCid As String '10x				Desc: Reserved for customer national identity (or spaces)
        Dim RsvWho As String '10x				Desc: Reserved by user identity
        Dim RsvStp As String '12x				Desc: Date and time reserved (YYYYMMDDhhmm)
        Dim ExtWho As String '10x				Desc: Extended by user identity (or spaces)
        Dim ExtStp As String '12x				Desc: Date and time extended (YYYYMMDDhhmm)
        Dim RsvExp As String '6x				Desc: Date that the reservation will expire or has expired (todays date)
        Dim Rsv300 As String '21x				Desc: Reserved, space filled

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= MsgReqDat.PackTable() '96x
            st &= Pack.PackString(Rsv200, 32)
            st &= Pack.PackNString(CusNum, 6)
            st &= Pack.PackString(CusNam, 35)
            st &= Pack.PackString(CusCid, 10)
            st &= Pack.PackString(RsvWho, 10)
            st &= Pack.PackString(RsvStp, 12)
            st &= Pack.PackString(ExtWho, 10)
            st &= Pack.PackString(ExtStp, 12)
            st &= Pack.PackString(RsvExp, 6)
            st &= Pack.PackString(Rsv300, 21)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            MsgReqDat.ReadTable(DataStream) '96x
            Rsv200 = Pack.Strip(DataStream, 32)
            CusNum = Pack.StripN(DataStream, 6)
            CusNam = Pack.Strip(DataStream, 35)
            CusCid = Pack.Strip(DataStream, 10)
            RsvWho = Pack.Strip(DataStream, 10)
            RsvStp = Pack.Strip(DataStream, 12)
            ExtWho = Pack.Strip(DataStream, 10)
            ExtStp = Pack.Strip(DataStream, 12)
            RsvExp = Pack.Strip(DataStream, 6)
            Rsv300 = Pack.Strip(DataStream, 21)
        End Sub

        Public Sub Clear()
            MsgReqDat.Clear()
            Rsv200 = String.Empty
            CusNum = String.Empty
            CusNam = String.Empty
            CusCid = String.Empty
            RsvWho = String.Empty
            RsvStp = String.Empty
            ExtWho = String.Empty
            ExtStp = String.Empty
            RsvExp = String.Empty
            Rsv300 = String.Empty
        End Sub


        '''App # 761: Msg# 770141
        '''Description: This message allows an authorised end-user to release a reservation of a customer number such that the customer number becomes free.
        Public Function GetMessage_ReleaseReservationCustomerNumber_Rsp(ByVal MsgId As String, ByRef MsgRspDat As ReleaseReservationCustomerNumber_Rsp_Struct) As Boolean
            Dim resp As String

            'App #761
            If Not (GetMessage_Common("770140", New StackFrame().GetMethod.Name, MsgId, &H80099999, resp)) Then Return False
            Try

                AppInstance.strip(resp, 256)
                MsgRspDat.ReadTable(resp) '250x

            Catch ex As Exception
                HandleError(&H80099999, New StackFrame().GetMethod.Name & ":" & ex.Message, , ex)
                Return False
            End Try
            Return True

        End Function
    End Structure

    '''Knowen Calling Messages: 770140
    Public Structure ReleaseReservationCustomerNumber_Struct '96x, App #761, Msg #770140
        Dim Rsv100 As String '2x				Desc: Reserved, space filled
        Dim CusNum As String '6n				Desc: Customer number to be released
        Dim Rsv101 As String '88x				Desc: Reserved, space filled

        Public Function PackTable() As String
            Dim st As String = String.Empty
            st &= Pack.PackString(Rsv100, 2)
            st &= Pack.PackNString(CusNum, 6)
            st &= Pack.PackString(Rsv101, 88)
            Return st
        End Function

        Public Sub ReadTable(ByRef DataStream As String)
            Rsv100 = Pack.Strip(DataStream, 2)
            CusNum = Pack.StripN(DataStream, 6)
            Rsv101 = Pack.Strip(DataStream, 88)
        End Sub

        Public Sub Clear()
            Rsv100 = String.Empty
            CusNum = String.Empty
            Rsv101 = String.Empty
        End Sub

        '''App # 761: Msg# 770140
        '''Description: This message allows an authorised end-user to release a reservation of a customer number such that the customer number becomes free.
        Public Function SendMessage_ReleaseReservationCustomerNumber(ByVal p_Struct As ReleaseReservationCustomerNumber_Struct) As String

            Dim st As String = String.Empty

            st &= p_Struct.PackTable() '96x

            'App #761
            Return AppInstance.SendMessageVisuallyEx("770140", st, "CUS", p_Struct.CusNum, "", "")
        End Function

    End Structure

End Module
